<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>/home/Code/Mezzanine/Mezzanine/src/Resource/datastream.cpp Source File</title>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="DoxyStyle.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script> 
</head>
<body onload='searchBox.OnSelectItem(0);'>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;" nowrap="nowrap">
   <div id="projectname"><a href="http://blacktoppstudios.com"><img src="logogreen100pxtall.png"/></a>MezzanineEngine&#160;<span id="projectnumber">September&nbsp;16,&nbsp;2013</span></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_df2e1c8414b6a086be441ff04537838a.xhtml">Mezzanine</a></li><li class="navelem"><a class="el" href="dir_2b71fc9949116feedacddb93a79d832d.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_612e0ce9d3e7acd2a9c9c8b6f7ecd0b6.xhtml">Resource</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">datastream.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//Â© Copyright 2010 - 2013 BlackTopp Studios Inc.</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">/* This file is part of The Mezzanine Engine.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">    The Mezzanine Engine is free software: you can redistribute it and/or modify</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">    it under the terms of the GNU General Public License as published by</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">    the Free Software Foundation, either version 3 of the License, or</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">    (at your option) any later version.</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">    The Mezzanine Engine is distributed in the hope that it will be useful,</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">    but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">    GNU General Public License for more details.</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">    You should have received a copy of the GNU General Public License</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">    along with The Mezzanine Engine.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">/* The original authors have included a copy of the license specified above in the</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">   &#39;Docs&#39; folder. See &#39;gpl.txt&#39;</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">/* We welcome the use of the Mezzanine engine to anyone, including companies who wish to</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">   Build professional software and charge for their product.</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">   However there are some practical restrictions, so if your project involves</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">   any of the following you should contact us and we will try to work something</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">   out:</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">    - DRM or Copy Protection of any kind(except Copyrights)</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">    - Software Patents You Do Not Wish to Freely License</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">    - Any Kind of Linking to Non-GPL licensed Works</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">    - Are Currently In Violation of Another Copyright Holder&#39;s GPL License</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">    - If You want to change our code and not add a few hundred MB of stuff to</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">        your distribution</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment">   These and other limitations could cause serious legal problems if you ignore</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">   them, so it is best to simply contact us or the Free Software Foundation, if</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">   you have any questions.</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">   Joseph Toppi - toppij@gmail.com</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">   John Blackwood - makoenergy02@gmail.com</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#ifndef _resourcedatastream_cpp</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define _resourcedatastream_cpp</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="datastream_8h.xhtml" title="Declaration of DataStream.">Resource/datastream.h</a>&quot;</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor">#include &quot;stringtool.h&quot;</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#include &quot;exception.h&quot;</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="preprocessor">#include &lt;cstring&gt;</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="preprocessor">#include &lt;cstdio&gt;</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="preprocessor">#define TEMP_STREAM_SIZE 128</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="keyword">namespace </span>Mezzanine</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;{</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">namespace </span>Resource</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    {</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="preprocessor">#ifdef USENEWDATASTREAM</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="preprocessor"></span>        <span class="keywordtype">void</span> IOStream::Advance(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine_1_1Resource.xhtml#a927f01aa6d9e7751748be3b042fd54f7" title="Convenience define for the stream offset datatype.">StreamOff</a> Count)</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        {</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;            this-&gt;SetStreamPosition(Count,SO_Current);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        }</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keywordtype">void</span> IOStream::SetStreamPosition(<a class="code" href="namespaceMezzanine_1_1Resource.xhtml#a5696fd3c8e65153dc45d33729590af31" title="Convenience define for the stream position datatype.">StreamPos</a> Position)</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        {</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            this-&gt;SetReadPosition(Position);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            this-&gt;SetWritePosition(Position);</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        }</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keywordtype">void</span> IOStream::SetStreamPosition(<a class="code" href="namespaceMezzanine_1_1Resource.xhtml#a927f01aa6d9e7751748be3b042fd54f7" title="Convenience define for the stream offset datatype.">StreamOff</a> Offset, SeekOrigin Origin)</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        {</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            this-&gt;SetReadPosition(Offset,Origin);</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            this-&gt;SetWritePosition(Offset,Origin);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        }</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <a class="code" href="namespaceMezzanine_1_1Resource.xhtml#a5696fd3c8e65153dc45d33729590af31" title="Convenience define for the stream position datatype.">StreamPos</a> IOStream::GetStreamPosition(<span class="keywordtype">bool</span> Read = <span class="keyword">true</span>)</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        {</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            <span class="keywordflow">if</span>(Read) <span class="keywordflow">return</span> this-&gt;GetReadPosition();</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">return</span> this-&gt;GetWritePosition();</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        }</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="preprocessor">#else //USENEWDATASTREAM</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="preprocessor"></span><span class="comment">        ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment"></span>        <span class="comment">// DataStream Methods</span><span class="comment"></span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment">        ///////////////////////////////////////</span></div>
<div class="line"><a name="l00084"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#aa8b64965c359bc42b5eb878423758800">   84</a></span>&#160;<span class="comment"></span>        <a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#aa8b64965c359bc42b5eb878423758800" title="Class constructor.">DataStream::DataStream</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#a1b6c09063432c7ddd87011c88306c767" title="An 16-bit unsigned integer.">UInt16</a> Flags)</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            : SFlags(Flags),</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;              Size(0)</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        {</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        }</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div>
<div class="line"><a name="l00090"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#aafa07b258113f048729ae8e285d9ea8c">   90</a></span>&#160;        <a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#aafa07b258113f048729ae8e285d9ea8c" title="Class destructor.">DataStream::~DataStream</a>()</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        {</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        }</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment">        ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment"></span>        <span class="comment">// Utility</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div>
<div class="line"><a name="l00097"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#a704dfcc72e440a3cc8e0065047755229">   97</a></span>&#160;        <a class="code" href="namespaceMezzanine_1_1Resource.xhtml#a57c319fb1991c37cb3ee0473ba973235" title="Convenience define for the stream size datatype.">StreamSize</a> <a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#a704dfcc72e440a3cc8e0065047755229" title="Gets the size of the stream.">DataStream::GetSize</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#a9da6fdf47ede040fac9f69b5550e3c5b" title="The size of the stream.">Size</a>;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        }</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div>
<div class="line"><a name="l00102"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#aaf7a1451e8f097a2294887cf6979940e">  102</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#aaf7a1451e8f097a2294887cf6979940e" title="Gets whether this stream can be read.">DataStream::IsReadable</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            <span class="keywordflow">return</span> (<a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#a0c9d42033c60b2d69e3e6d4f143f0588" title="The type of access this stream has to the resource.">SFlags</a> &amp; <a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#aac88ac21234a2b0b34e03ec4246d356ca4c51ec3119786d9312a4e3ad3eaa244a" title="Permit read operations on the stream.">DataStream::SF_Read</a>);</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        }</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div>
<div class="line"><a name="l00107"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#aa01c6819a0cc70e1a7f2988c9381993b">  107</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#aa01c6819a0cc70e1a7f2988c9381993b" title="Gets whether this stream can be written to.">DataStream::IsWriteable</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            <span class="keywordflow">return</span> (<a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#a0c9d42033c60b2d69e3e6d4f143f0588" title="The type of access this stream has to the resource.">SFlags</a> &amp; <a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#aac88ac21234a2b0b34e03ec4246d356cad57bdae4c8f86ab0a1cb1e9c948cb1fb" title="Permit write operations on the stream.">DataStream::SF_Write</a>);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        }</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">        ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment"></span>        <span class="comment">// Stream Access and Manipulation</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">        ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment"></span>        <span class="comment">// Formatting Methods</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div>
<div class="line"><a name="l00118"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#a62a1623251773ab3a237a548ffb67d6a">  118</a></span>&#160;        <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a> <a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#a62a1623251773ab3a237a548ffb67d6a" title="Gets the contents of the stream as a string.">DataStream::GetAsString</a>()</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        {</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            <span class="keywordtype">size_t</span> BufferSize = (this-&gt;<a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#a9da6fdf47ede040fac9f69b5550e3c5b" title="The size of the stream.">Size</a> &gt; 0 ? this-&gt;<a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#a9da6fdf47ede040fac9f69b5550e3c5b" title="The size of the stream.">Size</a> : 4096);</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            <span class="keywordtype">char</span>* Buffer = <span class="keyword">new</span> <span class="keywordtype">char</span>[BufferSize];</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#ab7650409b34b0d792160a889fe9e5ba9" title="Sets the position of the read and write cursors explicitly.">SetStreamPosition</a>(0);</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a> Ret;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            <span class="keywordflow">while</span> (!<a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#a606ec8602a93ddda483be1454f7e98a4" title="Gets whether or not the current position is at the end of the file/stream.">EoF</a>())</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            {</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                <span class="keywordtype">size_t</span> BytesRead = <a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#ad9b597f7d4561a7425b96bb497e6dce2" title="Reads data from the stream, copying to a buffer.">Read</a>(Buffer,BufferSize);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                Ret.append(Buffer,BytesRead);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            }</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            <span class="keyword">delete</span>[] Buffer;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            <span class="keywordflow">return</span> Ret;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        }</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div>
<div class="line"><a name="l00134"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#aa8458683984478f605fa4dd6c3f214e1">  134</a></span>&#160;        <span class="keywordtype">size_t</span> <a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#aa8458683984478f605fa4dd6c3f214e1" title="Reads a single line from a string.">DataStream::ReadLine</a>(<a class="code" href="namespaceMezzanine.xhtml#ab4f5efed51a1f6fc1799c821c3daf4b7" title="A datatype to represent one character.">Char8</a>* Buffer, <span class="keywordtype">size_t</span> MaxCount, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; Delim)</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        {</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            <span class="keywordtype">bool</span> TrimCR = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            <span class="keywordflow">if</span>(Delim.find_first_of(<span class="charliteral">&#39;\n&#39;</span>) != String::npos)</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            {</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                TrimCR = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            }</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            <span class="keywordtype">char</span> Temp[TEMP_STREAM_SIZE];</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            <span class="keywordtype">size_t</span> ChunkSize = std::min(MaxCount,(<span class="keywordtype">size_t</span>)TEMP_STREAM_SIZE - 1);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            <span class="keywordtype">size_t</span> TotalCount = 0;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            <span class="keywordtype">size_t</span> ReadCount = 0;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            <span class="keywordflow">while</span>(ChunkSize &amp;&amp; (ReadCount = <a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#ad9b597f7d4561a7425b96bb497e6dce2" title="Reads data from the stream, copying to a buffer.">Read</a>(Temp,ChunkSize)) != 0)</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            {</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                Temp[ReadCount] = <span class="charliteral">&#39;\0&#39;</span>;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                <span class="keywordtype">size_t</span> Pos = std::strcspn(Temp,Delim.c_str());</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                <span class="keywordflow">if</span>(Pos &lt; ReadCount)</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                {</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                    this-&gt;<a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#adfc609d5c906232c7f98e9ee845617c0" title="Advances the position in the stream.">Advance</a>((<span class="keywordtype">long</span>)(Pos + 1 - ReadCount));</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                }</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                <span class="keywordflow">if</span>(Buffer)</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                {</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                    std::memcpy(Buffer + TotalCount,Temp,Pos);</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                }</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                TotalCount += Pos;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                <span class="keywordflow">if</span>(Pos &lt; ReadCount)</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                {</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                    <span class="keywordflow">if</span>(TrimCR &amp;&amp; TotalCount &amp;&amp; Buffer[TotalCount - 1] == <span class="charliteral">&#39;\r&#39;</span>)</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                    {</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                        --TotalCount;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                    }</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                }</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                ChunkSize = std::min(MaxCount - TotalCount,(<span class="keywordtype">size_t</span>)TEMP_STREAM_SIZE - 1);</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            }</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            Buffer[TotalCount] = <span class="charliteral">&#39;\0&#39;</span>;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            <span class="keywordflow">return</span> TotalCount;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        }</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div>
<div class="line"><a name="l00178"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#a164d641a57fd2dcea7e012d381fedc1f">  178</a></span>&#160;        <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a> <a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#a164d641a57fd2dcea7e012d381fedc1f" title="Gets the contents of the current line in the stream.">DataStream::GetLine</a>(<span class="keywordtype">bool</span> Trim)</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        {</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            <span class="keywordtype">char</span> Temp[TEMP_STREAM_SIZE];</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a> Ret;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            <span class="keywordtype">size_t</span> ReadCount;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            <span class="keywordflow">while</span>( (ReadCount = <a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#ad9b597f7d4561a7425b96bb497e6dce2" title="Reads data from the stream, copying to a buffer.">Read</a>(Temp,TEMP_STREAM_SIZE - 1)) != 0 )</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            {</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                Temp[ReadCount] = <span class="charliteral">&#39;\0&#39;</span>;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                <span class="keywordtype">char</span>* Pos = std::strchr(Temp,<span class="charliteral">&#39;\n&#39;</span>);</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                <span class="keywordflow">if</span>(Pos != 0)</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                {</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                    this-&gt;<a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#adfc609d5c906232c7f98e9ee845617c0" title="Advances the position in the stream.">Advance</a>((<span class="keywordtype">long</span>)(Pos + 1 - Temp - ReadCount));</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                    *Pos = <span class="charliteral">&#39;\0&#39;</span>;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                }</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                Ret += Temp;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                <span class="keywordflow">if</span>(Pos != 0)</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                {</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                    <span class="keywordflow">if</span>(Ret.length() &amp;&amp; Ret[Ret.length() - 1] == <span class="charliteral">&#39;\r&#39;</span>)</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                    {</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                        Ret.erase(Ret.length() - 1, 1);</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                    }</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                }</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            }</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            <span class="keywordflow">if</span>(Trim)</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            {</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                <a class="code" href="namespaceMezzanine_1_1StringTools.xhtml#a52a2e19154103ede216aebe5f953cf2d" title="Trims all whitespaces and tabs from a one or both sides of a string.">StringTools::Trim</a>(Ret);</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            }</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            <span class="keywordflow">return</span> Ret;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        }</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div>
<div class="line"><a name="l00215"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#a8b55a5a1fc3ade2eeb5966a9563ec3ec">  215</a></span>&#160;        <span class="keywordtype">size_t</span> <a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#a8b55a5a1fc3ade2eeb5966a9563ec3ec" title="Moves the current position to the start of the next line.">DataStream::SkipLine</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; Delim)</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        {</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            <span class="keywordtype">char</span> Temp[TEMP_STREAM_SIZE];</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;            <span class="keywordtype">size_t</span> TotalBytes = 0;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            <span class="keywordtype">size_t</span> ReadCount = 0;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;            <span class="keywordflow">while</span>( (ReadCount = <a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#ad9b597f7d4561a7425b96bb497e6dce2" title="Reads data from the stream, copying to a buffer.">Read</a>(Temp,TEMP_STREAM_SIZE - 1)) != 0 )</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;            {</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                Temp[ReadCount] = <span class="charliteral">&#39;\0&#39;</span>;</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                <span class="keywordtype">size_t</span> Position = std::strcspn(Temp,Delim.c_str());</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                <span class="keywordflow">if</span>(Position &lt; ReadCount)</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                {</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                    this-&gt;<a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#adfc609d5c906232c7f98e9ee845617c0" title="Advances the position in the stream.">Advance</a>((<span class="keywordtype">long</span>)(Position + 1 - ReadCount));</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                    TotalBytes += Position + 1;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                }</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                TotalBytes += ReadCount;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;            }</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;            <span class="keywordflow">return</span> TotalBytes;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        }</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="preprocessor"></span>    }<span class="comment">//Resource</span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;}<span class="comment">//Mezzanine</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="preprocessor">#endif</span></div>
</div><!-- fragment --></div><!-- contents -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Sep 16 2013 06:21:42 for MezzanineEngine by&#160;<a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1</small></address>
</body>
</html>
