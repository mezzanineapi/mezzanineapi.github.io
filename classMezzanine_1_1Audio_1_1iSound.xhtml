<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Mezzanine::Audio::iSound Class Reference</title>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="DoxyStyle.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script> 
</head>
<body onload='searchBox.OnSelectItem(0);'>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;" nowrap="nowrap">
   <div id="projectname"><a href="http://blacktoppstudios.com"><img src="logogreen100pxtall.png"/></a>MezzanineEngine&#160;<span id="projectnumber">September&nbsp;16,&nbsp;2013</span></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceMezzanine.xhtml">Mezzanine</a></li><li class="navelem"><a class="el" href="namespaceMezzanine_1_1Audio.xhtml">Audio</a></li><li class="navelem"><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml">iSound</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classMezzanine_1_1Audio_1_1iSound-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">Mezzanine::Audio::iSound Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p>This is an interface class for a non-spacialized sound.  
 <a href="classMezzanine_1_1Audio_1_1iSound.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="sound_8h_source.xhtml">sound.h</a>&gt;</code></p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Inheritance diagram for Mezzanine::Audio::iSound:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classMezzanine_1_1Audio_1_1iSound__inherit__graph.svg" width="227" height="118"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a2d14232f28f0bd5598499ba8cf1ecd73"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a2d14232f28f0bd5598499ba8cf1ecd73"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml#a2d14232f28f0bd5598499ba8cf1ecd73">iSound</a> ()</td></tr>
<tr class="memdesc:a2d14232f28f0bd5598499ba8cf1ecd73"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class constructor. <br/></td></tr>
<tr class="separator:a2d14232f28f0bd5598499ba8cf1ecd73"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a51b4f0ebb6ddc645123945c7cb2505de"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a51b4f0ebb6ddc645123945c7cb2505de"></a>
virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml#a51b4f0ebb6ddc645123945c7cb2505de">~iSound</a> ()</td></tr>
<tr class="memdesc:a51b4f0ebb6ddc645123945c7cb2505de"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class destructor. <br/></td></tr>
<tr class="separator:a51b4f0ebb6ddc645123945c7cb2505de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae2db4798835a27dfe29c35619cc34d80"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml#ae2db4798835a27dfe29c35619cc34d80">AttachEffect</a> (const <a class="el" href="namespaceMezzanine.xhtml#abea3b8e8e9b03d2547b2800284ba682d">UInt32</a> Slot, <a class="el" href="classMezzanine_1_1Audio_1_1iEffect.xhtml">iEffect</a> *Eff)=0</td></tr>
<tr class="memdesc:ae2db4798835a27dfe29c35619cc34d80"><td class="mdescLeft">&#160;</td><td class="mdescRight">Attaches an <a class="el" href="classMezzanine_1_1Audio_1_1iEffect.xhtml">iEffect</a> to this sound.  <a href="#ae2db4798835a27dfe29c35619cc34d80">More...</a><br/></td></tr>
<tr class="separator:ae2db4798835a27dfe29c35619cc34d80"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa027efe10d076e06685414b350894caa"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml#aa027efe10d076e06685414b350894caa">AttachFilter</a> (<a class="el" href="classMezzanine_1_1Audio_1_1iFilter.xhtml">iFilter</a> *Fil)=0</td></tr>
<tr class="memdesc:aa027efe10d076e06685414b350894caa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Attaches a filter to this sound that will operate on the direct feed, separate from any effects.  <a href="#aa027efe10d076e06685414b350894caa">More...</a><br/></td></tr>
<tr class="separator:aa027efe10d076e06685414b350894caa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a349e2d1b13f0a164b270004fa800733c"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml#a349e2d1b13f0a164b270004fa800733c">GetBaseVolume</a> () const =0</td></tr>
<tr class="memdesc:a349e2d1b13f0a164b270004fa800733c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the current volume of the sound source.  <a href="#a349e2d1b13f0a164b270004fa800733c">More...</a><br/></td></tr>
<tr class="separator:a349e2d1b13f0a164b270004fa800733c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c55a374a4a7e31ea86be88e60b5da98"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#abea3b8e8e9b03d2547b2800284ba682d">UInt32</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml#a8c55a374a4a7e31ea86be88e60b5da98">GetCompressedSize</a> () const </td></tr>
<tr class="memdesc:a8c55a374a4a7e31ea86be88e60b5da98"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the size of the encoded audio source in use.  <a href="#a8c55a374a4a7e31ea86be88e60b5da98">More...</a><br/></td></tr>
<tr class="separator:a8c55a374a4a7e31ea86be88e60b5da98"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82c65efb35761205810b4d06a5d3d61b"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#abea3b8e8e9b03d2547b2800284ba682d">UInt32</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml#a82c65efb35761205810b4d06a5d3d61b">GetCurrentCompressedPosition</a> () const </td></tr>
<tr class="memdesc:a82c65efb35761205810b4d06a5d3d61b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the sounds current position in the encoded audio source.  <a href="#a82c65efb35761205810b4d06a5d3d61b">More...</a><br/></td></tr>
<tr class="separator:a82c65efb35761205810b4d06a5d3d61b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aefde8eb1d8ecbed44b59e219eebbb683"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#abea3b8e8e9b03d2547b2800284ba682d">UInt32</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml#aefde8eb1d8ecbed44b59e219eebbb683">GetCurrentPosition</a> () const </td></tr>
<tr class="memdesc:aefde8eb1d8ecbed44b59e219eebbb683"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the sounds current position in the decoded audio source.  <a href="#aefde8eb1d8ecbed44b59e219eebbb683">More...</a><br/></td></tr>
<tr class="separator:aefde8eb1d8ecbed44b59e219eebbb683"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3fbcf21c114abd6801a5815007dc01ea"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml#a3fbcf21c114abd6801a5815007dc01ea">GetCurrentTime</a> () const </td></tr>
<tr class="memdesc:a3fbcf21c114abd6801a5815007dc01ea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the current time position in the stream.  <a href="#a3fbcf21c114abd6801a5815007dc01ea">More...</a><br/></td></tr>
<tr class="separator:a3fbcf21c114abd6801a5815007dc01ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:accef466283d6ef7874defd4a61d9e4ee"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1Audio_1_1iDecoder.xhtml">iDecoder</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml#accef466283d6ef7874defd4a61d9e4ee">GetDecoder</a> () const =0</td></tr>
<tr class="memdesc:accef466283d6ef7874defd4a61d9e4ee"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the decoder that belongs to this sound.  <a href="#accef466283d6ef7874defd4a61d9e4ee">More...</a><br/></td></tr>
<tr class="separator:accef466283d6ef7874defd4a61d9e4ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc543cc73ecfe14d848d34a6ea57a342"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1Audio_1_1iEffect.xhtml">iEffect</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml#adc543cc73ecfe14d848d34a6ea57a342">GetEffect</a> (const <a class="el" href="namespaceMezzanine.xhtml#abea3b8e8e9b03d2547b2800284ba682d">UInt32</a> Slot) const =0</td></tr>
<tr class="memdesc:adc543cc73ecfe14d848d34a6ea57a342"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the <a class="el" href="classMezzanine_1_1Audio_1_1iEffect.xhtml">iEffect</a> attached at the specified slot.  <a href="#adc543cc73ecfe14d848d34a6ea57a342">More...</a><br/></td></tr>
<tr class="separator:adc543cc73ecfe14d848d34a6ea57a342"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a78762c0221b722f7ac5415e97617dd67"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1Audio_1_1iFilter.xhtml">iFilter</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml#a78762c0221b722f7ac5415e97617dd67">GetFilter</a> () const =0</td></tr>
<tr class="memdesc:a78762c0221b722f7ac5415e97617dd67"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the filter currently being used by this object.  <a href="#a78762c0221b722f7ac5415e97617dd67">More...</a><br/></td></tr>
<tr class="separator:a78762c0221b722f7ac5415e97617dd67"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aadc3f331f3b9f026e9a1371099c91a38"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#abea3b8e8e9b03d2547b2800284ba682d">UInt32</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml#aadc3f331f3b9f026e9a1371099c91a38">GetMaxEffectSlots</a> () const =0</td></tr>
<tr class="memdesc:aadc3f331f3b9f026e9a1371099c91a38"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the max number of <a class="el" href="classMezzanine_1_1Audio_1_1iEffect.xhtml">iEffect</a> instances that can be attached to this sound.  <a href="#aadc3f331f3b9f026e9a1371099c91a38">More...</a><br/></td></tr>
<tr class="separator:aadc3f331f3b9f026e9a1371099c91a38"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac77cc1449ee0f74265711bde62f0d487"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml#ac77cc1449ee0f74265711bde62f0d487">GetMaxVolume</a> () const =0</td></tr>
<tr class="memdesc:ac77cc1449ee0f74265711bde62f0d487"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the Maximum volume of the sound source.  <a href="#ac77cc1449ee0f74265711bde62f0d487">More...</a><br/></td></tr>
<tr class="separator:ac77cc1449ee0f74265711bde62f0d487"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d8de4adad859946e68a262093e78a02"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml#a4d8de4adad859946e68a262093e78a02">GetMinVolume</a> () const =0</td></tr>
<tr class="memdesc:a4d8de4adad859946e68a262093e78a02"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the minimum volume of the sound source.  <a href="#a4d8de4adad859946e68a262093e78a02">More...</a><br/></td></tr>
<tr class="separator:a4d8de4adad859946e68a262093e78a02"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08c2760703788f2bb86bf8173c45d5f9"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#abea3b8e8e9b03d2547b2800284ba682d">UInt32</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml#a08c2760703788f2bb86bf8173c45d5f9">GetNumEffectSlotsAvailable</a> () const =0</td></tr>
<tr class="memdesc:a08c2760703788f2bb86bf8173c45d5f9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the number of <a class="el" href="classMezzanine_1_1Audio_1_1iEffect.xhtml">iEffect</a> slots remaining that can be attached to.  <a href="#a08c2760703788f2bb86bf8173c45d5f9">More...</a><br/></td></tr>
<tr class="separator:a08c2760703788f2bb86bf8173c45d5f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f3170e4d4d10f6baa3b4e8324c23ed3"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml#a2f3170e4d4d10f6baa3b4e8324c23ed3">GetPitch</a> () const =0</td></tr>
<tr class="memdesc:a2f3170e4d4d10f6baa3b4e8324c23ed3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the pitch of the sound source.  <a href="#a2f3170e4d4d10f6baa3b4e8324c23ed3">More...</a><br/></td></tr>
<tr class="separator:a2f3170e4d4d10f6baa3b4e8324c23ed3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaad5cea540ee38fc7b9eef26f113e914"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#abea3b8e8e9b03d2547b2800284ba682d">UInt32</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml#aaad5cea540ee38fc7b9eef26f113e914">GetTotalSize</a> () const </td></tr>
<tr class="memdesc:aaad5cea540ee38fc7b9eef26f113e914"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the size of the decoded audio source in use.  <a href="#aaad5cea540ee38fc7b9eef26f113e914">More...</a><br/></td></tr>
<tr class="separator:aaad5cea540ee38fc7b9eef26f113e914"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef13feb72d84fd53880b323e989c0bbe"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml#aef13feb72d84fd53880b323e989c0bbe">GetTotalTime</a> () const </td></tr>
<tr class="memdesc:aef13feb72d84fd53880b323e989c0bbe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the length of the stream in seconds.  <a href="#aef13feb72d84fd53880b323e989c0bbe">More...</a><br/></td></tr>
<tr class="separator:aef13feb72d84fd53880b323e989c0bbe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3a53ad34b21b2215dd057d3f29781b37"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#a1b6c09063432c7ddd87011c88306c767">UInt16</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml#a3a53ad34b21b2215dd057d3f29781b37">GetType</a> () const =0</td></tr>
<tr class="memdesc:a3a53ad34b21b2215dd057d3f29781b37"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the sound type of this sound.  <a href="#a3a53ad34b21b2215dd057d3f29781b37">More...</a><br/></td></tr>
<tr class="separator:a3a53ad34b21b2215dd057d3f29781b37"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8fdb397ce0ac63711b6806852c1e8b25"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml#a8fdb397ce0ac63711b6806852c1e8b25">GetVolume</a> () const =0</td></tr>
<tr class="memdesc:a8fdb397ce0ac63711b6806852c1e8b25"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the current volume of the sound source after all volume settings are applied.  <a href="#a8fdb397ce0ac63711b6806852c1e8b25">More...</a><br/></td></tr>
<tr class="separator:a8fdb397ce0ac63711b6806852c1e8b25"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33407bbae592320150d586f21b9b2ddd"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml#a33407bbae592320150d586f21b9b2ddd">IsLooping</a> () const =0</td></tr>
<tr class="memdesc:a33407bbae592320150d586f21b9b2ddd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks to see if the sound is currently set to loop.  <a href="#a33407bbae592320150d586f21b9b2ddd">More...</a><br/></td></tr>
<tr class="separator:a33407bbae592320150d586f21b9b2ddd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0bf2c19c77a0122e7b44a2d2fddce14"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml#ac0bf2c19c77a0122e7b44a2d2fddce14">IsPaused</a> () const =0</td></tr>
<tr class="memdesc:ac0bf2c19c77a0122e7b44a2d2fddce14"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets whether or not the sound is currently paused.  <a href="#ac0bf2c19c77a0122e7b44a2d2fddce14">More...</a><br/></td></tr>
<tr class="separator:ac0bf2c19c77a0122e7b44a2d2fddce14"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a93de95a5f561a713a6c7870b4e8190c0"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml#a93de95a5f561a713a6c7870b4e8190c0">IsPlaying</a> () const =0</td></tr>
<tr class="memdesc:a93de95a5f561a713a6c7870b4e8190c0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets whether or not the sound is currently playing.  <a href="#a93de95a5f561a713a6c7870b4e8190c0">More...</a><br/></td></tr>
<tr class="separator:a93de95a5f561a713a6c7870b4e8190c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b539143e67d873cbc4607770c00a236"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml#a7b539143e67d873cbc4607770c00a236">IsStopped</a> () const =0</td></tr>
<tr class="memdesc:a7b539143e67d873cbc4607770c00a236"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets whether or not the sound is currently stopped.  <a href="#a7b539143e67d873cbc4607770c00a236">More...</a><br/></td></tr>
<tr class="separator:a7b539143e67d873cbc4607770c00a236"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8db47b66b5ce6d7642ed15f81863a2a"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml#ab8db47b66b5ce6d7642ed15f81863a2a">IsValid</a> () const =0</td></tr>
<tr class="memdesc:ab8db47b66b5ce6d7642ed15f81863a2a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks to see if this sound is valid and is ready for playback.  <a href="#ab8db47b66b5ce6d7642ed15f81863a2a">More...</a><br/></td></tr>
<tr class="separator:ab8db47b66b5ce6d7642ed15f81863a2a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4176e0c327796d44bf41cdf8f6e48433"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml#a4176e0c327796d44bf41cdf8f6e48433">Loop</a> (bool ToLoop)=0</td></tr>
<tr class="memdesc:a4176e0c327796d44bf41cdf8f6e48433"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets whether the playback of the sound should loop or not.  <a href="#a4176e0c327796d44bf41cdf8f6e48433">More...</a><br/></td></tr>
<tr class="separator:a4176e0c327796d44bf41cdf8f6e48433"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a989953ebb914f4a40783058ce8eb67ee"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a989953ebb914f4a40783058ce8eb67ee"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml#a989953ebb914f4a40783058ce8eb67ee">Pause</a> ()=0</td></tr>
<tr class="memdesc:a989953ebb914f4a40783058ce8eb67ee"><td class="mdescLeft">&#160;</td><td class="mdescRight">Pauses playback of the sound at it's current position in the stream. <br/></td></tr>
<tr class="separator:a989953ebb914f4a40783058ce8eb67ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a85af24ecb2abde51c7a17736474fbb66"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml#a85af24ecb2abde51c7a17736474fbb66">Play</a> ()=0</td></tr>
<tr class="memdesc:a85af24ecb2abde51c7a17736474fbb66"><td class="mdescLeft">&#160;</td><td class="mdescRight">Plays the sound with it's current configuration.  <a href="#a85af24ecb2abde51c7a17736474fbb66">More...</a><br/></td></tr>
<tr class="separator:a85af24ecb2abde51c7a17736474fbb66"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8cbb08434d0fb0d8728f412e6e211ff5"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml#a8cbb08434d0fb0d8728f412e6e211ff5">RemoveEffect</a> (const <a class="el" href="namespaceMezzanine.xhtml#abea3b8e8e9b03d2547b2800284ba682d">UInt32</a> Slot)=0</td></tr>
<tr class="memdesc:a8cbb08434d0fb0d8728f412e6e211ff5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes the <a class="el" href="classMezzanine_1_1Audio_1_1iEffect.xhtml">iEffect</a> in the specified slot.  <a href="#a8cbb08434d0fb0d8728f412e6e211ff5">More...</a><br/></td></tr>
<tr class="separator:a8cbb08434d0fb0d8728f412e6e211ff5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4290a91b64ffa7beeb7d7b94f7f1736c"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a4290a91b64ffa7beeb7d7b94f7f1736c"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml#a4290a91b64ffa7beeb7d7b94f7f1736c">RemoveFilter</a> ()=0</td></tr>
<tr class="memdesc:a4290a91b64ffa7beeb7d7b94f7f1736c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes any currently attached filters. <br/></td></tr>
<tr class="separator:a4290a91b64ffa7beeb7d7b94f7f1736c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99a5c1fa7f8fc173b59e4d6e5c4150b2"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml#a99a5c1fa7f8fc173b59e4d6e5c4150b2">Seek</a> (const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Seconds, bool Relative=false)=0</td></tr>
<tr class="memdesc:a99a5c1fa7f8fc173b59e4d6e5c4150b2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the current position of the stream from which to playback audio.  <a href="#a99a5c1fa7f8fc173b59e4d6e5c4150b2">More...</a><br/></td></tr>
<tr class="separator:a99a5c1fa7f8fc173b59e4d6e5c4150b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6616a4eb925208d55e650ed8560382c8"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml#a6616a4eb925208d55e650ed8560382c8">SetBaseVolume</a> (const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Base)=0</td></tr>
<tr class="memdesc:a6616a4eb925208d55e650ed8560382c8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the current volume of the sound source before effects and other volume settings.  <a href="#a6616a4eb925208d55e650ed8560382c8">More...</a><br/></td></tr>
<tr class="separator:a6616a4eb925208d55e650ed8560382c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab962b9cedc56e3d7157f3aaf458fb4b"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml#aab962b9cedc56e3d7157f3aaf458fb4b">SetMaxVolume</a> (const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> MaxVol)=0</td></tr>
<tr class="memdesc:aab962b9cedc56e3d7157f3aaf458fb4b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the maximum volume the sound source can achieve.  <a href="#aab962b9cedc56e3d7157f3aaf458fb4b">More...</a><br/></td></tr>
<tr class="separator:aab962b9cedc56e3d7157f3aaf458fb4b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c1cdee92dec2f5df3d2f19c589e3d53"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml#a9c1cdee92dec2f5df3d2f19c589e3d53">SetMinVolume</a> (const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> MinVol)=0</td></tr>
<tr class="memdesc:a9c1cdee92dec2f5df3d2f19c589e3d53"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the minimum volume the sound source can achieve.  <a href="#a9c1cdee92dec2f5df3d2f19c589e3d53">More...</a><br/></td></tr>
<tr class="separator:a9c1cdee92dec2f5df3d2f19c589e3d53"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e6bd47a7460bf458791c553c0e08530"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml#a7e6bd47a7460bf458791c553c0e08530">SetPitch</a> (const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Pitch)=0</td></tr>
<tr class="memdesc:a7e6bd47a7460bf458791c553c0e08530"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the pitch of the sound source.  <a href="#a7e6bd47a7460bf458791c553c0e08530">More...</a><br/></td></tr>
<tr class="separator:a7e6bd47a7460bf458791c553c0e08530"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3769de48d6c5b71e034257a6e51eaea"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml#ad3769de48d6c5b71e034257a6e51eaea">SetStream</a> (<a class="el" href="namespaceMezzanine_1_1Resource.xhtml#a62a315666b8e56a64640c813ac400b52">Resource::DataStreamPtr</a> Stream, const <a class="el" href="namespaceMezzanine_1_1Audio.xhtml#abbdf7b0c5dd3a09710208089436bdbee">Audio::Encoding</a> Encode)=0</td></tr>
<tr class="memdesc:ad3769de48d6c5b71e034257a6e51eaea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets a new stream for playback by this <a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml">iSound</a>.  <a href="#ad3769de48d6c5b71e034257a6e51eaea">More...</a><br/></td></tr>
<tr class="separator:ad3769de48d6c5b71e034257a6e51eaea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48e102c3d7b9d9527c13d0e65c491e09"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml#a48e102c3d7b9d9527c13d0e65c491e09">SetStream</a> (const <a class="el" href="namespaceMezzanine.xhtml#a1b6c09063432c7ddd87011c88306c767">UInt16</a> Type, <a class="el" href="namespaceMezzanine_1_1Resource.xhtml#a62a315666b8e56a64640c813ac400b52">Resource::DataStreamPtr</a> Stream, const <a class="el" href="namespaceMezzanine_1_1Audio.xhtml#abbdf7b0c5dd3a09710208089436bdbee">Audio::Encoding</a> Encode)=0</td></tr>
<tr class="memdesc:a48e102c3d7b9d9527c13d0e65c491e09"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets a new stream for playback by this <a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml">iSound</a>.  <a href="#a48e102c3d7b9d9527c13d0e65c491e09">More...</a><br/></td></tr>
<tr class="separator:a48e102c3d7b9d9527c13d0e65c491e09"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec6bf25534d93d870ec5594656122815"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml#aec6bf25534d93d870ec5594656122815">SetStream</a> (<a class="el" href="classMezzanine_1_1Audio_1_1iDecoder.xhtml">iDecoder</a> *Decode)=0</td></tr>
<tr class="memdesc:aec6bf25534d93d870ec5594656122815"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets a new stream for playback by this <a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml">iSound</a> via a new decoder.  <a href="#aec6bf25534d93d870ec5594656122815">More...</a><br/></td></tr>
<tr class="separator:aec6bf25534d93d870ec5594656122815"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b9b51543b547fc60aa3839dc05c7302"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml#a7b9b51543b547fc60aa3839dc05c7302">SetStream</a> (const <a class="el" href="namespaceMezzanine.xhtml#a1b6c09063432c7ddd87011c88306c767">UInt16</a> Type, <a class="el" href="classMezzanine_1_1Audio_1_1iDecoder.xhtml">iDecoder</a> *Decode)=0</td></tr>
<tr class="memdesc:a7b9b51543b547fc60aa3839dc05c7302"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets a new stream for playback by this <a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml">iSound</a> via a new decoder.  <a href="#a7b9b51543b547fc60aa3839dc05c7302">More...</a><br/></td></tr>
<tr class="separator:a7b9b51543b547fc60aa3839dc05c7302"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae81ab48628c1b2f8d90146311495ecd1"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ae81ab48628c1b2f8d90146311495ecd1"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml#ae81ab48628c1b2f8d90146311495ecd1">Stop</a> ()=0</td></tr>
<tr class="memdesc:ae81ab48628c1b2f8d90146311495ecd1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stops playback of the sound and resets it's position back to the start. <br/></td></tr>
<tr class="separator:ae81ab48628c1b2f8d90146311495ecd1"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>This is an interface class for a non-spacialized sound. </p>
<p>The <a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml" title="This is an interface class for a non-spacialized sound.">iSound</a> class is intended for non-3D purposes only. </p>

<p>Definition at line <a class="el" href="sound_8h_source.xhtml#l00060">60</a> of file <a class="el" href="sound_8h_source.xhtml">sound.h</a>.</p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="ae2db4798835a27dfe29c35619cc34d80"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool Mezzanine::Audio::iSound::AttachEffect </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#abea3b8e8e9b03d2547b2800284ba682d">UInt32</a>&#160;</td>
          <td class="paramname"><em>Slot</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classMezzanine_1_1Audio_1_1iEffect.xhtml">iEffect</a> *&#160;</td>
          <td class="paramname"><em>Eff</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Attaches an <a class="el" href="classMezzanine_1_1Audio_1_1iEffect.xhtml">iEffect</a> to this sound. </p>
<dl class="section remark"><dt>Remarks</dt><dd>Valid Slot Range: 0 to <a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml#a08c2760703788f2bb86bf8173c45d5f9">iSound::GetNumEffectSlotsAvailable()</a> </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Slot</td><td>The slot into which the <a class="el" href="classMezzanine_1_1Audio_1_1iEffect.xhtml">iEffect</a> will be attached. </td></tr>
    <tr><td class="paramname">Eff</td><td>The <a class="el" href="classMezzanine_1_1Audio_1_1iEffect.xhtml">iEffect</a> to be attached. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns true if the <a class="el" href="classMezzanine_1_1Audio_1_1iEffect.xhtml">iEffect</a> was successfully attached, false otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="aa027efe10d076e06685414b350894caa"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool Mezzanine::Audio::iSound::AttachFilter </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classMezzanine_1_1Audio_1_1iFilter.xhtml">iFilter</a> *&#160;</td>
          <td class="paramname"><em>Fil</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Attaches a filter to this sound that will operate on the direct feed, separate from any effects. </p>
<dl class="section note"><dt>Note</dt><dd>This will remove any previously attached filter. Only one filter can be attached at a given time. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Fil</td><td>The filter to be attached. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns true if the filter was successfully attached, false otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="a349e2d1b13f0a164b270004fa800733c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Mezzanine::Audio::iSound::GetBaseVolume </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the current volume of the sound source. </p>
<p>This function will get the current volume of the sound source before effects and other volume settings are applied. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns the source volume before attenuation and other effects. </dd></dl>

</div>
</div>
<a class="anchor" id="a8c55a374a4a7e31ea86be88e60b5da98"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#abea3b8e8e9b03d2547b2800284ba682d">UInt32</a> Mezzanine::Audio::iSound::GetCompressedSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the size of the encoded audio source in use. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns the size of the encoded audio source. </dd></dl>

<p>Definition at line <a class="el" href="sound_8h_source.xhtml#l00158">158</a> of file <a class="el" href="sound_8h_source.xhtml">sound.h</a>.</p>

</div>
</div>
<a class="anchor" id="a82c65efb35761205810b4d06a5d3d61b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#abea3b8e8e9b03d2547b2800284ba682d">UInt32</a> Mezzanine::Audio::iSound::GetCurrentCompressedPosition </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the sounds current position in the encoded audio source. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns the current position in the encoded audio source in bytes. </dd></dl>

<p>Definition at line <a class="el" href="sound_8h_source.xhtml#l00166">166</a> of file <a class="el" href="sound_8h_source.xhtml">sound.h</a>.</p>

</div>
</div>
<a class="anchor" id="aefde8eb1d8ecbed44b59e219eebbb683"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#abea3b8e8e9b03d2547b2800284ba682d">UInt32</a> Mezzanine::Audio::iSound::GetCurrentPosition </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the sounds current position in the decoded audio source. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns the current position in the decoded audio source in bytes. </dd></dl>

<p>Definition at line <a class="el" href="sound_8h_source.xhtml#l00162">162</a> of file <a class="el" href="sound_8h_source.xhtml">sound.h</a>.</p>

</div>
</div>
<a class="anchor" id="a3fbcf21c114abd6801a5815007dc01ea"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Mezzanine::Audio::iSound::GetCurrentTime </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the current time position in the stream. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns the current position in the stream in seconds. </dd></dl>

<p>Definition at line <a class="el" href="sound_8h_source.xhtml#l00150">150</a> of file <a class="el" href="sound_8h_source.xhtml">sound.h</a>.</p>

</div>
</div>
<a class="anchor" id="accef466283d6ef7874defd4a61d9e4ee"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1Audio_1_1iDecoder.xhtml">iDecoder</a>* Mezzanine::Audio::iSound::GetDecoder </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the decoder that belongs to this sound. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the decoder being used by this sound for playback. </dd></dl>

</div>
</div>
<a class="anchor" id="adc543cc73ecfe14d848d34a6ea57a342"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1Audio_1_1iEffect.xhtml">iEffect</a>* Mezzanine::Audio::iSound::GetEffect </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#abea3b8e8e9b03d2547b2800284ba682d">UInt32</a>&#160;</td>
          <td class="paramname"><em>Slot</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the <a class="el" href="classMezzanine_1_1Audio_1_1iEffect.xhtml">iEffect</a> attached at the specified slot. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Slot</td><td>The slot to retrieve the <a class="el" href="classMezzanine_1_1Audio_1_1iEffect.xhtml">iEffect</a> from. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the <a class="el" href="classMezzanine_1_1Audio_1_1iEffect.xhtml">iEffect</a> attached at the specified slot, or NULL if none are attached. </dd></dl>

</div>
</div>
<a class="anchor" id="a78762c0221b722f7ac5415e97617dd67"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1Audio_1_1iFilter.xhtml">iFilter</a>* Mezzanine::Audio::iSound::GetFilter </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the filter currently being used by this object. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the currently attached filter, or NULL if there isn't one. </dd></dl>

</div>
</div>
<a class="anchor" id="aadc3f331f3b9f026e9a1371099c91a38"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#abea3b8e8e9b03d2547b2800284ba682d">UInt32</a> Mezzanine::Audio::iSound::GetMaxEffectSlots </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the max number of <a class="el" href="classMezzanine_1_1Audio_1_1iEffect.xhtml">iEffect</a> instances that can be attached to this sound. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns the maximum number of <a class="el" href="classMezzanine_1_1Audio_1_1iEffect.xhtml">iEffect</a> instances this sound can support. </dd></dl>

</div>
</div>
<a class="anchor" id="ac77cc1449ee0f74265711bde62f0d487"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Mezzanine::Audio::iSound::GetMaxVolume </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the Maximum volume of the sound source. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns the maximum volume that the source can achieve. </dd></dl>

</div>
</div>
<a class="anchor" id="a4d8de4adad859946e68a262093e78a02"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Mezzanine::Audio::iSound::GetMinVolume </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the minimum volume of the sound source. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns the minimum volume that the source can be attenuated to. </dd></dl>

</div>
</div>
<a class="anchor" id="a08c2760703788f2bb86bf8173c45d5f9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#abea3b8e8e9b03d2547b2800284ba682d">UInt32</a> Mezzanine::Audio::iSound::GetNumEffectSlotsAvailable </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the number of <a class="el" href="classMezzanine_1_1Audio_1_1iEffect.xhtml">iEffect</a> slots remaining that can be attached to. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns the remaining number of <a class="el" href="classMezzanine_1_1Audio_1_1iEffect.xhtml">iEffect</a> instances this sound can support before it reaches it's max. </dd></dl>

</div>
</div>
<a class="anchor" id="a2f3170e4d4d10f6baa3b4e8324c23ed3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Mezzanine::Audio::iSound::GetPitch </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the pitch of the sound source. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns the pitch of the source. </dd></dl>

</div>
</div>
<a class="anchor" id="aaad5cea540ee38fc7b9eef26f113e914"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#abea3b8e8e9b03d2547b2800284ba682d">UInt32</a> Mezzanine::Audio::iSound::GetTotalSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the size of the decoded audio source in use. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns the size of the decoded audio source. </dd></dl>

<p>Definition at line <a class="el" href="sound_8h_source.xhtml#l00154">154</a> of file <a class="el" href="sound_8h_source.xhtml">sound.h</a>.</p>

</div>
</div>
<a class="anchor" id="aef13feb72d84fd53880b323e989c0bbe"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Mezzanine::Audio::iSound::GetTotalTime </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the length of the stream in seconds. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns the total amount of time needed to playback the sound in seconds. </dd></dl>

<p>Definition at line <a class="el" href="sound_8h_source.xhtml#l00146">146</a> of file <a class="el" href="sound_8h_source.xhtml">sound.h</a>.</p>

</div>
</div>
<a class="anchor" id="a3a53ad34b21b2215dd057d3f29781b37"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#a1b6c09063432c7ddd87011c88306c767">UInt16</a> Mezzanine::Audio::iSound::GetType </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the sound type of this sound. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a SoundType enum value that is the type of this sound. </dd></dl>

</div>
</div>
<a class="anchor" id="a8fdb397ce0ac63711b6806852c1e8b25"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Mezzanine::Audio::iSound::GetVolume </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the current volume of the sound source after all volume settings are applied. </p>
<dl class="section note"><dt>Note</dt><dd>The internal constructs for sound will be updated of any changes to the volume of this object when the _Update() method is called. </dd></dl>
<dl class="section return"><dt>Returns</dt><dd>Returns a Real representing the volume of this sound after all volume settings are applied. </dd></dl>

</div>
</div>
<a class="anchor" id="a33407bbae592320150d586f21b9b2ddd"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool Mezzanine::Audio::iSound::IsLooping </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Checks to see if the sound is currently set to loop. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns true if this sound will restart from the beginning when it finishes playing back. </dd></dl>

</div>
</div>
<a class="anchor" id="ac0bf2c19c77a0122e7b44a2d2fddce14"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool Mezzanine::Audio::iSound::IsPaused </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets whether or not the sound is currently paused. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns true if the sound is paused, false otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="a93de95a5f561a713a6c7870b4e8190c0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool Mezzanine::Audio::iSound::IsPlaying </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets whether or not the sound is currently playing. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns true if the sound is playing, false otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="a7b539143e67d873cbc4607770c00a236"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool Mezzanine::Audio::iSound::IsStopped </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets whether or not the sound is currently stopped. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns true if the sound is stopped, false otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="ab8db47b66b5ce6d7642ed15f81863a2a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool Mezzanine::Audio::iSound::IsValid </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Checks to see if this sound is valid and is ready for playback. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns true if this sound is ready for playback, false if it is misconfigured. </dd></dl>

</div>
</div>
<a class="anchor" id="a4176e0c327796d44bf41cdf8f6e48433"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Audio::iSound::Loop </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>ToLoop</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets whether the playback of the sound should loop or not. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ToLoop</td><td>Whether to restart the sound when the end of playback is reached. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a85af24ecb2abde51c7a17736474fbb66"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool Mezzanine::Audio::iSound::Play </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Plays the sound with it's current configuration. </p>
<dl class="section note"><dt>Note</dt><dd>This will restart playback in the event it is already playing. </dd></dl>
<dl class="section return"><dt>Returns</dt><dd>Returns true if the sound succussfully started playing, false if there was an error. </dd></dl>

</div>
</div>
<a class="anchor" id="a8cbb08434d0fb0d8728f412e6e211ff5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Audio::iSound::RemoveEffect </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#abea3b8e8e9b03d2547b2800284ba682d">UInt32</a>&#160;</td>
          <td class="paramname"><em>Slot</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Removes the <a class="el" href="classMezzanine_1_1Audio_1_1iEffect.xhtml">iEffect</a> in the specified slot. </p>
<dl class="section remark"><dt>Remarks</dt><dd>Valid Slot Range: 0 to <a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml#a08c2760703788f2bb86bf8173c45d5f9">iSound::GetNumEffectSlotsAvailable()</a> </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Slot</td><td>The slot to remove the occupying <a class="el" href="classMezzanine_1_1Audio_1_1iEffect.xhtml">iEffect</a>. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a99a5c1fa7f8fc173b59e4d6e5c4150b2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool Mezzanine::Audio::iSound::Seek </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>Seconds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>Relative</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the current position of the stream from which to playback audio. </p>
<dl class="section note"><dt>Note</dt><dd>May not be supported by all codecs. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Seconds</td><td>Number of seconds to seek. </td></tr>
    <tr><td class="paramname">Relative</td><td>Whether to seek from the current position or the start of the stream. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns true on success, False if the codec does not support seeking. </dd></dl>

</div>
</div>
<a class="anchor" id="a6616a4eb925208d55e650ed8560382c8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Audio::iSound::SetBaseVolume </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>Base</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the current volume of the sound source before effects and other volume settings. </p>
<p>This function will set the current volume of the sound source before effects (like attenuation) are applied. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Base</td><td>The volume of the sound source to be applied. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aab962b9cedc56e3d7157f3aaf458fb4b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Audio::iSound::SetMaxVolume </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>MaxVol</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the maximum volume the sound source can achieve. </p>
<p>This function will set the maximum volume the sound source can achieve after effects(like attenuation) have been applied. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">MaxVol</td><td>The maximum volume allowed for the sound source. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a9c1cdee92dec2f5df3d2f19c589e3d53"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Audio::iSound::SetMinVolume </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>MinVol</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the minimum volume the sound source can achieve. </p>
<p>This function will set the minimum volume the sound source can achieve after effects(like attenuation) have been applied. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">MinVol</td><td>The minimum volume allowed for the sound source. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a7e6bd47a7460bf458791c553c0e08530"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Audio::iSound::SetPitch </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>Pitch</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the pitch of the sound source. </p>
<dl class="section note"><dt>Note</dt><dd>Higher values will speed up the playback of the sound. Default: 1.0 </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Pitch</td><td>The new pitch of the sound. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad3769de48d6c5b71e034257a6e51eaea"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Audio::iSound::SetStream </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine_1_1Resource.xhtml#a62a315666b8e56a64640c813ac400b52">Resource::DataStreamPtr</a>&#160;</td>
          <td class="paramname"><em>Stream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine_1_1Audio.xhtml#abbdf7b0c5dd3a09710208089436bdbee">Audio::Encoding</a>&#160;</td>
          <td class="paramname"><em>Encode</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets a new stream for playback by this <a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml">iSound</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Stream</td><td>The stream to be decoded and played by this sound. </td></tr>
    <tr><td class="paramname">Encode</td><td>The encoding to expect when decoding the stream provided. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a48e102c3d7b9d9527c13d0e65c491e09"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Audio::iSound::SetStream </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a1b6c09063432c7ddd87011c88306c767">UInt16</a>&#160;</td>
          <td class="paramname"><em>Type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine_1_1Resource.xhtml#a62a315666b8e56a64640c813ac400b52">Resource::DataStreamPtr</a>&#160;</td>
          <td class="paramname"><em>Stream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine_1_1Audio.xhtml#abbdf7b0c5dd3a09710208089436bdbee">Audio::Encoding</a>&#160;</td>
          <td class="paramname"><em>Encode</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets a new stream for playback by this <a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml">iSound</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Type</td><td>The new type to set this <a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml">iSound</a> instance as. </td></tr>
    <tr><td class="paramname">Stream</td><td>The stream to be decoded and played by this sound. </td></tr>
    <tr><td class="paramname">Encode</td><td>The encoding to expect when decoding the stream provided. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aec6bf25534d93d870ec5594656122815"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Audio::iSound::SetStream </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classMezzanine_1_1Audio_1_1iDecoder.xhtml">iDecoder</a> *&#160;</td>
          <td class="paramname"><em>Decode</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets a new stream for playback by this <a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml">iSound</a> via a new decoder. </p>
<dl class="section warning"><dt>Warning</dt><dd><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml">iSound</a> instances take ownership of decoders. Decoders should not be shared between <a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml">iSound</a> instances. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Decode</td><td>A pointer to the decoder containing the stream that will be used by this <a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml">iSound</a>. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a7b9b51543b547fc60aa3839dc05c7302"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Audio::iSound::SetStream </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a1b6c09063432c7ddd87011c88306c767">UInt16</a>&#160;</td>
          <td class="paramname"><em>Type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classMezzanine_1_1Audio_1_1iDecoder.xhtml">iDecoder</a> *&#160;</td>
          <td class="paramname"><em>Decode</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets a new stream for playback by this <a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml">iSound</a> via a new decoder. </p>
<dl class="section warning"><dt>Warning</dt><dd><a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml">iSound</a> instances take ownership of decoders. Decoders should not be shared between <a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml">iSound</a> instances. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Type</td><td>The new type to set this <a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml">iSound</a> instance as. </td></tr>
    <tr><td class="paramname">Decode</td><td>A pointer to the decoder containing the stream that will be used by this <a class="el" href="classMezzanine_1_1Audio_1_1iSound.xhtml">iSound</a>. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/home/Code/Mezzanine/Mezzanine/src/Audio/<a class="el" href="sound_8h_source.xhtml">sound.h</a></li>
</ul>
</div><!-- contents -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Sep 16 2013 06:21:47 for MezzanineEngine by&#160;<a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1</small></address>
</body>
</html>
