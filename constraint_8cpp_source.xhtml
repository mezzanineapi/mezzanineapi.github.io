<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>/home/Code/Mezzanine/Mezzanine/src/Physics/constraint.cpp Source File</title>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="DoxyStyle.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script> 
</head>
<body onload='searchBox.OnSelectItem(0);'>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;" nowrap="nowrap">
   <div id="projectname"><a href="http://blacktoppstudios.com"><img src="logogreen100pxtall.png"/></a>MezzanineEngine&#160;<span id="projectnumber">September&nbsp;18,&nbsp;2013</span></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_df2e1c8414b6a086be441ff04537838a.xhtml">Mezzanine</a></li><li class="navelem"><a class="el" href="dir_2b71fc9949116feedacddb93a79d832d.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_61c0ec937c468b49b332752e9f643e74.xhtml">Physics</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">constraint.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//Â© Copyright 2010 - 2013 BlackTopp Studios Inc.</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">/* This file is part of The Mezzanine Engine.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">    The Mezzanine Engine is free software: you can redistribute it and/or modify</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">    it under the terms of the GNU General Public License as published by</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">    the Free Software Foundation, either version 3 of the License, or</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">    (at your option) any later version.</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">    The Mezzanine Engine is distributed in the hope that it will be useful,</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">    but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">    GNU General Public License for more details.</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">    You should have received a copy of the GNU General Public License</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">    along with The Mezzanine Engine.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">/* The original authors have included a copy of the license specified above in the</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">   &#39;Docs&#39; folder. See &#39;gpl.txt&#39;</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">/* We welcome the use of the Mezzanine engine to anyone, including companies who wish to</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">   Build professional software and charge for their product.</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">   However there are some practical restrictions, so if your project involves</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">   any of the following you should contact us and we will try to work something</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">   out:</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">    - DRM or Copy Protection of any kind(except Copyrights)</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">    - Software Patents You Do Not Wish to Freely License</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">    - Any Kind of Linking to Non-GPL licensed Works</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">    - Are Currently In Violation of Another Copyright Holder&#39;s GPL License</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">    - If You want to change our code and not add a few hundred MB of stuff to</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">        your distribution</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment">   These and other limitations could cause serious legal problems if you ignore</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">   them, so it is best to simply contact us or the Free Software Foundation, if</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">   you have any questions.</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">   Joseph Toppi - toppij@gmail.com</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">   John Blackwood - makoenergy02@gmail.com</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#ifndef _physicsconstraint_cpp</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define _physicsconstraint_cpp</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">#include &quot;constraint.h&quot;</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor">#include &quot;entresol.h&quot;</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#include &quot;actormanager.h&quot;</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="preprocessor">#include &quot;actorrigid.h&quot;</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="preprocessor">#include &quot;stringtool.h&quot;</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="serialization_8h.xhtml" title="The interface for serialization.">serialization.h</a>&quot;</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="preprocessor">#include &lt;btBulletDynamicsCommon.h&gt;</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">/// @cond DontDocumentInternal</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="keyword">namespace </span>Mezzanine</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;{</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">namespace </span>Physics</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    {<span class="comment"></span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">        /////////////////////////////////////////</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment"></span>        <span class="comment">// Functions</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a> <a class="code" href="namespaceMezzanine_1_1Physics.xhtml#aab6743742986e4125e21b9c68b9af967" title="Get a Constraint Parameter as a String.">ConstraintParamAsString</a>(<a class="code" href="namespaceMezzanine_1_1Physics.xhtml#aa640f4c4b2baf4a4039db76fd792d2c1" title="Used by constraints for setting some parameters.">ConstraintParam</a> Param)</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        {</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            <span class="keywordflow">switch</span> (Param)</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            {</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespaceMezzanine_1_1Physics.xhtml#aa640f4c4b2baf4a4039db76fd792d2c1ac8dc98db8c9881c5836a27d5b34fd787" title="ERP values adjust how fast the errors in the constraints are reduced.">Con_ERP</a>:           <span class="keywordflow">return</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>(<span class="stringliteral">&quot;Con_ERP&quot;</span>);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                <span class="keywordflow">case</span> Con_Stop_ERP:      <span class="keywordflow">return</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>(<span class="stringliteral">&quot;Con_Stop_ERP&quot;</span>);</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                <span class="keywordflow">case</span> <a class="code" href="namespaceMezzanine_1_1Physics.xhtml#aa640f4c4b2baf4a4039db76fd792d2c1ac7067723ec3340acdf2941f1a4f56569" title="CFM values adds some small value to the main diagonal on the constraint matrix to prevent degenerate ...">Con_CFM</a>:           <span class="keywordflow">return</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>(<span class="stringliteral">&quot;Con_CFM&quot;</span>);</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                <span class="keywordflow">case</span> Con_Stop_CFM:      <span class="keywordflow">return</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>(<span class="stringliteral">&quot;Con_Stop_CFM&quot;</span>);</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                <span class="keywordflow">default</span>: { MEZZ_EXCEPTION(<a class="code" href="classMezzanine_1_1Exception.xhtml#a4ee7e60ac53783c4975240c57071d420a7a0bd380eb3a0e6d02ff8f51ceeda54c" title="When used a instance of ParametersException is thrown. Thrown when parameters are checked at runtime ...">Exception::PARAMETERS_EXCEPTION</a>,<span class="stringliteral">&quot;Attempted to convert invalid Constraint Paramater to a String.&quot;</span>); }</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            }</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        }</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <a class="code" href="namespaceMezzanine_1_1Physics.xhtml#aa640f4c4b2baf4a4039db76fd792d2c1" title="Used by constraints for setting some parameters.">ConstraintParam</a> <a class="code" href="namespaceMezzanine_1_1Physics.xhtml#adb0330d242970d0fdf1c5e98be35701e" title="Convert A string that might be ConstraintParam to one.">StringAsConstraintParam</a>(<a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a> Param)</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        {</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            <span class="keywordflow">if</span>(5&gt;Param.size())</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                { MEZZ_EXCEPTION(<a class="code" href="classMezzanine_1_1Exception.xhtml#a4ee7e60ac53783c4975240c57071d420a7a0bd380eb3a0e6d02ff8f51ceeda54c" title="When used a instance of ParametersException is thrown. Thrown when parameters are checked at runtime ...">Exception::PARAMETERS_EXCEPTION</a>,<span class="stringliteral">&quot;Attempted to convert invalid String to Constraint Paramater: Too Short.&quot;</span>); }</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            <span class="keywordflow">switch</span>(Param.at(4))</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            {</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                <span class="keywordflow">case</span> <span class="charliteral">&#39;E&#39;</span>:</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                    <span class="keywordflow">if</span>(<a class="code" href="namespaceMezzanine_1_1Physics.xhtml#aab6743742986e4125e21b9c68b9af967" title="Get a Constraint Parameter as a String.">ConstraintParamAsString</a>(<a class="code" href="namespaceMezzanine_1_1Physics.xhtml#aa640f4c4b2baf4a4039db76fd792d2c1ac8dc98db8c9881c5836a27d5b34fd787" title="ERP values adjust how fast the errors in the constraints are reduced.">Con_ERP</a>)==Param)</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                        { <span class="keywordflow">return</span> <a class="code" href="namespaceMezzanine_1_1Physics.xhtml#aa640f4c4b2baf4a4039db76fd792d2c1ac8dc98db8c9881c5836a27d5b34fd787" title="ERP values adjust how fast the errors in the constraints are reduced.">Con_ERP</a>; }</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                        { MEZZ_EXCEPTION(<a class="code" href="classMezzanine_1_1Exception.xhtml#a4ee7e60ac53783c4975240c57071d420a7a0bd380eb3a0e6d02ff8f51ceeda54c" title="When used a instance of ParametersException is thrown. Thrown when parameters are checked at runtime ...">Exception::PARAMETERS_EXCEPTION</a>,<span class="stringliteral">&quot;Attempted to convert invalid String to Constraint Paramater: Appears to be Con_ERP but isn&#39;t.&quot;</span>); }</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                <span class="keywordflow">case</span> <span class="charliteral">&#39;C&#39;</span>:</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                    <span class="keywordflow">if</span>(<a class="code" href="namespaceMezzanine_1_1Physics.xhtml#aab6743742986e4125e21b9c68b9af967" title="Get a Constraint Parameter as a String.">ConstraintParamAsString</a>(<a class="code" href="namespaceMezzanine_1_1Physics.xhtml#aa640f4c4b2baf4a4039db76fd792d2c1ac7067723ec3340acdf2941f1a4f56569" title="CFM values adds some small value to the main diagonal on the constraint matrix to prevent degenerate ...">Con_CFM</a>)==Param)</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                        { <span class="keywordflow">return</span> <a class="code" href="namespaceMezzanine_1_1Physics.xhtml#aa640f4c4b2baf4a4039db76fd792d2c1ac7067723ec3340acdf2941f1a4f56569" title="CFM values adds some small value to the main diagonal on the constraint matrix to prevent degenerate ...">Con_CFM</a>; }</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                        { MEZZ_EXCEPTION(<a class="code" href="classMezzanine_1_1Exception.xhtml#a4ee7e60ac53783c4975240c57071d420a7a0bd380eb3a0e6d02ff8f51ceeda54c" title="When used a instance of ParametersException is thrown. Thrown when parameters are checked at runtime ...">Exception::PARAMETERS_EXCEPTION</a>,<span class="stringliteral">&quot;Attempted to convert invalid String to Constraint Paramater: Appears to be Con_CFM but isn&#39;t.&quot;</span>); }</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                <span class="keywordflow">case</span> <span class="charliteral">&#39;S&#39;</span>:</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                    <span class="keywordflow">switch</span>(Param.at(9))</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                    {</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                        <span class="keywordflow">case</span> <span class="charliteral">&#39;E&#39;</span>:</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                            <span class="keywordflow">if</span>(<a class="code" href="namespaceMezzanine_1_1Physics.xhtml#aab6743742986e4125e21b9c68b9af967" title="Get a Constraint Parameter as a String.">ConstraintParamAsString</a>(Con_Stop_ERP)==Param)</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                                { <span class="keywordflow">return</span> Con_Stop_ERP; }</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                                { MEZZ_EXCEPTION(<a class="code" href="classMezzanine_1_1Exception.xhtml#a4ee7e60ac53783c4975240c57071d420a7a0bd380eb3a0e6d02ff8f51ceeda54c" title="When used a instance of ParametersException is thrown. Thrown when parameters are checked at runtime ...">Exception::PARAMETERS_EXCEPTION</a>,<span class="stringliteral">&quot;Attempted to convert invalid String to Constraint Paramater: Appears to be Con_Stop_ERP but isn&#39;t.&quot;</span>); }</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                        <span class="keywordflow">case</span> <span class="charliteral">&#39;C&#39;</span>:</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                            <span class="keywordflow">if</span>(<a class="code" href="namespaceMezzanine_1_1Physics.xhtml#aab6743742986e4125e21b9c68b9af967" title="Get a Constraint Parameter as a String.">ConstraintParamAsString</a>(Con_Stop_CFM)==Param)</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                                { <span class="keywordflow">return</span> Con_Stop_CFM; }</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                            <span class="keywordflow">else</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                                { MEZZ_EXCEPTION(<a class="code" href="classMezzanine_1_1Exception.xhtml#a4ee7e60ac53783c4975240c57071d420a7a0bd380eb3a0e6d02ff8f51ceeda54c" title="When used a instance of ParametersException is thrown. Thrown when parameters are checked at runtime ...">Exception::PARAMETERS_EXCEPTION</a>,<span class="stringliteral">&quot;Attempted to convert invalid String to Constraint Paramater: Appears to be Con_Stop_CFM but isn&#39;t.&quot;</span>); }</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                        <span class="keywordflow">case</span> <span class="charliteral">&#39;S&#39;</span>:</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                            { MEZZ_EXCEPTION(<a class="code" href="classMezzanine_1_1Exception.xhtml#a4ee7e60ac53783c4975240c57071d420a7a0bd380eb3a0e6d02ff8f51ceeda54c" title="When used a instance of ParametersException is thrown. Thrown when parameters are checked at runtime ...">Exception::PARAMETERS_EXCEPTION</a>,<span class="stringliteral">&quot;Attempted to convert invalid String to Constraint Paramater: Appeared to be Con_Stop_Something, but wasn&#39;t.&quot;</span>); }</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                    }</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                    { MEZZ_EXCEPTION(<a class="code" href="classMezzanine_1_1Exception.xhtml#a4ee7e60ac53783c4975240c57071d420a7a0bd380eb3a0e6d02ff8f51ceeda54c" title="When used a instance of ParametersException is thrown. Thrown when parameters are checked at runtime ...">Exception::PARAMETERS_EXCEPTION</a>,<span class="stringliteral">&quot;Attempted to convert invalid String to Constraint Paramater: Invalid Name.&quot;</span>); }</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            }</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        }</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keywordtype">int</span> <a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a20628c78a5f53a967af1aa3eec05f952" title="used to help convert string to the axis they indicate">char4ToAxis</a>(<span class="keywordtype">char</span> it)</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        {</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            <span class="keywordflow">switch</span>(it)</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            {</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                <span class="keywordflow">case</span> <span class="charliteral">&#39;-&#39;</span>: <span class="keywordflow">return</span> -1;         <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                <span class="keywordflow">case</span> <span class="charliteral">&#39;0&#39;</span>: <span class="keywordflow">return</span> 0;          <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                <span class="keywordflow">case</span> <span class="charliteral">&#39;1&#39;</span>: <span class="keywordflow">return</span> 1;          <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                <span class="keywordflow">case</span> <span class="charliteral">&#39;2&#39;</span>: <span class="keywordflow">return</span> 2;          <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                <span class="keywordflow">case</span> <span class="charliteral">&#39;3&#39;</span>: <span class="keywordflow">return</span> 3;          <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                <span class="keywordflow">case</span> <span class="charliteral">&#39;4&#39;</span>: <span class="keywordflow">return</span> 4;          <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                <span class="keywordflow">case</span> <span class="charliteral">&#39;5&#39;</span>: <span class="keywordflow">return</span> 5;          <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                <span class="keywordflow">default</span>: { MEZZ_EXCEPTION(<a class="code" href="classMezzanine_1_1Exception.xhtml#a4ee7e60ac53783c4975240c57071d420a7a0bd380eb3a0e6d02ff8f51ceeda54c" title="When used a instance of ParametersException is thrown. Thrown when parameters are checked at runtime ...">Exception::PARAMETERS_EXCEPTION</a>,<span class="stringliteral">&quot;Cannot convert invalid axis name.&quot;</span>); }</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            }</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        }</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">        /////////////////////////////////////////</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment"></span>        <span class="comment">// Constraint Functions</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">        ////////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment"></span>        <span class="comment">// Constraint Protected Methods</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#a6bc5779694ddc3c7166694c258f6611a" title="No initialization constructor.">Constraint::Constraint</a>()</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            { }</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#a0dd0d94feeb3d15c650aa2fcb5352110" title="Sets the Internal actor pointers.">Constraint::SetBodies</a>(ActorRigid* Act1, ActorRigid* Act2)</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        {</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#ac06f89c49c66ccfbc6114b5ccf12f136" title="First Actor the constraint applies to.">ActA</a> = Act1;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#a414546db222be9c8befac5826bbe88fb" title="Second Actor the constraint applies to.">ActB</a> = Act2;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#adef4626e3c28e717058d18ff80f4c104" title="First rigid body the constraint applies to.">BodyA</a> = Act1-&gt;PhysicsRigidBody;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#a83db6ff278bb5e7d51ebec87f3ab7279" title="Second rigid body the constraint applies to(if applicable).">BodyB</a> = Act2-&gt;PhysicsRigidBody;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#adef4626e3c28e717058d18ff80f4c104" title="First rigid body the constraint applies to.">BodyA</a>-&gt;setActivationState(Mezzanine::Physics::AS_DisableDeactivation);</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#a83db6ff278bb5e7d51ebec87f3ab7279" title="Second rigid body the constraint applies to(if applicable).">BodyB</a>-&gt;setActivationState(Mezzanine::Physics::AS_DisableDeactivation);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        }</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#a0dd0d94feeb3d15c650aa2fcb5352110" title="Sets the Internal actor pointers.">Constraint::SetBodies</a>(ActorRigid* Act1)</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        {</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#ac06f89c49c66ccfbc6114b5ccf12f136" title="First Actor the constraint applies to.">ActA</a> = Act1;</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#a414546db222be9c8befac5826bbe88fb" title="Second Actor the constraint applies to.">ActB</a> = NULL;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#adef4626e3c28e717058d18ff80f4c104" title="First rigid body the constraint applies to.">BodyA</a> = Act1-&gt;PhysicsRigidBody;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#a83db6ff278bb5e7d51ebec87f3ab7279" title="Second rigid body the constraint applies to(if applicable).">BodyB</a> = NULL;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#adef4626e3c28e717058d18ff80f4c104" title="First rigid body the constraint applies to.">BodyA</a>-&gt;setActivationState(Mezzanine::Physics::AS_DisableDeactivation);</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        }</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">        ////////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment"></span>        <span class="comment">// Constraint Core Functionality</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#a14b64969522c386d459133c44d363e9d" title="Class destructor.">Constraint::~Constraint</a>()</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            { }</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        ActorRigid* <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#a68014c60417df353bf60d27008f36f20" title="Gets the first actor this constraint applies to.">Constraint::GetActorA</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="keyword">            </span>{ <span class="keywordflow">return</span> <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#ac06f89c49c66ccfbc6114b5ccf12f136" title="First Actor the constraint applies to.">ActA</a>; }</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        ActorRigid* <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#a26a1d3a51c28f88a7fdd7d9233f2156a" title="Gets the second actor this constraint applies to.">Constraint::GetActorB</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="keyword">            </span>{ <span class="keywordflow">return</span> <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#a414546db222be9c8befac5826bbe88fb" title="Second Actor the constraint applies to.">ActB</a>; }</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">        ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment"></span>        <span class="comment">// Constraint Parameters</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#a1ad472fce533ae7948fcaeeb565b182b" title="Provides override of constraint parameters.">Constraint::SetParam</a>(<a class="code" href="namespaceMezzanine_1_1Physics.xhtml#aa640f4c4b2baf4a4039db76fd792d2c1" title="Used by constraints for setting some parameters.">ConstraintParam</a> Param, <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> Value, <span class="keywordtype">int</span> Axis)</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            { this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#aa9649e5c2bfbd0fa19caf876ed039544" title="Get the Bullet constraint that this class encapsulates.">GetConstraintBase</a>()-&gt;setParam(Param, Value, Axis); }</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#a3b0e508ffc28d0f51c87cb0f4a5feb1b" title="Gets value of constraint parameters.">Constraint::GetParam</a>(<a class="code" href="namespaceMezzanine_1_1Physics.xhtml#aa640f4c4b2baf4a4039db76fd792d2c1" title="Used by constraints for setting some parameters.">ConstraintParam</a> Param, <span class="keywordtype">int</span> Axis)<span class="keyword"> const</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="keyword">            </span>{ <span class="keywordflow">return</span> this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#aa9649e5c2bfbd0fa19caf876ed039544" title="Get the Bullet constraint that this class encapsulates.">GetConstraintBase</a>()-&gt;getParam(Param, Axis); }</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment">        ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment"></span>        <span class="comment">// Constraint Serialization</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        <span class="comment">// Serializable</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#a409dc513af191e413cc8a4cde269243c" title="Convert this class to an XML::Node ready for serialization.">Constraint::ProtoSerialize</a>(XML::Node&amp; CurrentRoot)<span class="keyword"> const</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            XML::Node ConstraintNode = CurrentRoot.AppendChild(<a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#af66c2b8e514d8bb7b7b2e1faa1617937" title="Get the name of the the XML tag this class will leave behind as its instances are serialized...">SerializableName</a>());                     <span class="comment">// The base node all the base constraint stuff will go in</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            <span class="keywordflow">if</span> (!ConstraintNode)</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                { <a class="code" href="namespaceMezzanine.xhtml#ab061665515c8e8a8b09ee54d93612da1" title="Simply does some string concatenation, then throws an Exception.">SerializeError</a>(<span class="stringliteral">&quot;Create ConstraintNode&quot;</span>, <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#af66c2b8e514d8bb7b7b2e1faa1617937" title="Get the name of the the XML tag this class will leave behind as its instances are serialized...">SerializableName</a>()); }</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;            XML::Attribute Version = ConstraintNode.AppendAttribute(<span class="stringliteral">&quot;Version&quot;</span>);</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            XML::Attribute ActorNameA = ConstraintNode.AppendAttribute(<span class="stringliteral">&quot;ActorNameA&quot;</span>);</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            XML::Attribute ActorNameB = ConstraintNode.AppendAttribute(<span class="stringliteral">&quot;ActorNameB&quot;</span>);</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            <span class="keywordflow">if</span> (Version &amp;&amp; ActorNameA &amp;&amp; ActorNameB)</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            {</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                Version.SetValue(1);</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                ActorNameA.SetValue( this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#a68014c60417df353bf60d27008f36f20" title="Gets the first actor this constraint applies to.">GetActorA</a>()-&gt;GetName() );</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                ActorNameB.SetValue( this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#a26a1d3a51c28f88a7fdd7d9233f2156a" title="Gets the second actor this constraint applies to.">GetActorB</a>()-&gt;GetName() );</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                <a class="code" href="namespaceMezzanine.xhtml#ab061665515c8e8a8b09ee54d93612da1" title="Simply does some string concatenation, then throws an Exception.">SerializeError</a>(<span class="stringliteral">&quot;Create Attributes on ConstraintNode&quot;</span>, <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#af66c2b8e514d8bb7b7b2e1faa1617937" title="Get the name of the the XML tag this class will leave behind as its instances are serialized...">SerializableName</a>());</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            }</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a> CurrentAxisName;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#a58bc7d514090f3043c9f63f470ccc547" title="Used to Store lists of Int Axis for return types.">AxisList</a> AllAxis = this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#a35c76887e88943a5753aa788f01bca42" title="Get a sorted (low to high) list of All Valid Axis.">ValidAxis</a>();</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            <span class="keywordflow">for</span>(AxisList::iterator AxisIter=AllAxis.begin(); AllAxis.end()!=AxisIter; ++AxisIter)</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            {</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                XML::Node OneAxisNode;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                CurrentAxisName = <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>(<span class="stringliteral">&quot;Axis&quot;</span>)+<a class="code" href="namespaceMezzanine_1_1StringTools.xhtml#a8525f86f908296f5ac2a08b3f33bf10b" title="Converts a Vector2 into a string.">StringTools::ConvertToString</a>(*AxisIter);                        <span class="comment">// Should result in &quot;Axis-1&quot;, &quot;Axis0&quot;, &quot;Axis1&quot; ...</span></div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#ab434efbcfdfe803d6f7cc014e7794868" title="Used to Store lists of param for return types.">ParamList</a> AxisParams = <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#a25e941fd9f41dffe2c5ad15c27a888a1" title="Get a sorted (low to high) list of Parameters that are valid on this Axis.">ValidParamOnAxis</a>(*AxisIter);</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                <span class="keywordflow">for</span>(ParamList::iterator ParamIter=AxisParams.begin(); AxisParams.end()!=ParamIter; ++ParamIter)</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                {</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                    <span class="keywordflow">if</span>(<a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#a43e33a64cad92068ad8153bf7f9a72e7" title="Has the given Param on the Given Axis been set yet.">HasParamBeenSet</a>(*ParamIter,*AxisIter))                                           <span class="comment">// No need to create a node if no attributes exist for it, so we will create one for the first attribute that does exist and</span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                    {                                                                                   <span class="comment">// reuse it until we move onto the next Axis</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                        <span class="keywordflow">if</span> (!OneAxisNode)</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                        {</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                            OneAxisNode = ConstraintNode.AppendChild(CurrentAxisName);</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                            <span class="keywordflow">if</span> (!OneAxisNode)</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                                { <a class="code" href="namespaceMezzanine.xhtml#ab061665515c8e8a8b09ee54d93612da1" title="Simply does some string concatenation, then throws an Exception.">SerializeError</a>( <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>(<span class="stringliteral">&quot;Create &quot;</span>) + CurrentAxisName + <span class="stringliteral">&quot; Node&quot;</span>, <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#af66c2b8e514d8bb7b7b2e1faa1617937" title="Get the name of the the XML tag this class will leave behind as its instances are serialized...">SerializableName</a>()); }</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                        }</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                        XML::Attribute CurrenParamAttribute = OneAxisNode.AppendAttribute( <a class="code" href="namespaceMezzanine_1_1Physics.xhtml#aab6743742986e4125e21b9c68b9af967" title="Get a Constraint Parameter as a String.">ConstraintParamAsString</a>(*ParamIter) );</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                        <span class="keywordflow">if</span> (!CurrenParamAttribute)</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                            { <a class="code" href="namespaceMezzanine.xhtml#ab061665515c8e8a8b09ee54d93612da1" title="Simply does some string concatenation, then throws an Exception.">SerializeError</a>(<a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>(<span class="stringliteral">&quot;Create &quot;</span>) + <a class="code" href="namespaceMezzanine_1_1Physics.xhtml#aab6743742986e4125e21b9c68b9af967" title="Get a Constraint Parameter as a String.">ConstraintParamAsString</a>(*ParamIter) + <span class="stringliteral">&quot; Attribute in &quot;</span> + CurrentAxisName + <span class="stringliteral">&quot; Node&quot;</span>, <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#af66c2b8e514d8bb7b7b2e1faa1617937" title="Get the name of the the XML tag this class will leave behind as its instances are serialized...">SerializableName</a>()); }</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                        CurrenParamAttribute.SetValue( this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#a3b0e508ffc28d0f51c87cb0f4a5feb1b" title="Gets value of constraint parameters.">GetParam</a>(*ParamIter,*AxisIter));</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                    }</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                }</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            }</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        }</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        <span class="comment">// DeSerializable</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#a624922a79e0cf31c195774ba091b8b8a" title="Take the data stored in an XML and overwrite this instance of this object with it.">Constraint::ProtoDeSerialize</a>(<span class="keyword">const</span> XML::Node&amp; OneNode)</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        {</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            <span class="keywordflow">if</span> ( <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">Mezzanine::String</a>(OneNode.Name())==this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#af66c2b8e514d8bb7b7b2e1faa1617937" title="Get the name of the the XML tag this class will leave behind as its instances are serialized...">Constraint::SerializableName</a>() )</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            {</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                <span class="keywordflow">if</span>(OneNode.GetAttribute(<span class="stringliteral">&quot;Version&quot;</span>).AsInt() == 1)</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                {</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                    <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a> ActorNameA(OneNode.GetAttribute(<span class="stringliteral">&quot;ActorNameA&quot;</span>).AsString());                                                           <span class="comment">// get Actors from the XML</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                    <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a> ActorNameB(OneNode.GetAttribute(<span class="stringliteral">&quot;ActorNameB&quot;</span>).AsString());</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                    <span class="keywordflow">if</span> (<span class="stringliteral">&quot;&quot;</span>!=ActorNameA)                                                                                                         <span class="comment">//Figure out if the actors are fine</span></div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                    {</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                        ActorRigid* FutureA = <span class="keyword">dynamic_cast&lt;</span>ActorRigid*<span class="keyword">&gt;</span>(<a class="code" href="classMezzanine_1_1Singleton.xhtml#a78fc425584913f0b2c615ec440871a67" title="Fetches a pointer to the singleton.">Entresol::GetSingletonPtr</a>()-&gt;<a class="code" href="classMezzanine_1_1Entresol.xhtml#a8ab444c2ec94501de83f54e7221bbe65" title="This gets the ActorManager from the manager list.">GetActorManager</a>()-&gt;<a class="code" href="classMezzanine_1_1ActorManager.xhtml#aaf14eea72e9dedc673456bfe78ac26d7" title="Gets an Actor by Index.">GetActor</a>(ActorNameA));     <span class="comment">// get ActorA from the Actormanager</span></div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                        <span class="keywordflow">if</span> (0==FutureA)</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                            { <a class="code" href="namespaceMezzanine.xhtml#aec75a8a3369287cb02f331c62b32df73" title="Simply does some string concatenation, then throws an Exception.">DeSerializeError</a>(<span class="stringliteral">&quot;find an ActorRigid named &quot;</span>+ActorNameA+<span class="stringliteral">&quot; in the ActorManager&quot;</span>, <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#af66c2b8e514d8bb7b7b2e1faa1617937" title="Get the name of the the XML tag this class will leave behind as its instances are serialized...">SerializableName</a>()); }</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                        <span class="keywordflow">if</span> (<span class="stringliteral">&quot;&quot;</span>!=ActorNameB)</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                        {</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                            ActorRigid* FutureB = <span class="keyword">dynamic_cast&lt;</span>ActorRigid*<span class="keyword">&gt;</span>(<a class="code" href="classMezzanine_1_1Singleton.xhtml#a78fc425584913f0b2c615ec440871a67" title="Fetches a pointer to the singleton.">Entresol::GetSingletonPtr</a>()-&gt;<a class="code" href="classMezzanine_1_1Entresol.xhtml#a8ab444c2ec94501de83f54e7221bbe65" title="This gets the ActorManager from the manager list.">GetActorManager</a>()-&gt;<a class="code" href="classMezzanine_1_1ActorManager.xhtml#aaf14eea72e9dedc673456bfe78ac26d7" title="Gets an Actor by Index.">GetActor</a>(ActorNameB)); <span class="comment">// get ActorB from the Actormanager</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                            <span class="keywordflow">if</span> (0==FutureB)</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                                { <a class="code" href="namespaceMezzanine.xhtml#aec75a8a3369287cb02f331c62b32df73" title="Simply does some string concatenation, then throws an Exception.">DeSerializeError</a>(<span class="stringliteral">&quot;find an ActorRigid named &quot;</span>+ActorNameB+<span class="stringliteral">&quot; in the ActorManager&quot;</span>, <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#af66c2b8e514d8bb7b7b2e1faa1617937" title="Get the name of the the XML tag this class will leave behind as its instances are serialized...">SerializableName</a>()); }</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#a0dd0d94feeb3d15c650aa2fcb5352110" title="Sets the Internal actor pointers.">SetBodies</a>(FutureA,FutureB);</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                        }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#a0dd0d94feeb3d15c650aa2fcb5352110" title="Sets the Internal actor pointers.">SetBodies</a>(FutureA);</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                        }</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                    }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                        <a class="code" href="namespaceMezzanine.xhtml#aec75a8a3369287cb02f331c62b32df73" title="Simply does some string concatenation, then throws an Exception.">DeSerializeError</a>(<span class="stringliteral">&quot;retrieve ActorNameA&quot;</span>,<a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#af66c2b8e514d8bb7b7b2e1faa1617937" title="Get the name of the the XML tag this class will leave behind as its instances are serialized...">SerializableName</a>());</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                    }</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                    XML::Node TheAxis = OneNode.GetFirstChild();</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                    <span class="keywordflow">while</span>(TheAxis)</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                    {</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                        <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a> EnemyName(TheAxis.Name());                            <span class="comment">//WWII country are we dealing with.</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                        <span class="keywordflow">if</span>(4&gt;EnemyName.size())                                       <span class="comment">//No country on the axis side WWII had fewer than 4 letters in its name. if USA somehow lands on this list it is an error</span></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                            { <a class="code" href="namespaceMezzanine.xhtml#aec75a8a3369287cb02f331c62b32df73" title="Simply does some string concatenation, then throws an Exception.">DeSerializeError</a>(<span class="stringliteral">&quot;find valid axis name, name is too short&quot;</span>,<a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#af66c2b8e514d8bb7b7b2e1faa1617937" title="Get the name of the the XML tag this class will leave behind as its instances are serialized...">SerializableName</a>()); }</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                        <span class="keywordtype">int</span> AxisValue;</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                        AxisValue=<a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a20628c78a5f53a967af1aa3eec05f952" title="used to help convert string to the axis they indicate">char4ToAxis</a>(EnemyName[4]);</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                        XML::Attribute AxisAttribute = TheAxis.GetFirstAttribute();</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                        <span class="keywordflow">while</span>(AxisAttribute)</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                        {</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#a1ad472fce533ae7948fcaeeb565b182b" title="Provides override of constraint parameters.">SetParam</a>(<a class="code" href="namespaceMezzanine_1_1Physics.xhtml#adb0330d242970d0fdf1c5e98be35701e" title="Convert A string that might be ConstraintParam to one.">StringAsConstraintParam</a>(AxisAttribute.Name()),AxisAttribute.AsReal(),AxisValue);</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                            AxisAttribute = AxisAttribute.GetNextAttribute();</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                        }</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                        TheAxis = TheAxis.GetNextSibling();</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                    }<span class="comment">// /While(TheAxis)</span></div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                    <a class="code" href="namespaceMezzanine.xhtml#aec75a8a3369287cb02f331c62b32df73" title="Simply does some string concatenation, then throws an Exception.">DeSerializeError</a>(<span class="stringliteral">&quot;Incompatible XML Version for &quot;</span>+<a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#af66c2b8e514d8bb7b7b2e1faa1617937" title="Get the name of the the XML tag this class will leave behind as its instances are serialized...">SerializableName</a>(),<a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#af66c2b8e514d8bb7b7b2e1faa1617937" title="Get the name of the the XML tag this class will leave behind as its instances are serialized...">SerializableName</a>());</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                }</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;            }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                <a class="code" href="namespaceMezzanine.xhtml#aec75a8a3369287cb02f331c62b32df73" title="Simply does some string concatenation, then throws an Exception.">DeSerializeError</a>(<a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>(<span class="stringliteral">&quot;find correct class to deserialize, found a &quot;</span>)+OneNode.Name()+<span class="stringliteral">&quot;,&quot;</span>,<a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#af66c2b8e514d8bb7b7b2e1faa1617937" title="Get the name of the the XML tag this class will leave behind as its instances are serialized...">SerializableName</a>());</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;            }</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        }</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a> <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#af66c2b8e514d8bb7b7b2e1faa1617937" title="Get the name of the the XML tag this class will leave behind as its instances are serialized...">Constraint::SerializableName</a>()</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;            { <span class="keywordflow">return</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>(<span class="stringliteral">&quot;Constraint&quot;</span>); }</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    }<span class="comment">//Physics</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;}<span class="comment">//Mezzanine</span></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="comment">///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="comment"></span><span class="comment">// Class External &lt;&lt; Operators for streaming or assignment</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;std::ostream&amp; operator &lt;&lt; (std::ostream&amp; stream, <span class="keyword">const</span> <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml" title="This is the base class for all constraints supported.">Mezzanine::Physics::Constraint</a>&amp; x)</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;{</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <a class="code" href="namespaceMezzanine.xhtml#a9015c5e668e14b857a27888c56934148" title="Convert any class that supports serialization or has a serializer to a string of chars in a stream...">Mezzanine::Serialize</a>(stream,x);</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="keywordflow">return</span> stream;</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;}</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;std::istream&amp; operator &gt;&gt; (std::istream&amp; stream, <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml" title="This is the base class for all constraints supported.">Mezzanine::Physics::Constraint</a>&amp; x)</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    { <span class="keywordflow">return</span> <a class="code" href="namespaceMezzanine.xhtml#ad8989ea81ccd1ad6d59a11921f0239a4" title="Deserialize the next xml tag in the stream into a specific in memory class instance.">Mezzanine::DeSerialize</a>(stream, x); }</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="keywordtype">void</span> operator &gt;&gt; (<span class="keyword">const</span> <a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">Mezzanine::XML::Node</a>&amp; OneNode, <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml" title="This is the base class for all constraints supported.">Mezzanine::Physics::Constraint</a>&amp; x)</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    { x.<a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#a624922a79e0cf31c195774ba091b8b8a" title="Take the data stored in an XML and overwrite this instance of this object with it.">ProtoDeSerialize</a>(OneNode); }</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="comment">/// @endcond</span></div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="preprocessor">#endif</span></div>
</div><!-- fragment --></div><!-- contents -->
<hr class="footer"/><address class="footer"><small>
Generated on Wed Sep 18 2013 23:31:13 for MezzanineEngine by&#160;<a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1</small></address>
</body>
</html>
