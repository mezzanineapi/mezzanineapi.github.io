<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>/home/Code/Mezzanine/Mezzanine/src/Physics/constraint.h Source File</title>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="DoxyStyle.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script> 
</head>
<body onload='searchBox.OnSelectItem(0);'>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;" nowrap="nowrap">
   <div id="projectname"><a href="http://blacktoppstudios.com"><img src="logogreen100pxtall.png"/></a>MezzanineEngine&#160;<span id="projectnumber">September 2, 2013</span></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_df2e1c8414b6a086be441ff04537838a.xhtml">Mezzanine</a></li><li class="navelem"><a class="el" href="dir_2b71fc9949116feedacddb93a79d832d.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_61c0ec937c468b49b332752e9f643e74.xhtml">Physics</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">constraint.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//Â© Copyright 2010 - 2013 BlackTopp Studios Inc.</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">/* This file is part of The Mezzanine Engine.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">    The Mezzanine Engine is free software: you can redistribute it and/or modify</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">    it under the terms of the GNU General Public License as published by</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">    the Free Software Foundation, either version 3 of the License, or</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">    (at your option) any later version.</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">    The Mezzanine Engine is distributed in the hope that it will be useful,</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">    but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">    GNU General Public License for more details.</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">    You should have received a copy of the GNU General Public License</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">    along with The Mezzanine Engine.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">/* The original authors have included a copy of the license specified above in the</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">   &#39;Docs&#39; folder. See &#39;gpl.txt&#39;</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">/* We welcome the use of the Mezzanine engine to anyone, including companies who wish to</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">   Build professional software and charge for their product.</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">   However there are some practical restrictions, so if your project involves</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">   any of the following you should contact us and we will try to work something</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">   out:</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">    - DRM or Copy Protection of any kind(except Copyrights)</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">    - Software Patents You Do Not Wish to Freely License</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">    - Any Kind of Linking to Non-GPL licensed Works</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">    - Are Currently In Violation of Another Copyright Holder&#39;s GPL License</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">    - If You want to change our code and not add a few hundred MB of stuff to</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">        your distribution</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment">   These and other limitations could cause serious legal problems if you ignore</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">   them, so it is best to simply contact us or the Free Software Foundation, if</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">   you have any questions.</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">   Joseph Toppi - toppij@gmail.com</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">   John Blackwood - makoenergy02@gmail.com</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#ifndef _physicsconstraint_h</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define _physicsconstraint_h</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="crossplatformexport_8h.xhtml" title="This file is used on some platforms to determine what data should be read and written to and from a s...">crossplatformexport.h</a>&quot;</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="datatypes_8h.xhtml" title="All the definitions for datatypes as well as some basic conversion functions are defined here...">datatypes.h</a>&quot;</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#include &quot;quaternion.h&quot;</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="transform_8h.xhtml" title="The defintion of the transform is stored in this file.">transform.h</a>&quot;</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="preprocessor">#include &quot;vector3.h&quot;</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="keyword">namespace </span>Mezzanine</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;{</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keyword">class </span>ActorRigid;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;}</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="keyword">class </span>btRigidBody;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="keyword">class </span>btTypedConstraint;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="keyword">namespace </span>Mezzanine</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;{</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">namespace </span>Physics</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    {<span class="comment"></span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">        /// @enum ConstraintParam</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">        /// @brief Used by constraints for setting some parameters.</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">        /// @details See the constraint class documentation for more details.</span></div>
<div class="line"><a name="l00064"></a><span class="lineno"><a class="code" href="namespaceMezzanine_1_1Physics.xhtml#aa640f4c4b2baf4a4039db76fd792d2c1">   64</a></span>&#160;<span class="comment"></span>        <span class="keyword">enum</span> <a class="code" href="namespaceMezzanine_1_1Physics.xhtml#aa640f4c4b2baf4a4039db76fd792d2c1" title="Used by constraints for setting some parameters.">ConstraintParam</a></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        {</div>
<div class="line"><a name="l00066"></a><span class="lineno"><a class="code" href="namespaceMezzanine_1_1Physics.xhtml#aa640f4c4b2baf4a4039db76fd792d2c1ac8dc98db8c9881c5836a27d5b34fd787">   66</a></span>&#160;            <a class="code" href="namespaceMezzanine_1_1Physics.xhtml#aa640f4c4b2baf4a4039db76fd792d2c1ac8dc98db8c9881c5836a27d5b34fd787" title="ERP values adjust how fast the errors in the constraints are reduced.">Con_ERP</a>         = 1,    <span class="comment">///&lt; ERP values adjust how fast the errors in the constraints are reduced.</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment"></span>            Con_Stop_ERP    = 2,</div>
<div class="line"><a name="l00068"></a><span class="lineno"><a class="code" href="namespaceMezzanine_1_1Physics.xhtml#aa640f4c4b2baf4a4039db76fd792d2c1ac7067723ec3340acdf2941f1a4f56569">   68</a></span>&#160;            <a class="code" href="namespaceMezzanine_1_1Physics.xhtml#aa640f4c4b2baf4a4039db76fd792d2c1ac7067723ec3340acdf2941f1a4f56569" title="CFM values adds some small value to the main diagonal on the constraint matrix to prevent degenerate ...">Con_CFM</a>         = 3,    <span class="comment">///&lt; CFM values adds some small value to the main diagonal on the constraint matrix to prevent degenerate matrices.</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment"></span>            Con_Stop_CFM    = 4</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        };</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">        /// @brief Get a Constraint Parameter as a String.</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">        /// @param Param The Parameter to get as a String.</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">        /// @return A String That contains the name of a ConstraintParam.</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment"></span>        <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a> <a class="code" href="namespaceMezzanine_1_1Physics.xhtml#aab6743742986e4125e21b9c68b9af967" title="Get a Constraint Parameter as a String.">ConstraintParamAsString</a>(<a class="code" href="namespaceMezzanine_1_1Physics.xhtml#aa640f4c4b2baf4a4039db76fd792d2c1" title="Used by constraints for setting some parameters.">ConstraintParam</a> Param);</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">        /// @brief Convert A string that might be ConstraintParam to one.</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">        /// @param Param A String that should be storing, a constraint param name.</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment">        /// @return if the name matches on of the constraintParams exactly, return that one.</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">        /// @throw If the Param does not match a type exactly, then this will throw an exception.</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment"></span>        <a class="code" href="namespaceMezzanine_1_1Physics.xhtml#aa640f4c4b2baf4a4039db76fd792d2c1" title="Used by constraints for setting some parameters.">ConstraintParam</a> <a class="code" href="namespaceMezzanine_1_1Physics.xhtml#adb0330d242970d0fdf1c5e98be35701e" title="Convert A string that might be ConstraintParam to one.">StringAsConstraintParam</a>(<a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a> Param);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment">        /// @brief How many ConstraintParam Exist.</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment">        /// @details Used in some algorithms and we didn&#39;t want it to look like a magic so we defined it here.</span></div>
<div class="line"><a name="l00085"></a><span class="lineno"><a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a1693cefad473b8c50aa44b9f6e4ac108">   85</a></span>&#160;<span class="comment"></span>        <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a1693cefad473b8c50aa44b9f6e4ac108" title="How many ConstraintParam Exist.">ConstraintParamCount</a> = 4;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">        /// @internal</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">        /// @brief used to help convert string to the axis they indicate</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">        /// @param it it is the character that is passed in to indicate what the axis is. This should be the [4] character or the 5 character of the string.</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">        /// @return this returns an int that indicates the Axis for the string.</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment"></span>        <span class="keywordtype">int</span> <a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a20628c78a5f53a967af1aa3eec05f952" title="used to help convert string to the axis they indicate">char4ToAxis</a>(<span class="keywordtype">char</span> it);</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">        ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment">        /// @class Constraint</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">        /// @headerfile constraint.h</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">        /// @brief This is the base class for all constraints supported.</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">        /// @details This class provides the basis for all the other constraints.  This is</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment">        /// also a virtual class and provides no constraint properties of it&#39;s own, thus</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">        /// shouldn&#39;t/can&#39;t be called on manually. \n \n</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">        /// Any class implementing a this must implement at least these functions to</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">        /// create a minimally functiontal constraint: \n</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">        ///     - GetConstraintBase() const - Return A pointer to the bullet constraint they use</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">        ///     - SetPivotALocation(const Vector3&amp;) - Set Location of pivot Relative to A</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">        ///     - SetPivotALocation(const Vector3&amp;) - Set Location of pivot Relative to B</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">        ///     - GetPivotALocation() const - Get Location of pivot Relative to A</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">        ///     - GetPivotBLocation() const - Get Location of pivot Relative to B</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">        ///     - ValidParamOnAxis(int Axis) const - What parameters can be changed on the given Axis</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">        ///     - ValidLinearAxis() const - Which Axis Suppport Translation</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">        ///     - ValidAngularAxis() const - Which axis support Rotation</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">        ///     - HasParamBeenSet(ConstraintParam Param, int Axis) const - Has a the given param on the given axis been set</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">        ///</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">        /// It is advisable to re-implement a few more functions as well, these all have implementation writtens in terms of</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">        /// of the function that must be implemented, but the genericity of them may impede performance.</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">        ///     - ValidAxis() const - Full List of all valid Axis. Combines the lists from ValidLinearAxis() const and ValidAngularAxis() const.</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">        ///     - IsParamValidOnAxis(ConstraintParam, int) const - Uses the other function to check Axis and then check if the param is valid there</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">        ///     - ValidParams() const - A list of Parameters every Axis on this constraint implements</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">        ///</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">        ///</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment">        ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00120"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml">  120</a></span>&#160;<span class="comment"></span>        <span class="keyword">class </span><a class="code" href="crossplatformexport_8h.xhtml#a455f91aab9e6a1cf4286f5cdfa74c7bc" title="Some platforms require special decorations to denote what is exported/imported in a share library...">MEZZ_LIB</a> <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml" title="This is the base class for all constraints supported.">Constraint</a></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        {</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsManager.xhtml" title="This is simply a place for storing all the Physics Related functions.">PhysicsManager</a>;<span class="comment"></span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">            ////////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment"></span>            <span class="comment">// Constraint Data Members</span><span class="comment"></span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment">            /// @brief First rigid body the constraint applies to.</span></div>
<div class="line"><a name="l00127"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#adef4626e3c28e717058d18ff80f4c104">  127</a></span>&#160;<span class="comment"></span>            btRigidBody* <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#adef4626e3c28e717058d18ff80f4c104" title="First rigid body the constraint applies to.">BodyA</a>;<span class="comment"></span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">            /// @brief Second rigid body the constraint applies to(if applicable).</span></div>
<div class="line"><a name="l00129"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#a83db6ff278bb5e7d51ebec87f3ab7279">  129</a></span>&#160;<span class="comment"></span>            btRigidBody* <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#a83db6ff278bb5e7d51ebec87f3ab7279" title="Second rigid body the constraint applies to(if applicable).">BodyB</a>;<span class="comment"></span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">            /// @brief First Actor the constraint applies to.</span></div>
<div class="line"><a name="l00131"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#ac06f89c49c66ccfbc6114b5ccf12f136">  131</a></span>&#160;<span class="comment"></span>            <a class="code" href="classMezzanine_1_1ActorRigid.xhtml" title="This is the actor class for Rigid Objects.">ActorRigid</a>* <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#ac06f89c49c66ccfbc6114b5ccf12f136" title="First Actor the constraint applies to.">ActA</a>;<span class="comment"></span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">            /// @brief Second Actor the constraint applies to.</span></div>
<div class="line"><a name="l00133"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#a414546db222be9c8befac5826bbe88fb">  133</a></span>&#160;<span class="comment"></span>            <a class="code" href="classMezzanine_1_1ActorRigid.xhtml" title="This is the actor class for Rigid Objects.">ActorRigid</a>* <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#a414546db222be9c8befac5826bbe88fb" title="Second Actor the constraint applies to.">ActB</a>;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">            ////////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment"></span>            <span class="comment">// Constraint Protected Methods</span><span class="comment"></span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">            /// @brief Sets the Internal actor pointers.</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment"></span>            <span class="keywordtype">void</span> SetBodies(<a class="code" href="classMezzanine_1_1ActorRigid.xhtml" title="This is the actor class for Rigid Objects.">ActorRigid</a>* Act1, <a class="code" href="classMezzanine_1_1ActorRigid.xhtml" title="This is the actor class for Rigid Objects.">ActorRigid</a>* Act2);<span class="comment"></span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">            /// @brief Sets the Internal actor pointers.</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment"></span>            <span class="keywordtype">void</span> SetBodies(<a class="code" href="classMezzanine_1_1ActorRigid.xhtml" title="This is the actor class for Rigid Objects.">ActorRigid</a>* Act1);<span class="comment"></span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">            /// @brief No initialization constructor.</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment">            /// @details This is protected to prevent creating an instance of this directly.</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment"></span>            <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml" title="This is the base class for all constraints supported.">Constraint</a>();</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        <span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">            ////////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment"></span>            <span class="comment">// Constraint Core Functionality</span><span class="comment"></span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment">            /// @brief Class destructor.</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">            /// @details The class destructor.</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment"></span>            <span class="keyword">virtual</span> ~<a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml" title="This is the base class for all constraints supported.">Constraint</a>();</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">            /// @brief Gets the first actor this constraint applies to.</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">            /// @return Returns a pointer to the first actor this constraint applies to.</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment"></span>            <span class="keyword">virtual</span> <a class="code" href="classMezzanine_1_1ActorRigid.xhtml" title="This is the actor class for Rigid Objects.">ActorRigid</a>* GetActorA() <span class="keyword">const</span>;<span class="comment"></span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment">            /// @brief Gets the second actor this constraint applies to.</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">            /// @return Returns a pointer to the second actor this constraint applies to.</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment"></span>            <span class="keyword">virtual</span> <a class="code" href="classMezzanine_1_1ActorRigid.xhtml" title="This is the actor class for Rigid Objects.">ActorRigid</a>* GetActorB() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">            ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment"></span>            <span class="comment">// Constraint Parameters</span><span class="comment"></span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment">            /// @brief Used to Store lists of param for return types</span></div>
<div class="line"><a name="l00161"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#ab434efbcfdfe803d6f7cc014e7794868">  161</a></span>&#160;<span class="comment"></span>            <span class="keyword">typedef</span> std::vector&lt;ConstraintParam&gt; <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#ab434efbcfdfe803d6f7cc014e7794868" title="Used to Store lists of param for return types.">ParamList</a>;<span class="comment"></span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment">            /// @brief Used to Store lists of Int Axis for return types</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment">            /// @details In general Axis will come in groups of three, such as 0,1,2, or 0,1,2,3,4,5 which could represent X,Y, and Z or multiple grousp of X,Y, and Z. These Axis</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment">            /// can represent Linear/Translation or Angular/Rotation information. Some Constraints support values that affect all constraints, this is usually represented a -1.</span></div>
<div class="line"><a name="l00165"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#a58bc7d514090f3043c9f63f470ccc547">  165</a></span>&#160;<span class="comment"></span>            <span class="keyword">typedef</span> std::vector&lt;int&gt; <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#a58bc7d514090f3043c9f63f470ccc547" title="Used to Store lists of Int Axis for return types.">AxisList</a>;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment">            /// @brief Get a sorted (low to high) list of Parameters that are valid on this Axis</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">            /// @details Parameters returned from this will work on the given axis even if they are not valid on any other axis. There is no guarantee that the Parameters</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">            /// will be uniquely stored per an axis. There is no guarantee that changing one parameter will not change another.</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">            /// @param Axis the Axis to check.</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment">            /// @return A Paramlist with all the valid parameters for this axis.</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment"></span>            <span class="keyword">virtual</span> <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#ab434efbcfdfe803d6f7cc014e7794868" title="Used to Store lists of param for return types.">ParamList</a> ValidParamOnAxis(<span class="keywordtype">int</span> Axis) <span class="keyword">const</span> = 0;<span class="comment"></span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment">            /// @brief Get a sorted (low to high) list of all axis that operate linearly (that lock sliding/translation)</span></div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment">            /// @warning Odd behaviors, maybe even undefined behavior can happen if This returns a matching Axis to a Linear Axis. Any given axis should only be one or the other</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment">            /// @return An Axislist with the Axis this constraint linearly supports.</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment"></span>            <span class="keyword">virtual</span> <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#a58bc7d514090f3043c9f63f470ccc547" title="Used to Store lists of Int Axis for return types.">AxisList</a> ValidLinearAxis() <span class="keyword">const</span> = 0;<span class="comment"></span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment">            /// @brief Get A list sorted (low to high) of all axis that operate Angularly (that lock sliding/translation)</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment">            /// @warning Odd behaviors, maybe even undefined behavior can happen if This returns a matching Axis to a Linear Axis. Any given axis should only be one or the other</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment">            /// @return An Axislist with the Axis this constraint Angularly supports.</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment"></span>            <span class="keyword">virtual</span> <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#a58bc7d514090f3043c9f63f470ccc547" title="Used to Store lists of Int Axis for return types.">AxisList</a> ValidAngularAxis() <span class="keyword">const</span> = 0;<span class="comment"></span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">            /// @brief Has the given Param on the Given Axis been set yet.</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment">            /// @param Param The parameter to Check</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment">            /// @param Axis The Axis on which to check the param</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment">            /// @details This will probably have to implement the same logic aas what is in the respective get/setparam function of each constraint http://bulletphysics.com/Bullet/BulletFull/classbtTypedConstraint.html#a11f44dd743b59bc05e25d500456e2559</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment">            /// @return True if it has been set, false if it has.</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment"></span>            <span class="keyword">virtual</span> <span class="keywordtype">bool</span> HasParamBeenSet(<a class="code" href="namespaceMezzanine_1_1Physics.xhtml#aa640f4c4b2baf4a4039db76fd792d2c1" title="Used by constraints for setting some parameters.">ConstraintParam</a> Param, <span class="keywordtype">int</span> Axis) <span class="keyword">const</span> = 0;<span class="comment"></span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment">            /// @brief Get a sorted (low to high) list of All Valid Axis</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment">            /// @details This is implemented using ValidLinearAxis and ValidAngularAxis, Derived versions of this class may wish to make a more specialized</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment">            /// implementation of this method that doesn&#39;t have the overhead of passing around 3 vectors by value.</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment">            /// @return An Axislist with all the Axis this constraint supports.</span></div>
<div class="line"><a name="l00191"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#a35c76887e88943a5753aa788f01bca42">  191</a></span>&#160;<span class="comment"></span>            <span class="keyword">virtual</span> <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#a58bc7d514090f3043c9f63f470ccc547" title="Used to Store lists of Int Axis for return types.">AxisList</a> ValidAxis()<span class="keyword"> const</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="keyword">            </span>{</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#a58bc7d514090f3043c9f63f470ccc547" title="Used to Store lists of Int Axis for return types.">AxisList</a> Ang = this-&gt;ValidAngularAxis();</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#a58bc7d514090f3043c9f63f470ccc547" title="Used to Store lists of Int Axis for return types.">AxisList</a> Lin = this-&gt;ValidLinearAxis();</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                Lin.insert(Lin.end()-1,Ang.begin(),Ang.end());              <span class="comment">// just kinda stick the two together and return that, no checking is performed for uniqueness.</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                sort(Lin.begin(),Lin.end());                                <span class="comment">// Usually the Linear axis are 0,1,2 and the angular are 3,4,5 so hopefully, this will hardly ever need to do work.</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                <span class="keywordflow">return</span> Lin;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            }<span class="comment"></span></div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment">            /// @brief Is a certain Parameter valid on a certain axis</span></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment">            /// @param Param The Parameter to Check</span></div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="comment">            /// @param Axis The Axis to Check</span></div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="comment">            /// @details This is implemented using ValidParamOnAxis, Derived versions of this class may wish to make a more specialized</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="comment">            /// implementation of this method.</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="comment">            /// @return True if Param is valid on Axis, and Axis is valid. If anything is invalid this returns false.</span></div>
<div class="line"><a name="l00205"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#a811fd8e3efec883ea82861469a79bfb6">  205</a></span>&#160;<span class="comment"></span>            <span class="keyword">virtual</span> <span class="keywordtype">bool</span> IsParamValidOnAxis(<a class="code" href="namespaceMezzanine_1_1Physics.xhtml#aa640f4c4b2baf4a4039db76fd792d2c1" title="Used by constraints for setting some parameters.">ConstraintParam</a> Param, <span class="keywordtype">int</span> Axis)<span class="keyword"> const</span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="keyword">            </span>{</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#ab434efbcfdfe803d6f7cc014e7794868" title="Used to Store lists of param for return types.">ParamList</a> Supported = ValidParamOnAxis(Axis);</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                <span class="keywordflow">if</span>(<span class="keywordtype">size_t</span>(<a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a1693cefad473b8c50aa44b9f6e4ac108" title="How many ConstraintParam Exist.">ConstraintParamCount</a>) == Supported.size())                           <span class="comment">// no need to check deeper, because everything is supported</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                {</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                    <span class="keywordflow">if</span>(Supported.size())</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                    {</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                        <span class="keywordflow">return</span> ( std::find(Supported.begin(),Supported.end(),Param) != Supported.end() );     <span class="comment">// should return true if found</span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                    }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                        <span class="keywordflow">return</span> <span class="keyword">false</span>;                                                   <span class="comment">// size is 0 of course it is not supported</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                    }</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                }</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            }<span class="comment"></span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment">            /// @brief Get A sorted (low to high) list of Parameters that are valid on all Axis</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment">            /// @details This is implemented using ValidAxis and ValidParamOnAxis, Derived versions of this class may wish to make a more specialized</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment">            /// implementation of this method that doesn&#39;t have the overhead of passing around many vectors by value and executing slow loops. Most</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment">            /// likely all of these constraint Parameter and axis functions could be replaced with some fairly simple switch statements and statically</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment">            /// coded values that are specific to the kind of constraint.</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment">            /// @return A Paramlist with the parameters valid on all axis.</span></div>
<div class="line"><a name="l00226"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#a5fe69702684146019db3e1d8a3999d2b">  226</a></span>&#160;<span class="comment"></span>            <span class="keyword">virtual</span> <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#ab434efbcfdfe803d6f7cc014e7794868" title="Used to Store lists of param for return types.">ParamList</a> ValidParams()<span class="keyword"> const</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="keyword">            </span>{</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#a58bc7d514090f3043c9f63f470ccc547" title="Used to Store lists of Int Axis for return types.">AxisList</a> AllAxis = this-&gt;ValidAxis();</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#ab434efbcfdfe803d6f7cc014e7794868" title="Used to Store lists of param for return types.">ParamList</a> Results;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                <span class="keywordflow">if</span>(AllAxis.size())                                              <span class="comment">//If we have no Axis, the we have no valid Parameters.</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                {</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                    Results = this-&gt;ValidParamOnAxis(*(AllAxis.begin()));       <span class="comment">// Let&#39;s start off with whatever the first Axis Support, then we will trim from here.</span></div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                    <span class="keywordflow">if</span>(AllAxis.size()&gt;1)                                        <span class="comment">//if the constraint only support one axis then we already have our answer, and we don&#39;t want to run of the end of the Paramlist</span></div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                    {</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                        <span class="keywordflow">for</span>(AxisList::iterator AxisIter = AllAxis.begin()+1; AllAxis.end()!=AxisIter; ++AxisIter)       <span class="comment">//For each axis after the first</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                        {</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                            <span class="keywordflow">for</span>(<span class="keywordtype">int</span> ParamID = Results.size(); ParamID&lt;=0; --ParamID)        <span class="comment">// We start at the back and work by index because reverse erase does no accept rever iterators, and</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                            {</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                                <span class="keywordflow">if</span> (!IsParamValidOnAxis(Results.at(ParamID),*AxisIter))     <span class="comment">// if an Item is erase near the beginning, it changes all the items after, making forward iteration logic that</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                                    { Results.erase( Results.begin()+ParamID ); }           <span class="comment">// erases needlessly complicated, and potentially expensive depending on the Vector implementation</span></div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                            }</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                        }</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                    }</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                }</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                sort(Results.begin(),Results.end());</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                <span class="keywordflow">return</span> Results;</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            }</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="comment">            /// @brief Provides override of constraint parameters.</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="comment">            /// @details Parameters such as ERP(Error Reduction Parameter) and CFM(Constraint Force Mixing) can be altered with this function.  Optionally provide axis.</span></div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="comment">            /// @param Param The parameter to override.</span></div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="comment">            /// @param Value The new value for the parameter.</span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="comment">            /// @param Axis Optional axis.</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="comment"></span>            <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetParam(<a class="code" href="namespaceMezzanine_1_1Physics.xhtml#aa640f4c4b2baf4a4039db76fd792d2c1" title="Used by constraints for setting some parameters.">ConstraintParam</a> Param, <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> Value, <span class="keywordtype">int</span> Axis=-1);<span class="comment"></span></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="comment">            /// @brief Gets value of constraint parameters.</span></div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="comment">            /// @details See SetParam() for clarification.  Gets information on constraint parameters.</span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="comment">            /// @param Para, The parameter to get information for.</span></div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="comment">            /// @param Axis Optional axis.</span></div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="comment">            /// @return Returns the value for the requested parameter.</span></div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="comment"></span>            <span class="keyword">virtual</span> <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> GetParam(<a class="code" href="namespaceMezzanine_1_1Physics.xhtml#aa640f4c4b2baf4a4039db76fd792d2c1" title="Used by constraints for setting some parameters.">ConstraintParam</a> Param, <span class="keywordtype">int</span> Axis=-1) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="comment">            /// @brief Get the Bullet constraint that this class encapsulates.</span></div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="comment">            /// @return A pointer to the btTypedConstraint that stores the underlying constraint.</span></div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="comment"></span>            <span class="keyword">virtual</span> btTypedConstraint* GetConstraintBase() <span class="keyword">const</span> = 0;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="comment">            ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="comment"></span>            <span class="comment">// Constraint Serialization</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="comment">            /// @brief Convert this class to an XML::Node ready for serialization</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="comment">            /// @param CurrentRoot The point in the XML hierarchy that all this vectorw should be appended to.</span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="comment">            /// @details This stores each Actor&#39;s name and every constraint parameter on each if it has been set.</span></div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="comment">            /// This should allow for looking up the required actors in the Actor Manager. This should also prevent</span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="comment">            /// any interference with different values and minimize the size of the serialized version</span></div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="comment"></span>            <span class="keyword">virtual</span> <span class="keywordtype">void</span> ProtoSerialize(<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">XML::Node</a>&amp; CurrentRoot) <span class="keyword">const</span>;<span class="comment"></span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="comment">            /// @brief Take the data stored in an XML and overwrite this instance of this object with it</span></div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="comment">            /// @param OneNode and XML::Node containing the data.</span></div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="comment">            /// @details This should only be run once all the actors have finishes being deserialized. This will fail</span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="comment">            /// if the actors it expects are not present.</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="comment"></span>            <span class="keyword">virtual</span> <span class="keywordtype">void</span> ProtoDeSerialize(<span class="keyword">const</span> <a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">XML::Node</a>&amp; OneNode);<span class="comment"></span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="comment">            /// @brief Get the name of the the XML tag this class will leave behind as its instances are serialized.</span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="comment">            /// @return A string containing &quot;Constraint&quot;</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="comment"></span>            <span class="keyword">static</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a> SerializableName();</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        };<span class="comment">//Constraint</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    }<span class="comment">//Physics</span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;}<span class="comment">//Mezzanine</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="comment">///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="comment"></span><span class="comment">// Class External &lt;&lt; Operators for streaming or assignment</span></div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="comment">/// @brief Convert a constraint to XML and send it down a stream.</span></div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="comment">/// @param stream The stream to send it down.</span></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="comment">/// @param x The constraint to send down.</span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="comment">/// @return This returns the output stream to allow operator chaining.</span></div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="comment"></span>std::ostream&amp; <a class="code" href="crossplatformexport_8h.xhtml#a455f91aab9e6a1cf4286f5cdfa74c7bc" title="Some platforms require special decorations to denote what is exported/imported in a share library...">MEZZ_LIB</a> operator &lt;&lt; (std::ostream&amp; stream, <span class="keyword">const</span> <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml" title="This is the base class for all constraints supported.">Mezzanine::Physics::Constraint</a>&amp; x);<span class="comment"></span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="comment">/// @brief Get a constraint from an XML stream.</span></div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="comment">/// @param stream The stream to get it out of.</span></div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="comment">/// @param x The it you will get out of the stream.</span></div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="comment">/// @return This returns the input stream to allow operator chaining.</span></div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;<span class="comment"></span>std::istream&amp; <a class="code" href="crossplatformexport_8h.xhtml#a455f91aab9e6a1cf4286f5cdfa74c7bc" title="Some platforms require special decorations to denote what is exported/imported in a share library...">MEZZ_LIB</a> operator &gt;&gt; (std::istream&amp; stream, <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml" title="This is the base class for all constraints supported.">Mezzanine::Physics::Constraint</a>&amp; x);<span class="comment"></span></div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="comment">/// @brief Converts an XML Node into a functional in memory construct.</span></div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="comment">/// @param OneNode The xml node that contains the deserialize class instance.</span></div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="comment">/// @param x The class instance to overwrite witht the proto serialized version in the node.</span></div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="comment"></span><span class="keywordtype">void</span> operator &gt;&gt; (<span class="keyword">const</span> <a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">Mezzanine::XML::Node</a>&amp; OneNode, <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml" title="This is the base class for all constraints supported.">Mezzanine::Physics::Constraint</a>&amp; x);</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="preprocessor">#endif</span></div>
</div><!-- fragment --></div><!-- contents -->
<hr class="footer"/><address class="footer"><small>
Generated on Fri Sep 13 2013 23:29:51 for MezzanineEngine by&#160;<a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1</small></address>
</body>
</html>
