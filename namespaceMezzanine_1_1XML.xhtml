<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Mezzanine::XML Namespace Reference</title>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="DoxyStyle.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script> 
</head>
<body onload='searchBox.OnSelectItem(0);'>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;" nowrap="nowrap">
   <div id="projectname"><a href="http://blacktoppstudios.com"><img src="logogreen100pxtall.png"/></a>MezzanineEngine&#160;<span id="projectnumber">September&nbsp;15,&nbsp;2013</span></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li class="current"><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="namespaces.xhtml"><span>Namespace&#160;List</span></a></li>
      <li><a href="namespacemembers.xhtml"><span>Namespace&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceMezzanine.xhtml">Mezzanine</a></li><li class="navelem"><a class="el" href="namespaceMezzanine_1_1XML.xhtml">XML</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">Mezzanine::XML Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>All tools for working with <a class="el" href="namespaceMezzanine_1_1XML.xhtml" title="All tools for working with XML are located in this namespace.">XML</a> are located in this namespace.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1Attribute.xhtml">Attribute</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A light-weight handle for manipulating attributes in DOM tree.  <a href="classMezzanine_1_1XML_1_1Attribute.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1AttributeIterator.xhtml">AttributeIterator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classMezzanine_1_1XML_1_1Attribute.xhtml" title="A light-weight handle for manipulating attributes in DOM tree.">Attribute</a> iterator (a bidirectional iterator over a collection of <a class="el" href="classMezzanine_1_1XML_1_1Attribute.xhtml" title="A light-weight handle for manipulating attributes in DOM tree.">Attribute</a>).  <a href="classMezzanine_1_1XML_1_1AttributeIterator.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1Document.xhtml">Document</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">The root node of any xml hierarchy is a <a class="el" href="classMezzanine_1_1XML_1_1Document.xhtml">Document</a>.  <a href="classMezzanine_1_1XML_1_1Document.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1NamedNodeIterator.xhtml">NamedNodeIterator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Child node iterator (a forward iterator over a collection of <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml">Node</a>) only iterates over nodes with a given name.  <a href="classMezzanine_1_1XML_1_1NamedNodeIterator.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml">Node</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A light-weight handle for manipulating nodes in DOM tree.  <a href="classMezzanine_1_1XML_1_1Node.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml">NodeIterator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Child node iterator (a bidirectional iterator over a collection of <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml">Node</a>)  <a href="classMezzanine_1_1XML_1_1NodeIterator.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1NodeText.xhtml">NodeText</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A helper for working with text inside PCDATA nodes.  <a href="classMezzanine_1_1XML_1_1NodeText.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1ObjectRange.xhtml">ObjectRange</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Used by the xml system to pass around iterable ranges.  <a href="classMezzanine_1_1XML_1_1ObjectRange.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1XML_1_1ParseResult.xhtml">ParseResult</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Troubleshooting data intended to help troublshoot <a class="el" href="namespaceMezzanine_1_1XML.xhtml" title="All tools for working with XML are located in this namespace.">XML</a> parsing errors.  <a href="structMezzanine_1_1XML_1_1ParseResult.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1TreeWalker.xhtml">TreeWalker</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Used to call a function OnEachNode member of the subtree of nodes descended from a specific node.  <a href="classMezzanine_1_1XML_1_1TreeWalker.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1Writer.xhtml">Writer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for node printing (see <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml#aef52a586c2e21dce71397f3400c61b72">Node::Print</a>)  <a href="classMezzanine_1_1XML_1_1Writer.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1WriterFile.xhtml">WriterFile</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An implementation of <a class="el" href="classMezzanine_1_1XML_1_1Writer.xhtml">Writer</a> intended for writing to FILEs as defined in stdio.  <a href="classMezzanine_1_1XML_1_1WriterFile.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1WriterStream.xhtml">WriterStream</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An implementation of <a class="el" href="classMezzanine_1_1XML_1_1Writer.xhtml">Writer</a> intended for writing std::ostreams.  <a href="classMezzanine_1_1XML_1_1WriterStream.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1XMLStreamWrapper.xhtml">XMLStreamWrapper</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This represents a simple wrapper that makes data streams compatible with the <a class="el" href="namespaceMezzanine_1_1XML.xhtml" title="All tools for working with XML are located in this namespace.">XML</a> API.  <a href="classMezzanine_1_1XML_1_1XMLStreamWrapper.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1XPathNode.xhtml">XPathNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An XPath node which can store handles to a <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">XML::Node</a> or an <a class="el" href="classMezzanine_1_1XML_1_1Attribute.xhtml" title="A light-weight handle for manipulating attributes in DOM tree.">XML::Attribute</a>.  <a href="classMezzanine_1_1XML_1_1XPathNode.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1XPathNodeSet.xhtml">XPathNodeSet</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A fixed sized collection of nodes that an <a class="el" href="classMezzanine_1_1XML_1_1XPathQuery.xhtml" title="A compiled XPath query object.">XPathQuery</a> can work on.  <a href="classMezzanine_1_1XML_1_1XPathNodeSet.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1XML_1_1XPathParseResult.xhtml">XPathParseResult</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">XPath parsing result.  <a href="structMezzanine_1_1XML_1_1XPathParseResult.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1XPathQuery.xhtml">XPathQuery</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A compiled XPath query object.  <a href="classMezzanine_1_1XML_1_1XPathQuery.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1XPathVariable.xhtml">XPathVariable</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A single XPath variable.  <a href="classMezzanine_1_1XML_1_1XPathVariable.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1XPathVariableSet.xhtml">XPathVariableSet</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A set of XPath variables.  <a href="classMezzanine_1_1XML_1_1XPathVariableSet.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:a9a0f7f810d3209e6e749d338677dfa3f"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a9a0f7f810d3209e6e749d338677dfa3f"></a>
typedef void *(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1XML.xhtml#a9a0f7f810d3209e6e749d338677dfa3f">AllocationFunction</a> )(size_t size)</td></tr>
<tr class="memdesc:a9a0f7f810d3209e6e749d338677dfa3f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Memory allocation function interface; returns pointer to allocated memory or NULL on failure. <br/></td></tr>
<tr class="separator:a9a0f7f810d3209e6e749d338677dfa3f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e47bf5bc2198df53e81e5b01174b3e8"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a4e47bf5bc2198df53e81e5b01174b3e8"></a>
typedef void(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1XML.xhtml#a4e47bf5bc2198df53e81e5b01174b3e8">DeAllocationFunction</a> )(void *ptr)</td></tr>
<tr class="memdesc:a4e47bf5bc2198df53e81e5b01174b3e8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function pointer type for a memory deallocation function interface. <br/></td></tr>
<tr class="separator:a4e47bf5bc2198df53e81e5b01174b3e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:a77aa299731a2a63d9bab92cf6f03b057"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1XML.xhtml#a77aa299731a2a63d9bab92cf6f03b057">Encoding</a> { <br/>
&#160;&#160;<a class="el" href="namespaceMezzanine_1_1XML.xhtml#a77aa299731a2a63d9bab92cf6f03b057aae3f2f76c60cf95820362667965d1990">EncodingAuto</a>, 
<a class="el" href="namespaceMezzanine_1_1XML.xhtml#a77aa299731a2a63d9bab92cf6f03b057a47447ddf92c92868e9115b5dcf6092d1">EncodingUTF8</a>, 
<a class="el" href="namespaceMezzanine_1_1XML.xhtml#a77aa299731a2a63d9bab92cf6f03b057a13449f09ab31146984e3f5cd43b1d3fd">EncodingUTF16LE</a>, 
<a class="el" href="namespaceMezzanine_1_1XML.xhtml#a77aa299731a2a63d9bab92cf6f03b057a3fc5628fb81369275e03664f1f26667f">EncodingUTF16BE</a>, 
<br/>
&#160;&#160;<a class="el" href="namespaceMezzanine_1_1XML.xhtml#a77aa299731a2a63d9bab92cf6f03b057a410ff19e5466aeee0b1084e6bf91bd6c">EncodingUTF16</a>, 
<a class="el" href="namespaceMezzanine_1_1XML.xhtml#a77aa299731a2a63d9bab92cf6f03b057afde999273ac8cb7f044b64d518e206c4">EncodingUTF32LE</a>, 
<a class="el" href="namespaceMezzanine_1_1XML.xhtml#a77aa299731a2a63d9bab92cf6f03b057add35c37710cbc111e2c88b5937530999">EncodingUTF32BE</a>, 
<a class="el" href="namespaceMezzanine_1_1XML.xhtml#a77aa299731a2a63d9bab92cf6f03b057a1ea901ebdaece078055b28d6044d7679">EncodingUTF32</a>, 
<br/>
&#160;&#160;<a class="el" href="namespaceMezzanine_1_1XML.xhtml#a77aa299731a2a63d9bab92cf6f03b057a7f4c51adc1f5fe97b98477262fc0c75b">Encodingwchar_t</a>, 
<a class="el" href="namespaceMezzanine_1_1XML.xhtml#a77aa299731a2a63d9bab92cf6f03b057acd3c0d0ed6de0f825a456d89024fc5d7">EncodingLatin1</a>
<br/>
 }</td></tr>
<tr class="memdesc:a77aa299731a2a63d9bab92cf6f03b057"><td class="mdescLeft">&#160;</td><td class="mdescRight">These flags determine the encoding of input data for an XML document.  <a href="namespaceMezzanine_1_1XML.xhtml#a77aa299731a2a63d9bab92cf6f03b057">More...</a><br/></td></tr>
<tr class="separator:a77aa299731a2a63d9bab92cf6f03b057"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79dc84831ed2506631fb4adeb899564a"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1XML.xhtml#a79dc84831ed2506631fb4adeb899564a">NodeType</a> { <br/>
&#160;&#160;<a class="el" href="namespaceMezzanine_1_1XML.xhtml#a79dc84831ed2506631fb4adeb899564aa60a33314a9e01903ac516fabdbccf1f6">NodeNull</a>, 
<a class="el" href="namespaceMezzanine_1_1XML.xhtml#a79dc84831ed2506631fb4adeb899564aa1057f046d19c42519322193a87fb0ce6">NodeDocument</a>, 
<a class="el" href="namespaceMezzanine_1_1XML.xhtml#a79dc84831ed2506631fb4adeb899564aa0460269885b6d435d76d62374780232c">NodeElement</a>, 
<a class="el" href="namespaceMezzanine_1_1XML.xhtml#a79dc84831ed2506631fb4adeb899564aa5611c39a6ed312b0aedb55ee4f1aaf78">NodePcdata</a>, 
<br/>
&#160;&#160;<a class="el" href="namespaceMezzanine_1_1XML.xhtml#a79dc84831ed2506631fb4adeb899564aa497686cf05c2f6472bef7b46965ac32c">NodeCdata</a>, 
<a class="el" href="namespaceMezzanine_1_1XML.xhtml#a79dc84831ed2506631fb4adeb899564aad49fcbae52d40cca7aecbb34a90ba76f">NodeComment</a>, 
<a class="el" href="namespaceMezzanine_1_1XML.xhtml#a79dc84831ed2506631fb4adeb899564aaa3c062de3c4857d39596ee2e61d85427">NodePi</a>, 
<a class="el" href="namespaceMezzanine_1_1XML.xhtml#a79dc84831ed2506631fb4adeb899564aa7074acbee9f2436f766e6cdf2190a886">NodeDeclaration</a>, 
<br/>
&#160;&#160;<a class="el" href="namespaceMezzanine_1_1XML.xhtml#a79dc84831ed2506631fb4adeb899564aa4da7db64f3a4473b09d653fd5c0cdd0e">NodeDocType</a>
<br/>
 }</td></tr>
<tr class="memdesc:a79dc84831ed2506631fb4adeb899564a"><td class="mdescLeft">&#160;</td><td class="mdescRight">The types of nodes that could be in the XML Tree.  <a href="namespaceMezzanine_1_1XML.xhtml#a79dc84831ed2506631fb4adeb899564a">More...</a><br/></td></tr>
<tr class="separator:a79dc84831ed2506631fb4adeb899564a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25d44cacbf75a9d031eae1baa9481442"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1XML.xhtml#a25d44cacbf75a9d031eae1baa9481442">ParseStatus</a> { <br/>
&#160;&#160;<a class="el" href="namespaceMezzanine_1_1XML.xhtml#a25d44cacbf75a9d031eae1baa9481442a87afd3113f6eb1d3e4e0b38e7bc84200">StatusOk</a> = 0, 
<a class="el" href="namespaceMezzanine_1_1XML.xhtml#a25d44cacbf75a9d031eae1baa9481442a4795805480ef2801b4d97c8852382878">StatusFileNotFound</a>, 
<a class="el" href="namespaceMezzanine_1_1XML.xhtml#a25d44cacbf75a9d031eae1baa9481442a67f5e35b57b60456d37e9567418611e6">StatusIOError</a>, 
<a class="el" href="namespaceMezzanine_1_1XML.xhtml#a25d44cacbf75a9d031eae1baa9481442a0ce883f736c91386de54a8d7d16f2938">StatusOutOfMemory</a>, 
<br/>
&#160;&#160;<a class="el" href="namespaceMezzanine_1_1XML.xhtml#a25d44cacbf75a9d031eae1baa9481442a0fefc2fc9e43d776e9f17f4d4c5da4ca">StatusInternalError</a>, 
<a class="el" href="namespaceMezzanine_1_1XML.xhtml#a25d44cacbf75a9d031eae1baa9481442a0b867566188e960394f43c76c27406e9">StatusUnrecognizedTag</a>, 
<a class="el" href="namespaceMezzanine_1_1XML.xhtml#a25d44cacbf75a9d031eae1baa9481442a72a5f04861f3e2c376dff027599a7471">StatusBadProcessingInstruction</a>, 
<a class="el" href="namespaceMezzanine_1_1XML.xhtml#a25d44cacbf75a9d031eae1baa9481442a70bb9abb96dc2e3b950c2c4b920a71d1">StatusBadComment</a>, 
<br/>
&#160;&#160;<a class="el" href="namespaceMezzanine_1_1XML.xhtml#a25d44cacbf75a9d031eae1baa9481442a25263332176621ee359ac1fe62090e5f">StatusBadCdata</a>, 
<a class="el" href="namespaceMezzanine_1_1XML.xhtml#a25d44cacbf75a9d031eae1baa9481442a7866bef43180138fa0b155fce04faa38">StatusBadDocType</a>, 
<a class="el" href="namespaceMezzanine_1_1XML.xhtml#a25d44cacbf75a9d031eae1baa9481442a9ade5a701b5900d0031b03bf96c81f66">StatusBadPcdata</a>, 
<a class="el" href="namespaceMezzanine_1_1XML.xhtml#a25d44cacbf75a9d031eae1baa9481442a72b16313f09beb14c33f0b4b61733a1a">StatusBadStartElement</a>, 
<br/>
&#160;&#160;<a class="el" href="namespaceMezzanine_1_1XML.xhtml#a25d44cacbf75a9d031eae1baa9481442ae78936dff77e1c308cd71d486eb9c8af">StatusBadAttribute</a>, 
<a class="el" href="namespaceMezzanine_1_1XML.xhtml#a25d44cacbf75a9d031eae1baa9481442acf8dcb09968a7fc6ec594f7a13ea07aa">StatusBadEndElement</a>, 
<a class="el" href="namespaceMezzanine_1_1XML.xhtml#a25d44cacbf75a9d031eae1baa9481442aa5fe77480fe0be88f610722b627bac75">StatusEndElementMismatch</a>
<br/>
 }</td></tr>
<tr class="memdesc:a25d44cacbf75a9d031eae1baa9481442"><td class="mdescLeft">&#160;</td><td class="mdescRight">These statuses are used to help determine what issues, if any the parser had. Returned by <a class="el" href="structMezzanine_1_1XML_1_1ParseResult.xhtml">Mezzanine::XML::ParseResult</a> instances.  <a href="namespaceMezzanine_1_1XML.xhtml#a25d44cacbf75a9d031eae1baa9481442">More...</a><br/></td></tr>
<tr class="separator:a25d44cacbf75a9d031eae1baa9481442"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9bd26a1f9b2d49df236a663038cd77ee"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1XML.xhtml#a9bd26a1f9b2d49df236a663038cd77ee">XPathValueType</a> { <br/>
&#160;&#160;<a class="el" href="namespaceMezzanine_1_1XML.xhtml#a9bd26a1f9b2d49df236a663038cd77eea91b9ca43602bfd3faad0e3cc6a641442">XPathTypeNone</a>, 
<a class="el" href="namespaceMezzanine_1_1XML.xhtml#a9bd26a1f9b2d49df236a663038cd77eeada8c2839f448b6393811a01e8c735b16">XPathTypeNodeSet</a>, 
<a class="el" href="namespaceMezzanine_1_1XML.xhtml#a9bd26a1f9b2d49df236a663038cd77eeaa9e63bb1a0f8538b26dd994ba6353758">XPathTypeNumber</a>, 
<a class="el" href="namespaceMezzanine_1_1XML.xhtml#a9bd26a1f9b2d49df236a663038cd77eeae324e3275db7af01393dc81c08ec994b">XPathTypeString</a>, 
<br/>
&#160;&#160;<a class="el" href="namespaceMezzanine_1_1XML.xhtml#a9bd26a1f9b2d49df236a663038cd77eea49338d031ceb0542373b37fe07efa1e6">XPathTypeBoolean</a>
<br/>
 }</td></tr>
<tr class="memdesc:a9bd26a1f9b2d49df236a663038cd77ee"><td class="mdescLeft">&#160;</td><td class="mdescRight">XPathQuery return type.  <a href="namespaceMezzanine_1_1XML.xhtml#a9bd26a1f9b2d49df236a663038cd77ee">More...</a><br/></td></tr>
<tr class="separator:a9bd26a1f9b2d49df236a663038cd77ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:af07113f07f5ee0d9186f493414fa34b9"><td class="memItemLeft" align="right" valign="top">std::basic_string&lt; char, <br class="typebreak"/>
std::char_traits&lt; char &gt;<br class="typebreak"/>
, std::allocator&lt; char &gt;<br class="typebreak"/>
 &gt; <a class="el" href="crossplatformexport_8h.xhtml#a455f91aab9e6a1cf4286f5cdfa74c7bc">MEZZ_LIB</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1XML.xhtml#af07113f07f5ee0d9186f493414fa34b9">AsUtf8</a> (const wchar_t *str)</td></tr>
<tr class="memdesc:af07113f07f5ee0d9186f493414fa34b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a c-style string of wchar_t to std::string containing UTF8.  <a href="#af07113f07f5ee0d9186f493414fa34b9">More...</a><br/></td></tr>
<tr class="separator:af07113f07f5ee0d9186f493414fa34b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9dcf66b8474f939672f8f0daba98aeaa"><td class="memItemLeft" align="right" valign="top">std::basic_string&lt; char, <br class="typebreak"/>
std::char_traits&lt; char &gt;<br class="typebreak"/>
, std::allocator&lt; char &gt;<br class="typebreak"/>
 &gt; <a class="el" href="crossplatformexport_8h.xhtml#a455f91aab9e6a1cf4286f5cdfa74c7bc">MEZZ_LIB</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1XML.xhtml#a9dcf66b8474f939672f8f0daba98aeaa">AsUtf8</a> (const std::basic_string&lt; wchar_t, std::char_traits&lt; wchar_t &gt;, std::allocator&lt; wchar_t &gt; &gt; &amp;str)</td></tr>
<tr class="memdesc:a9dcf66b8474f939672f8f0daba98aeaa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a std::wstring to a UTF8 std::string.  <a href="#a9dcf66b8474f939672f8f0daba98aeaa">More...</a><br/></td></tr>
<tr class="separator:a9dcf66b8474f939672f8f0daba98aeaa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ace1a5a6d631f9cf0df133aaba8cc8c57"><td class="memItemLeft" align="right" valign="top">std::basic_string&lt; wchar_t, <br class="typebreak"/>
std::char_traits&lt; wchar_t &gt;<br class="typebreak"/>
, std::allocator&lt; wchar_t &gt;<br class="typebreak"/>
 &gt; <a class="el" href="crossplatformexport_8h.xhtml#a455f91aab9e6a1cf4286f5cdfa74c7bc">MEZZ_LIB</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1XML.xhtml#ace1a5a6d631f9cf0df133aaba8cc8c57">AsWide</a> (const char *str)</td></tr>
<tr class="memdesc:ace1a5a6d631f9cf0df133aaba8cc8c57"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a Convert a c-style string to std::wstring containing native encoding (Usually UCS2 on windows and UTF32 on Linux/Mac).  <a href="#ace1a5a6d631f9cf0df133aaba8cc8c57">More...</a><br/></td></tr>
<tr class="separator:ace1a5a6d631f9cf0df133aaba8cc8c57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7725ffc596adcc1e4c1b491f1a3efad2"><td class="memItemLeft" align="right" valign="top">std::basic_string&lt; wchar_t, <br class="typebreak"/>
std::char_traits&lt; wchar_t &gt;<br class="typebreak"/>
, std::allocator&lt; wchar_t &gt;<br class="typebreak"/>
 &gt; <a class="el" href="crossplatformexport_8h.xhtml#a455f91aab9e6a1cf4286f5cdfa74c7bc">MEZZ_LIB</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1XML.xhtml#a7725ffc596adcc1e4c1b491f1a3efad2">AsWide</a> (const std::basic_string&lt; char, std::char_traits&lt; char &gt;, std::allocator&lt; char &gt; &gt; &amp;str)</td></tr>
<tr class="memdesc:a7725ffc596adcc1e4c1b491f1a3efad2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a Convert a std::string to std::wstring containing native encoding (Usually UCS2 on windows and UTF32 on Linux/Mac).  <a href="#a7725ffc596adcc1e4c1b491f1a3efad2">More...</a><br/></td></tr>
<tr class="separator:a7725ffc596adcc1e4c1b491f1a3efad2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a80fe6c59a5a1501f15802ff7ceb0d2fb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1XML.xhtml#a80fe6c59a5a1501f15802ff7ceb0d2fb">EscapeXML</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;XMLText)</td></tr>
<tr class="memdesc:a80fe6c59a5a1501f15802ff7ceb0d2fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert &lt; &gt; &amp; and " in text to &amp;lt;, &amp;gt;, &amp;amp; and &amp;quote so text can safely be stored in <a class="el" href="namespaceMezzanine_1_1XML.xhtml" title="All tools for working with XML are located in this namespace.">XML</a>.  <a href="#a80fe6c59a5a1501f15802ff7ceb0d2fb">More...</a><br/></td></tr>
<tr class="separator:a80fe6c59a5a1501f15802ff7ceb0d2fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae5f4e4d0fa23d1567c5b28d23cb534cd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceMezzanine_1_1XML.xhtml#a9a0f7f810d3209e6e749d338677dfa3f">AllocationFunction</a> <a class="el" href="crossplatformexport_8h.xhtml#a455f91aab9e6a1cf4286f5cdfa74c7bc">MEZZ_LIB</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1XML.xhtml#ae5f4e4d0fa23d1567c5b28d23cb534cd">GetMemoryAllocationFunction</a> ()</td></tr>
<tr class="memdesc:ae5f4e4d0fa23d1567c5b28d23cb534cd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the current allocation funciton.  <a href="#ae5f4e4d0fa23d1567c5b28d23cb534cd">More...</a><br/></td></tr>
<tr class="separator:ae5f4e4d0fa23d1567c5b28d23cb534cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29489f570c35337d137e8c5daae27611"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceMezzanine_1_1XML.xhtml#a4e47bf5bc2198df53e81e5b01174b3e8">DeAllocationFunction</a> <a class="el" href="crossplatformexport_8h.xhtml#a455f91aab9e6a1cf4286f5cdfa74c7bc">MEZZ_LIB</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1XML.xhtml#a29489f570c35337d137e8c5daae27611">GetMemoryDeallocationFunction</a> ()</td></tr>
<tr class="memdesc:a29489f570c35337d137e8c5daae27611"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the current allocation funciton.  <a href="#a29489f570c35337d137e8c5daae27611">More...</a><br/></td></tr>
<tr class="separator:a29489f570c35337d137e8c5daae27611"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a230007eaf534ce57ad58f440a7a89b6c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1XML.xhtml#a230007eaf534ce57ad58f440a7a89b6c">GetOneTag</a> (std::istream &amp;stream)</td></tr>
<tr class="memdesc:a230007eaf534ce57ad58f440a7a89b6c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the first tag out of the Stream and returns it as a String.  <a href="#a230007eaf534ce57ad58f440a7a89b6c">More...</a><br/></td></tr>
<tr class="separator:a230007eaf534ce57ad58f440a7a89b6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7626fd39b806cbb7b34ff375b341ee5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1XML_1_1Document.xhtml">Document</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1XML.xhtml#ac7626fd39b806cbb7b34ff375b341ee5">PreParseClassFromSingleTag</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;NameSpace, const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;ClassName, const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;OneTag)</td></tr>
<tr class="memdesc:ac7626fd39b806cbb7b34ff375b341ee5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Perform a basic series of checks for extracting meaning from a single xml tag.  <a href="#ac7626fd39b806cbb7b34ff375b341ee5">More...</a><br/></td></tr>
<tr class="separator:ac7626fd39b806cbb7b34ff375b341ee5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4713b805136e4a66e55422f2efd8f0d9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1XML_1_1Document.xhtml">Document</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1XML.xhtml#a4713b805136e4a66e55422f2efd8f0d9">PreParseClassFromSingleTag</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;ClassName, const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;OneTag)</td></tr>
<tr class="memdesc:a4713b805136e4a66e55422f2efd8f0d9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calls PreParseClassFromSingleTag passing a "" as the Namespace.  <a href="#a4713b805136e4a66e55422f2efd8f0d9">More...</a><br/></td></tr>
<tr class="separator:a4713b805136e4a66e55422f2efd8f0d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1fa0e03dade4db112e8f6d015163ace4"><td class="memItemLeft" align="right" valign="top">void <a class="el" href="crossplatformexport_8h.xhtml#a455f91aab9e6a1cf4286f5cdfa74c7bc">MEZZ_LIB</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1XML.xhtml#a1fa0e03dade4db112e8f6d015163ace4">SetMemoryManagementFunctions</a> (<a class="el" href="namespaceMezzanine_1_1XML.xhtml#a9a0f7f810d3209e6e749d338677dfa3f">AllocationFunction</a> allocate, <a class="el" href="namespaceMezzanine_1_1XML.xhtml#a4e47bf5bc2198df53e81e5b01174b3e8">DeAllocationFunction</a> deallocate)</td></tr>
<tr class="memdesc:a1fa0e03dade4db112e8f6d015163ace4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override default memory management functions. All subsequent allocations/deallocations will be performed via supplied functions.  <a href="#a1fa0e03dade4db112e8f6d015163ace4">More...</a><br/></td></tr>
<tr class="separator:a1fa0e03dade4db112e8f6d015163ace4"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:a9a9b9245ea32348c78817d002ecd61fc"><td class="memItemLeft" align="right" valign="top">const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1XML.xhtml#a9a9b9245ea32348c78817d002ecd61fc">FormatDefault</a> = <a class="el" href="namespaceMezzanine_1_1XML.xhtml#a113ddc3c498f17dde89bce5b7ceb5661">FormatRaw</a></td></tr>
<tr class="memdesc:a9a9b9245ea32348c78817d002ecd61fc"><td class="mdescLeft">&#160;</td><td class="mdescRight">The default set of formatting flags. Only FormatRaw is enabled.  <a href="#a9a9b9245ea32348c78817d002ecd61fc">More...</a><br/></td></tr>
<tr class="separator:a9a9b9245ea32348c78817d002ecd61fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c0eb20115e575906a663bc7fe5ba356"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a8c0eb20115e575906a663bc7fe5ba356"></a>
const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1XML.xhtml#a8c0eb20115e575906a663bc7fe5ba356">FormatIndent</a> = 0x01</td></tr>
<tr class="memdesc:a8c0eb20115e575906a663bc7fe5ba356"><td class="mdescLeft">&#160;</td><td class="mdescRight">Indent the nodes that are written to output stream with as many indentation strings as deep the node is in DOM tree. This flag is off by default. <br/></td></tr>
<tr class="separator:a8c0eb20115e575906a663bc7fe5ba356"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a965e10fd6db7e52461671ce5a05da1e6"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a965e10fd6db7e52461671ce5a05da1e6"></a>
const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1XML.xhtml#a965e10fd6db7e52461671ce5a05da1e6">FormatNoDeclaration</a> = 0x08</td></tr>
<tr class="memdesc:a965e10fd6db7e52461671ce5a05da1e6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Omit default <a class="el" href="namespaceMezzanine_1_1XML.xhtml" title="All tools for working with XML are located in this namespace.">XML</a> declaration even if there is no declaration in the document. This flag is off by default. <br/></td></tr>
<tr class="separator:a965e10fd6db7e52461671ce5a05da1e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c62c89a322e80ecda0682755ef2a825"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a3c62c89a322e80ecda0682755ef2a825"></a>
const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1XML.xhtml#a3c62c89a322e80ecda0682755ef2a825">FormatNoEscapes</a> = 0x10</td></tr>
<tr class="memdesc:a3c62c89a322e80ecda0682755ef2a825"><td class="mdescLeft">&#160;</td><td class="mdescRight">Don't escape GetAttribute Values and PCDATA contents. This flag is off by default. <br/></td></tr>
<tr class="separator:a3c62c89a322e80ecda0682755ef2a825"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a113ddc3c498f17dde89bce5b7ceb5661"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a113ddc3c498f17dde89bce5b7ceb5661"></a>
const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1XML.xhtml#a113ddc3c498f17dde89bce5b7ceb5661">FormatRaw</a> = 0x04</td></tr>
<tr class="memdesc:a113ddc3c498f17dde89bce5b7ceb5661"><td class="mdescLeft">&#160;</td><td class="mdescRight">Use raw output mode (no indentation and no line breaks are written). This flag is on by default. <br/></td></tr>
<tr class="separator:a113ddc3c498f17dde89bce5b7ceb5661"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba51fb162156123758bf5e06f122ab76"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aba51fb162156123758bf5e06f122ab76"></a>
const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1XML.xhtml#aba51fb162156123758bf5e06f122ab76">FormatSaveFileText</a> = 0x20</td></tr>
<tr class="memdesc:aba51fb162156123758bf5e06f122ab76"><td class="mdescLeft">&#160;</td><td class="mdescRight">Open file using text mode in <a class="el" href="classMezzanine_1_1XML_1_1Document.xhtml#a42feffdea66cc25d48fbc81eff21268e" title="Save XML to file.">XML::Document::SaveFile</a>. This enables special character (i.e. new-line) conversions on some systems. This flag is off by default. <br/></td></tr>
<tr class="separator:aba51fb162156123758bf5e06f122ab76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38a1aa387d54f0386ed79a0b04bee1e4"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a38a1aa387d54f0386ed79a0b04bee1e4"></a>
const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1XML.xhtml#a38a1aa387d54f0386ed79a0b04bee1e4">FormatWriteBom</a> = 0x02</td></tr>
<tr class="memdesc:a38a1aa387d54f0386ed79a0b04bee1e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Write encoding-specific Byte Order Mark (BOM) to the output stream. This flag is off by default. <br/></td></tr>
<tr class="separator:a38a1aa387d54f0386ed79a0b04bee1e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4504643b4b1ad4cd0ed85fb42b25e1a4"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a4504643b4b1ad4cd0ed85fb42b25e1a4"></a>
const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1XML.xhtml#a4504643b4b1ad4cd0ed85fb42b25e1a4">ParseCdata</a> = 0x0004</td></tr>
<tr class="memdesc:a4504643b4b1ad4cd0ed85fb42b25e1a4"><td class="mdescLeft">&#160;</td><td class="mdescRight">This flag determines if CDATA sections (NodeCdata) are added to the DOM tree. This flag is on by default. <br/></td></tr>
<tr class="separator:a4504643b4b1ad4cd0ed85fb42b25e1a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa47eb6ac501513239cda4ff7b23f6786"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aa47eb6ac501513239cda4ff7b23f6786"></a>
const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1XML.xhtml#aa47eb6ac501513239cda4ff7b23f6786">ParseComments</a> = 0x0002</td></tr>
<tr class="memdesc:aa47eb6ac501513239cda4ff7b23f6786"><td class="mdescLeft">&#160;</td><td class="mdescRight">This flag determines if comments (NodeComment) are added to the DOM tree. This flag is off by default. <br/></td></tr>
<tr class="separator:aa47eb6ac501513239cda4ff7b23f6786"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f36bcf2332a3393c6bb437f080e7468"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a8f36bcf2332a3393c6bb437f080e7468"></a>
const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1XML.xhtml#a8f36bcf2332a3393c6bb437f080e7468">ParseDeclaration</a> = 0x0100</td></tr>
<tr class="memdesc:a8f36bcf2332a3393c6bb437f080e7468"><td class="mdescLeft">&#160;</td><td class="mdescRight">This flag determines if document declaration (NodeDeclaration) is added to the DOM tree. This flag is off by default. <br/></td></tr>
<tr class="separator:a8f36bcf2332a3393c6bb437f080e7468"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a01d29dc9a004027ae57e863313c23c21"><td class="memItemLeft" align="right" valign="top">const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1XML.xhtml#a01d29dc9a004027ae57e863313c23c21">ParseDefault</a> = <a class="el" href="namespaceMezzanine_1_1XML.xhtml#a4504643b4b1ad4cd0ed85fb42b25e1a4">ParseCdata</a> | <a class="el" href="namespaceMezzanine_1_1XML.xhtml#ad8eec3ecbd62fc333bd51abf0e0d4031">ParseEscapes</a> | <a class="el" href="namespaceMezzanine_1_1XML.xhtml#a06f0f3c1d26e2fb874d50d5ac48a0937">ParseWconvAttribute</a> | <a class="el" href="namespaceMezzanine_1_1XML.xhtml#a3f5fea4e887be7ff1796b8a1150f1f0a">ParseEol</a></td></tr>
<tr class="memdesc:a01d29dc9a004027ae57e863313c23c21"><td class="mdescLeft">&#160;</td><td class="mdescRight">The default parsing mode.  <a href="#a01d29dc9a004027ae57e863313c23c21">More...</a><br/></td></tr>
<tr class="separator:a01d29dc9a004027ae57e863313c23c21"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a5951b276f36d8260f299b0dad23dfd"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a9a5951b276f36d8260f299b0dad23dfd"></a>
const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1XML.xhtml#a9a5951b276f36d8260f299b0dad23dfd">ParseDocType</a> = 0x0200</td></tr>
<tr class="memdesc:a9a5951b276f36d8260f299b0dad23dfd"><td class="mdescLeft">&#160;</td><td class="mdescRight">This flag determines if document type declaration (NodeDoctype) is added to the DOM tree. This flag is off by default. <br/></td></tr>
<tr class="separator:a9a5951b276f36d8260f299b0dad23dfd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f5fea4e887be7ff1796b8a1150f1f0a"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a3f5fea4e887be7ff1796b8a1150f1f0a"></a>
const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1XML.xhtml#a3f5fea4e887be7ff1796b8a1150f1f0a">ParseEol</a> = 0x0020</td></tr>
<tr class="memdesc:a3f5fea4e887be7ff1796b8a1150f1f0a"><td class="mdescLeft">&#160;</td><td class="mdescRight">This flag determines if EOL characters are normalized (converted to #xA) during parsing. This flag is on by default. <br/></td></tr>
<tr class="separator:a3f5fea4e887be7ff1796b8a1150f1f0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8eec3ecbd62fc333bd51abf0e0d4031"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ad8eec3ecbd62fc333bd51abf0e0d4031"></a>
const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1XML.xhtml#ad8eec3ecbd62fc333bd51abf0e0d4031">ParseEscapes</a> = 0x0010</td></tr>
<tr class="memdesc:ad8eec3ecbd62fc333bd51abf0e0d4031"><td class="mdescLeft">&#160;</td><td class="mdescRight">This flag determines if character and entity references are expanded during parsing. This flag is on by default. <br/></td></tr>
<tr class="separator:ad8eec3ecbd62fc333bd51abf0e0d4031"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10efc4e566d550841245774e21ee98ae"><td class="memItemLeft" align="right" valign="top">const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1XML.xhtml#a10efc4e566d550841245774e21ee98ae">ParseFull</a> = <a class="el" href="namespaceMezzanine_1_1XML.xhtml#a01d29dc9a004027ae57e863313c23c21">ParseDefault</a> | <a class="el" href="namespaceMezzanine_1_1XML.xhtml#a10dfe21f7a8edcd95c34de367b723a1e">ParsePi</a> | <a class="el" href="namespaceMezzanine_1_1XML.xhtml#aa47eb6ac501513239cda4ff7b23f6786">ParseComments</a> | <a class="el" href="namespaceMezzanine_1_1XML.xhtml#a8f36bcf2332a3393c6bb437f080e7468">ParseDeclaration</a> | <a class="el" href="namespaceMezzanine_1_1XML.xhtml#a9a5951b276f36d8260f299b0dad23dfd">ParseDocType</a></td></tr>
<tr class="memdesc:a10efc4e566d550841245774e21ee98ae"><td class="mdescLeft">&#160;</td><td class="mdescRight">The full parsing mode.  <a href="#a10efc4e566d550841245774e21ee98ae">More...</a><br/></td></tr>
<tr class="separator:a10efc4e566d550841245774e21ee98ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a019d452f24324f76f236257eaf1ffb9b"><td class="memItemLeft" align="right" valign="top">const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1XML.xhtml#a019d452f24324f76f236257eaf1ffb9b">ParseMinimal</a> = 0x0000</td></tr>
<tr class="memdesc:a019d452f24324f76f236257eaf1ffb9b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Minimal parsing mode (equivalent to turning all other flags off).  <a href="#a019d452f24324f76f236257eaf1ffb9b">More...</a><br/></td></tr>
<tr class="separator:a019d452f24324f76f236257eaf1ffb9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10dfe21f7a8edcd95c34de367b723a1e"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a10dfe21f7a8edcd95c34de367b723a1e"></a>
const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1XML.xhtml#a10dfe21f7a8edcd95c34de367b723a1e">ParsePi</a> = 0x0001</td></tr>
<tr class="memdesc:a10dfe21f7a8edcd95c34de367b723a1e"><td class="mdescLeft">&#160;</td><td class="mdescRight">This flag determines if processing instructions (NodePi) are added to the DOM tree. This flag is off by default. <br/></td></tr>
<tr class="separator:a10dfe21f7a8edcd95c34de367b723a1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06f0f3c1d26e2fb874d50d5ac48a0937"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a06f0f3c1d26e2fb874d50d5ac48a0937"></a>
const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1XML.xhtml#a06f0f3c1d26e2fb874d50d5ac48a0937">ParseWconvAttribute</a> = 0x0040</td></tr>
<tr class="memdesc:a06f0f3c1d26e2fb874d50d5ac48a0937"><td class="mdescLeft">&#160;</td><td class="mdescRight">This flag determines if attribute values are normalized using CDATA normalization rules during parsing. This flag is on by default. <br/></td></tr>
<tr class="separator:a06f0f3c1d26e2fb874d50d5ac48a0937"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4f5c38b3b86855050a6b1b92b771612"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ad4f5c38b3b86855050a6b1b92b771612"></a>
const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1XML.xhtml#ad4f5c38b3b86855050a6b1b92b771612">ParseWnormAttribute</a> = 0x0080</td></tr>
<tr class="memdesc:ad4f5c38b3b86855050a6b1b92b771612"><td class="mdescLeft">&#160;</td><td class="mdescRight">This flag determines if attribute values are normalized using NMTOKENS normalization rules during parsing. This flag is off by default. <br/></td></tr>
<tr class="separator:ad4f5c38b3b86855050a6b1b92b771612"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad154251a7def4608431a84fdeef8e8d6"><td class="memItemLeft" align="right" valign="top">const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1XML.xhtml#ad154251a7def4608431a84fdeef8e8d6">ParseWsPcdata</a> = 0x0008</td></tr>
<tr class="memdesc:ad154251a7def4608431a84fdeef8e8d6"><td class="mdescLeft">&#160;</td><td class="mdescRight">This flag determines if plain character data (NodePcdata) that consist only of whitespace are added to the DOM tree.  <a href="#ad154251a7def4608431a84fdeef8e8d6">More...</a><br/></td></tr>
<tr class="separator:ad154251a7def4608431a84fdeef8e8d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52f0171a14ec94635b21ce5b0532b625"><td class="memItemLeft" align="right" valign="top">const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1XML.xhtml#a52f0171a14ec94635b21ce5b0532b625">ParseWsPcdata_single</a> = 0x0400</td></tr>
<tr class="memdesc:a52f0171a14ec94635b21ce5b0532b625"><td class="mdescLeft">&#160;</td><td class="mdescRight">This flag determines if plain character data (NodePcdata) that is the only child of the parent node and that consists only of whitespace is added to the DOM tree.  <a href="#a52f0171a14ec94635b21ce5b0532b625">More...</a><br/></td></tr>
<tr class="separator:a52f0171a14ec94635b21ce5b0532b625"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>All tools for working with <a class="el" href="namespaceMezzanine_1_1XML.xhtml" title="All tools for working with XML are located in this namespace.">XML</a> are located in this namespace. </p>
<p>The contents of this namespace has many details covered in the <a class="el" href="XMLManual.xhtml">Mezzanine::xml Manual</a> </p>
</div><h2 class="groupheader">Enumeration Type Documentation</h2>
<a class="anchor" id="a77aa299731a2a63d9bab92cf6f03b057"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespaceMezzanine_1_1XML.xhtml#a77aa299731a2a63d9bab92cf6f03b057">Mezzanine::XML::Encoding</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>These flags determine the encoding of input data for an <a class="el" href="namespaceMezzanine_1_1XML.xhtml" title="All tools for working with XML are located in this namespace.">XML</a> document. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><em><a class="anchor" id="a77aa299731a2a63d9bab92cf6f03b057aae3f2f76c60cf95820362667965d1990"></a>EncodingAuto</em>&nbsp;</td><td class="fielddoc">
<p>Auto-detect input DocumentEncoding using BOM or &lt; / &lt;? detection; use UTF8 if BOM is not found. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a77aa299731a2a63d9bab92cf6f03b057a47447ddf92c92868e9115b5dcf6092d1"></a>EncodingUTF8</em>&nbsp;</td><td class="fielddoc">
<p>UTF8 DocumentEncoding. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a77aa299731a2a63d9bab92cf6f03b057a13449f09ab31146984e3f5cd43b1d3fd"></a>EncodingUTF16LE</em>&nbsp;</td><td class="fielddoc">
<p>Little-endian UTF16. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a77aa299731a2a63d9bab92cf6f03b057a3fc5628fb81369275e03664f1f26667f"></a>EncodingUTF16BE</em>&nbsp;</td><td class="fielddoc">
<p>Big-endian UTF16n. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a77aa299731a2a63d9bab92cf6f03b057a410ff19e5466aeee0b1084e6bf91bd6c"></a>EncodingUTF16</em>&nbsp;</td><td class="fielddoc">
<p>UTF16 with native endianness. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a77aa299731a2a63d9bab92cf6f03b057afde999273ac8cb7f044b64d518e206c4"></a>EncodingUTF32LE</em>&nbsp;</td><td class="fielddoc">
<p>Little-endian UTF32. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a77aa299731a2a63d9bab92cf6f03b057add35c37710cbc111e2c88b5937530999"></a>EncodingUTF32BE</em>&nbsp;</td><td class="fielddoc">
<p>Big-endian UTF32. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a77aa299731a2a63d9bab92cf6f03b057a1ea901ebdaece078055b28d6044d7679"></a>EncodingUTF32</em>&nbsp;</td><td class="fielddoc">
<p>UTF32 with native endianness. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a77aa299731a2a63d9bab92cf6f03b057a7f4c51adc1f5fe97b98477262fc0c75b"></a>Encodingwchar_t</em>&nbsp;</td><td class="fielddoc">
<p>The same document encoding wchar_t has (usually either UTF16 or UTF32) </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a77aa299731a2a63d9bab92cf6f03b057acd3c0d0ed6de0f825a456d89024fc5d7"></a>EncodingLatin1</em>&nbsp;</td><td class="fielddoc">
<p>Also called IEC_8859-1 a common encoding on windows, see <a href="http://en.wikipedia.org/wiki/ISO/IEC_8859-1">http://en.wikipedia.org/wiki/ISO/IEC_8859-1</a> for furhter. </p>
</td></tr>
</table>

<p>Definition at line <a class="el" href="xmlenumerations_8h_source.xhtml#l00111">111</a> of file <a class="el" href="xmlenumerations_8h_source.xhtml">xmlenumerations.h</a>.</p>

</div>
</div>
<a class="anchor" id="a79dc84831ed2506631fb4adeb899564a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespaceMezzanine_1_1XML.xhtml#a79dc84831ed2506631fb4adeb899564a">Mezzanine::XML::NodeType</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The types of nodes that could be in the <a class="el" href="namespaceMezzanine_1_1XML.xhtml" title="All tools for working with XML are located in this namespace.">XML</a> Tree. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><em><a class="anchor" id="a79dc84831ed2506631fb4adeb899564aa60a33314a9e01903ac516fabdbccf1f6"></a>NodeNull</em>&nbsp;</td><td class="fielddoc">
<p>Empty (null) node handle. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a79dc84831ed2506631fb4adeb899564aa1057f046d19c42519322193a87fb0ce6"></a>NodeDocument</em>&nbsp;</td><td class="fielddoc">
<p>A document tree's absolute GetRoot. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a79dc84831ed2506631fb4adeb899564aa0460269885b6d435d76d62374780232c"></a>NodeElement</em>&nbsp;</td><td class="fielddoc">
<p>Element tag, i.e. '&lt;node/&gt;'. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a79dc84831ed2506631fb4adeb899564aa5611c39a6ed312b0aedb55ee4f1aaf78"></a>NodePcdata</em>&nbsp;</td><td class="fielddoc">
<p>Plain character data, i.e. 'text'. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a79dc84831ed2506631fb4adeb899564aa497686cf05c2f6472bef7b46965ac32c"></a>NodeCdata</em>&nbsp;</td><td class="fielddoc">
<p>Character data, i.e. '&lt;![CDATA[text]]&gt;'. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a79dc84831ed2506631fb4adeb899564aad49fcbae52d40cca7aecbb34a90ba76f"></a>NodeComment</em>&nbsp;</td><td class="fielddoc">
<p>Comment tag, i.e. '&lt;!&ndash; text &ndash;&gt;'. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a79dc84831ed2506631fb4adeb899564aaa3c062de3c4857d39596ee2e61d85427"></a>NodePi</em>&nbsp;</td><td class="fielddoc">
<p>Processing instruction, i.e. '&lt;?Name?&gt;'. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a79dc84831ed2506631fb4adeb899564aa7074acbee9f2436f766e6cdf2190a886"></a>NodeDeclaration</em>&nbsp;</td><td class="fielddoc">
<p><a class="el" href="classMezzanine_1_1XML_1_1Document.xhtml" title="The root node of any xml hierarchy is a Document.">Document</a> declaration, i.e. '&lt;?xml version="1.0"?&gt;'. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a79dc84831ed2506631fb4adeb899564aa4da7db64f3a4473b09d653fd5c0cdd0e"></a>NodeDocType</em>&nbsp;</td><td class="fielddoc">
<p><a class="el" href="classMezzanine_1_1XML_1_1Document.xhtml" title="The root node of any xml hierarchy is a Document.">Document</a> Type declaration, i.e. '&lt;!DOCTYPE doc&gt;'. </p>
</td></tr>
</table>

<p>Definition at line <a class="el" href="xmlenumerations_8h_source.xhtml#l00144">144</a> of file <a class="el" href="xmlenumerations_8h_source.xhtml">xmlenumerations.h</a>.</p>

</div>
</div>
<a class="anchor" id="a25d44cacbf75a9d031eae1baa9481442"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespaceMezzanine_1_1XML.xhtml#a25d44cacbf75a9d031eae1baa9481442">Mezzanine::XML::ParseStatus</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>These statuses are used to help determine what issues, if any the parser had. Returned by <a class="el" href="structMezzanine_1_1XML_1_1ParseResult.xhtml">Mezzanine::XML::ParseResult</a> instances. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><em><a class="anchor" id="a25d44cacbf75a9d031eae1baa9481442a87afd3113f6eb1d3e4e0b38e7bc84200"></a>StatusOk</em>&nbsp;</td><td class="fielddoc">
<p>This is returned to indicated there where no issues parsing the <a class="el" href="namespaceMezzanine_1_1XML.xhtml" title="All tools for working with XML are located in this namespace.">XML</a> document. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a25d44cacbf75a9d031eae1baa9481442a4795805480ef2801b4d97c8852382878"></a>StatusFileNotFound</em>&nbsp;</td><td class="fielddoc">
<p>File was not found during a loading from filename attempt. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a25d44cacbf75a9d031eae1baa9481442a67f5e35b57b60456d37e9567418611e6"></a>StatusIOError</em>&nbsp;</td><td class="fielddoc">
<p>Error reading from file or stream. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a25d44cacbf75a9d031eae1baa9481442a0ce883f736c91386de54a8d7d16f2938"></a>StatusOutOfMemory</em>&nbsp;</td><td class="fielddoc">
<p>Could not allocate memory. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a25d44cacbf75a9d031eae1baa9481442a0fefc2fc9e43d776e9f17f4d4c5da4ca"></a>StatusInternalError</em>&nbsp;</td><td class="fielddoc">
<p>An unkown error, currently nothing should be able to return this status. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a25d44cacbf75a9d031eae1baa9481442a0b867566188e960394f43c76c27406e9"></a>StatusUnrecognizedTag</em>&nbsp;</td><td class="fielddoc">
<p>The parser could not determine type of tag. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a25d44cacbf75a9d031eae1baa9481442a72a5f04861f3e2c376dff027599a7471"></a>StatusBadProcessingInstruction</em>&nbsp;</td><td class="fielddoc">
<p>Parsing error occurred while parsing document declaration/processing instruction. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a25d44cacbf75a9d031eae1baa9481442a70bb9abb96dc2e3b950c2c4b920a71d1"></a>StatusBadComment</em>&nbsp;</td><td class="fielddoc">
<p>Parsing error occurred while parsing comment. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a25d44cacbf75a9d031eae1baa9481442a25263332176621ee359ac1fe62090e5f"></a>StatusBadCdata</em>&nbsp;</td><td class="fielddoc">
<p>Parsing error occurred while parsing CDATA section. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a25d44cacbf75a9d031eae1baa9481442a7866bef43180138fa0b155fce04faa38"></a>StatusBadDocType</em>&nbsp;</td><td class="fielddoc">
<p>Parsing error occurred while parsing document type declaration. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a25d44cacbf75a9d031eae1baa9481442a9ade5a701b5900d0031b03bf96c81f66"></a>StatusBadPcdata</em>&nbsp;</td><td class="fielddoc">
<p>Parsing error occurred while parsing PCDATA section. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a25d44cacbf75a9d031eae1baa9481442a72b16313f09beb14c33f0b4b61733a1a"></a>StatusBadStartElement</em>&nbsp;</td><td class="fielddoc">
<p>Parsing error occurred while parsing start element tag. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a25d44cacbf75a9d031eae1baa9481442ae78936dff77e1c308cd71d486eb9c8af"></a>StatusBadAttribute</em>&nbsp;</td><td class="fielddoc">
<p>Parsing error occurred while parsing element attribute. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a25d44cacbf75a9d031eae1baa9481442acf8dcb09968a7fc6ec594f7a13ea07aa"></a>StatusBadEndElement</em>&nbsp;</td><td class="fielddoc">
<p>Parsing error occurred while parsing end element tag. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a25d44cacbf75a9d031eae1baa9481442aa5fe77480fe0be88f610722b627bac75"></a>StatusEndElementMismatch</em>&nbsp;</td><td class="fielddoc">
<p>There was a mismatch of start-end tags (closing tag had incorrect name, some tag was not closed or there was an excessive closing tag). </p>
</td></tr>
</table>

<p>Definition at line <a class="el" href="xmlenumerations_8h_source.xhtml#l00158">158</a> of file <a class="el" href="xmlenumerations_8h_source.xhtml">xmlenumerations.h</a>.</p>

</div>
</div>
<a class="anchor" id="a9bd26a1f9b2d49df236a663038cd77ee"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespaceMezzanine_1_1XML.xhtml#a9bd26a1f9b2d49df236a663038cd77ee">Mezzanine::XML::XPathValueType</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p><a class="el" href="classMezzanine_1_1XML_1_1XPathQuery.xhtml" title="A compiled XPath query object.">XPathQuery</a> return type. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><em><a class="anchor" id="a9bd26a1f9b2d49df236a663038cd77eea91b9ca43602bfd3faad0e3cc6a641442"></a>XPathTypeNone</em>&nbsp;</td><td class="fielddoc">
<p>Unknown Type (query failed to compile) </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a9bd26a1f9b2d49df236a663038cd77eeada8c2839f448b6393811a01e8c735b16"></a>XPathTypeNodeSet</em>&nbsp;</td><td class="fielddoc">
<p><a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">Node</a> set (<a class="el" href="classMezzanine_1_1XML_1_1XPathNodeSet.xhtml" title="A fixed sized collection of nodes that an XPathQuery can work on.">XPathNodeSet</a>) </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a9bd26a1f9b2d49df236a663038cd77eeaa9e63bb1a0f8538b26dd994ba6353758"></a>XPathTypeNumber</em>&nbsp;</td><td class="fielddoc">
<p>Number This corresponds to a double or Real. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a9bd26a1f9b2d49df236a663038cd77eeae324e3275db7af01393dc81c08ec994b"></a>XPathTypeString</em>&nbsp;</td><td class="fielddoc">
<p>Corresponds to the String type. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a9bd26a1f9b2d49df236a663038cd77eea49338d031ceb0542373b37fe07efa1e6"></a>XPathTypeBoolean</em>&nbsp;</td><td class="fielddoc">
<p>Boolean. </p>
</td></tr>
</table>

<p>Definition at line <a class="el" href="xmlenumerations_8h_source.xhtml#l00182">182</a> of file <a class="el" href="xmlenumerations_8h_source.xhtml">xmlenumerations.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="af07113f07f5ee0d9186f493414fa34b9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; <a class="el" href="crossplatformexport_8h.xhtml#a455f91aab9e6a1cf4286f5cdfa74c7bc">MEZZ_LIB</a> Mezzanine::XML::AsUtf8 </td>
          <td>(</td>
          <td class="paramtype">const wchar_t *&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert a c-style string of wchar_t to std::string containing UTF8. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>The wide string to convert </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; containing the converted data </dd></dl>

</div>
</div>
<a class="anchor" id="a9dcf66b8474f939672f8f0daba98aeaa"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; <a class="el" href="crossplatformexport_8h.xhtml#a455f91aab9e6a1cf4286f5cdfa74c7bc">MEZZ_LIB</a> Mezzanine::XML::AsUtf8 </td>
          <td>(</td>
          <td class="paramtype">const std::basic_string&lt; wchar_t, std::char_traits&lt; wchar_t &gt;, std::allocator&lt; wchar_t &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert a std::wstring to a UTF8 std::string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>The wide string to convert. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; containing the converted data </dd></dl>

</div>
</div>
<a class="anchor" id="ace1a5a6d631f9cf0df133aaba8cc8c57"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::basic_string&lt;wchar_t, std::char_traits&lt;wchar_t&gt;, std::allocator&lt;wchar_t&gt; &gt; <a class="el" href="crossplatformexport_8h.xhtml#a455f91aab9e6a1cf4286f5cdfa74c7bc">MEZZ_LIB</a> Mezzanine::XML::AsWide </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert a Convert a c-style string to std::wstring containing native encoding (Usually UCS2 on windows and UTF32 on Linux/Mac). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>The string to convert. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A std::basic_string&lt;wchar_t, std::char_traits&lt;wchar_t&gt;, std::allocator&lt;wchar_t&gt; &gt; containing the converted data </dd></dl>

</div>
</div>
<a class="anchor" id="a7725ffc596adcc1e4c1b491f1a3efad2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::basic_string&lt;wchar_t, std::char_traits&lt;wchar_t&gt;, std::allocator&lt;wchar_t&gt; &gt; <a class="el" href="crossplatformexport_8h.xhtml#a455f91aab9e6a1cf4286f5cdfa74c7bc">MEZZ_LIB</a> Mezzanine::XML::AsWide </td>
          <td>(</td>
          <td class="paramtype">const std::basic_string&lt; char, std::char_traits&lt; char &gt;, std::allocator&lt; char &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert a Convert a std::string to std::wstring containing native encoding (Usually UCS2 on windows and UTF32 on Linux/Mac). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>The string to convert. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A std::basic_string&lt;wchar_t, std::char_traits&lt;wchar_t&gt;, std::allocator&lt;wchar_t&gt; &gt; containing the converted data </dd></dl>

</div>
</div>
<a class="anchor" id="a80fe6c59a5a1501f15802ff7ceb0d2fb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> <a class="el" href="crossplatformexport_8h.xhtml#a455f91aab9e6a1cf4286f5cdfa74c7bc">MEZZ_LIB</a> Mezzanine::XML::EscapeXML </td>
          <td>(</td>
          <td class="paramtype">const String &amp;&#160;</td>
          <td class="paramname"><em>XMLText</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert &lt; &gt; &amp; and " in text to &amp;lt;, &amp;gt;, &amp;amp; and &amp;quote so text can safely be stored in <a class="el" href="namespaceMezzanine_1_1XML.xhtml" title="All tools for working with XML are located in this namespace.">XML</a>. </p>
<p>Usually this is not required. Entering text into an <a class="el" href="classMezzanine_1_1XML_1_1Attribute.xhtml" title="A light-weight handle for manipulating attributes in DOM tree.">XML::Attribute</a> or and <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">XML::Node</a> will correctly escape it. Use this when you will be creating raw xml want to safely escape these characters. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">XMLText</td><td>The Text to convert to xml safe text </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>a String containing the escaped version of XMLText </dd></dl>

<p>Definition at line <a class="el" href="xmlstring_8cpp_source.xhtml#l00144">144</a> of file <a class="el" href="xmlstring_8cpp_source.xhtml">xmlstring.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ae5f4e4d0fa23d1567c5b28d23cb534cd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine_1_1XML.xhtml#a9a0f7f810d3209e6e749d338677dfa3f">AllocationFunction</a> <a class="el" href="crossplatformexport_8h.xhtml#a455f91aab9e6a1cf4286f5cdfa74c7bc">MEZZ_LIB</a> Mezzanine::XML::GetMemoryAllocationFunction </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the current allocation funciton. </p>
<dl class="section return"><dt>Returns</dt><dd>A function pointer of type <a class="el" href="namespaceMezzanine_1_1XML.xhtml#a9a0f7f810d3209e6e749d338677dfa3f">AllocationFunction</a> to the current allocation function </dd></dl>

</div>
</div>
<a class="anchor" id="a29489f570c35337d137e8c5daae27611"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine_1_1XML.xhtml#a4e47bf5bc2198df53e81e5b01174b3e8">DeAllocationFunction</a> <a class="el" href="crossplatformexport_8h.xhtml#a455f91aab9e6a1cf4286f5cdfa74c7bc">MEZZ_LIB</a> Mezzanine::XML::GetMemoryDeallocationFunction </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the current allocation funciton. </p>
<dl class="section return"><dt>Returns</dt><dd>A function pointer of the type <a class="el" href="namespaceMezzanine_1_1XML.xhtml#a4e47bf5bc2198df53e81e5b01174b3e8">DeAllocationFunction</a> to the current allocation function </dd></dl>

</div>
</div>
<a class="anchor" id="a230007eaf534ce57ad58f440a7a89b6c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> <a class="el" href="crossplatformexport_8h.xhtml#a455f91aab9e6a1cf4286f5cdfa74c7bc">MEZZ_LIB</a> Mezzanine::XML::GetOneTag </td>
          <td>(</td>
          <td class="paramtype">std::istream &amp;&#160;</td>
          <td class="paramname"><em>stream</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets the first tag out of the Stream and returns it as a String. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">stream</td><td>An std::ostream that contains atleast one xml tag </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>This gets one <a class="el" href="namespaceMezzanine_1_1XML.xhtml" title="All tools for working with XML are located in this namespace.">XML</a> tag, its closing tage, and all subtags. </dd></dl>

<p>Definition at line <a class="el" href="xmlstring_8cpp_source.xhtml#l00072">72</a> of file <a class="el" href="xmlstring_8cpp_source.xhtml">xmlstring.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ac7626fd39b806cbb7b34ff375b341ee5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1XML_1_1Document.xhtml">Document</a> *<a class="el" href="crossplatformexport_8h.xhtml#a455f91aab9e6a1cf4286f5cdfa74c7bc">MEZZ_LIB</a> Mezzanine::XML::PreParseClassFromSingleTag </td>
          <td>(</td>
          <td class="paramtype">const String &amp;&#160;</td>
          <td class="paramname"><em>NameSpace</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const String &amp;&#160;</td>
          <td class="paramname"><em>ClassName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const String &amp;&#160;</td>
          <td class="paramname"><em>OneTag</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Perform a basic series of checks for extracting meaning from a single xml tag. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">NameSpace</td><td>Used when throwing exceptions, this is a string containing the namespace and colons of a class to be deserialized for example "Mezzanine::" </td></tr>
    <tr><td class="paramname">ClassName</td><td>This will be used to identify the main xml element/tag you are attempting to deserialize. This will also be used in error messages. </td></tr>
    <tr><td class="paramname">OneTag</td><td>One <a class="el" href="namespaceMezzanine_1_1XML.xhtml" title="All tools for working with XML are located in this namespace.">XML</a> tag/elements worth of text to deserialize. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A pointer to <a class="el" href="classMezzanine_1_1XML_1_1Document.xhtml" title="The root node of any xml hierarchy is a Document.">XML::Document</a> that you are now the owner of and must delete, that has the data parse and ready to access. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">This</td><td>can throw a Mezzanine::exception in the event that the xml cannot be parsed. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="xmlstring_8cpp_source.xhtml#l00116">116</a> of file <a class="el" href="xmlstring_8cpp_source.xhtml">xmlstring.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a4713b805136e4a66e55422f2efd8f0d9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1XML_1_1Document.xhtml">Document</a> *<a class="el" href="crossplatformexport_8h.xhtml#a455f91aab9e6a1cf4286f5cdfa74c7bc">MEZZ_LIB</a> Mezzanine::XML::PreParseClassFromSingleTag </td>
          <td>(</td>
          <td class="paramtype">const String &amp;&#160;</td>
          <td class="paramname"><em>ClassName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const String &amp;&#160;</td>
          <td class="paramname"><em>OneTag</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calls PreParseClassFromSingleTag passing a "" as the Namespace. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ClassName</td><td>This will be used to identify the main xml element/tag you are attempting to deserialize. This will also be used in error messages. </td></tr>
    <tr><td class="paramname">OneTag</td><td>One <a class="el" href="namespaceMezzanine_1_1XML.xhtml" title="All tools for working with XML are located in this namespace.">XML</a> tag/elements worth of text to deserialize. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A pointer to <a class="el" href="classMezzanine_1_1XML_1_1Document.xhtml" title="The root node of any xml hierarchy is a Document.">XML::Document</a> that you are now the owner of and must delete, that has the data parse and ready to access. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">This</td><td>can throw a Mezzanine::exception in the event that the xml cannot be parsed. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="xmlstring_8cpp_source.xhtml#l00141">141</a> of file <a class="el" href="xmlstring_8cpp_source.xhtml">xmlstring.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a1fa0e03dade4db112e8f6d015163ace4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="crossplatformexport_8h.xhtml#a455f91aab9e6a1cf4286f5cdfa74c7bc">MEZZ_LIB</a> Mezzanine::XML::SetMemoryManagementFunctions </td>
          <td>(</td>
          <td class="paramtype">AllocationFunction&#160;</td>
          <td class="paramname"><em>allocate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">DeAllocationFunction&#160;</td>
          <td class="paramname"><em>deallocate</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Override default memory management functions. All subsequent allocations/deallocations will be performed via supplied functions. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">allocate</td><td>The new memory allocator </td></tr>
    <tr><td class="paramname">deallocate</td><td>The new memory deallocator </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a class="anchor" id="a9a9b9245ea32348c78817d002ecd61fc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const unsigned int Mezzanine::XML::FormatDefault = <a class="el" href="namespaceMezzanine_1_1XML.xhtml#a113ddc3c498f17dde89bce5b7ceb5661">FormatRaw</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The default set of formatting flags. Only FormatRaw is enabled. </p>
<dl class="section note"><dt>Note</dt><dd>PugiXML defaults to FormatIndent which is not well suited to computer to computer transmission as games commonly do </dd></dl>

<p>Definition at line <a class="el" href="xmlenumerations_8h_source.xhtml#l00141">141</a> of file <a class="el" href="xmlenumerations_8h_source.xhtml">xmlenumerations.h</a>.</p>

</div>
</div>
<a class="anchor" id="a01d29dc9a004027ae57e863313c23c21"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const unsigned int Mezzanine::XML::ParseDefault = <a class="el" href="namespaceMezzanine_1_1XML.xhtml#a4504643b4b1ad4cd0ed85fb42b25e1a4">ParseCdata</a> | <a class="el" href="namespaceMezzanine_1_1XML.xhtml#ad8eec3ecbd62fc333bd51abf0e0d4031">ParseEscapes</a> | <a class="el" href="namespaceMezzanine_1_1XML.xhtml#a06f0f3c1d26e2fb874d50d5ac48a0937">ParseWconvAttribute</a> | <a class="el" href="namespaceMezzanine_1_1XML.xhtml#a3f5fea4e887be7ff1796b8a1150f1f0a">ParseEol</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The default parsing mode. </p>
<p>Elements, PCDATA and CDATA sections are added to the DOM tree, character/reference entities are expanded, End-of-Line characters are normalized, attribute values are normalized using CDATA normalization rules. </p>

<p>Definition at line <a class="el" href="xmlenumerations_8h_source.xhtml#l00104">104</a> of file <a class="el" href="xmlenumerations_8h_source.xhtml">xmlenumerations.h</a>.</p>

</div>
</div>
<a class="anchor" id="a10efc4e566d550841245774e21ee98ae"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const unsigned int Mezzanine::XML::ParseFull = <a class="el" href="namespaceMezzanine_1_1XML.xhtml#a01d29dc9a004027ae57e863313c23c21">ParseDefault</a> | <a class="el" href="namespaceMezzanine_1_1XML.xhtml#a10dfe21f7a8edcd95c34de367b723a1e">ParsePi</a> | <a class="el" href="namespaceMezzanine_1_1XML.xhtml#aa47eb6ac501513239cda4ff7b23f6786">ParseComments</a> | <a class="el" href="namespaceMezzanine_1_1XML.xhtml#a8f36bcf2332a3393c6bb437f080e7468">ParseDeclaration</a> | <a class="el" href="namespaceMezzanine_1_1XML.xhtml#a9a5951b276f36d8260f299b0dad23dfd">ParseDocType</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The full parsing mode. </p>
<p>Nodes of all types are added to the DOM tree, character/reference entities are expanded, End-of-Line characters are normalized, attribute values are normalized using CDATA normalization rules. </p>

<p>Definition at line <a class="el" href="xmlenumerations_8h_source.xhtml#l00108">108</a> of file <a class="el" href="xmlenumerations_8h_source.xhtml">xmlenumerations.h</a>.</p>

</div>
</div>
<a class="anchor" id="a019d452f24324f76f236257eaf1ffb9b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const unsigned int Mezzanine::XML::ParseMinimal = 0x0000</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Minimal parsing mode (equivalent to turning all other flags off). </p>
<p>Only elements and PCDATA sections are added to the DOM tree, no text conversions are performed. </p>

<p>Definition at line <a class="el" href="xmlenumerations_8h_source.xhtml#l00075">75</a> of file <a class="el" href="xmlenumerations_8h_source.xhtml">xmlenumerations.h</a>.</p>

</div>
</div>
<a class="anchor" id="ad154251a7def4608431a84fdeef8e8d6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const unsigned int Mezzanine::XML::ParseWsPcdata = 0x0008</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This flag determines if plain character data (NodePcdata) that consist only of whitespace are added to the DOM tree. </p>
<p>This flag is off by default; turning it on usually results in slower parsing and more memory consumption. </p>

<p>Definition at line <a class="el" href="xmlenumerations_8h_source.xhtml#l00084">84</a> of file <a class="el" href="xmlenumerations_8h_source.xhtml">xmlenumerations.h</a>.</p>

</div>
</div>
<a class="anchor" id="a52f0171a14ec94635b21ce5b0532b625"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const unsigned int Mezzanine::XML::ParseWsPcdata_single = 0x0400</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This flag determines if plain character data (NodePcdata) that is the only child of the parent node and that consists only of whitespace is added to the DOM tree. </p>
<p>This flag is off by default; turning it on may Result in slower parsing and more memory consumption. </p>

<p>Definition at line <a class="el" href="xmlenumerations_8h_source.xhtml#l00099">99</a> of file <a class="el" href="xmlenumerations_8h_source.xhtml">xmlenumerations.h</a>.</p>

</div>
</div>
</div><!-- contents -->
<hr class="footer"/><address class="footer"><small>
Generated on Sun Sep 15 2013 02:46:45 for MezzanineEngine by&#160;<a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1</small></address>
</body>
</html>
