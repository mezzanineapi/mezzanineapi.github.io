<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Mezzanine::BinaryTools::BinaryBuffer Class Reference</title>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="DoxyStyle.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script> 
</head>
<body onload='searchBox.OnSelectItem(0);'>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;" nowrap="nowrap">
   <div id="projectname"><a href="http://blacktoppstudios.com"><img src="logogreen100pxtall.png"/></a>MezzanineEngine&#160;<span id="projectnumber">September&nbsp;15,&nbsp;2013</span></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceMezzanine.xhtml">Mezzanine</a></li><li class="navelem"><a class="el" href="namespaceMezzanine_1_1BinaryTools.xhtml">BinaryTools</a></li><li class="navelem"><a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml">BinaryBuffer</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-attribs">Public Attributes</a> &#124;
<a href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">Mezzanine::BinaryTools::BinaryBuffer Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>A way to store and pass binary buffers, for example compiled bytecode.  
 <a href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="binarybuffer_8h_source.xhtml">binarybuffer.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:aeb16c1234f82f2b97b98d6d1079469c6"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aeb16c1234f82f2b97b98d6d1079469c6"></a>
typedef <a class="el" href="namespaceMezzanine.xhtml#acbb048ee99aa07566d5a6eb33f5a2c2d">Int8</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#aeb16c1234f82f2b97b98d6d1079469c6">Byte</a></td></tr>
<tr class="memdesc:aeb16c1234f82f2b97b98d6d1079469c6"><td class="mdescLeft">&#160;</td><td class="mdescRight">The type of data this buffer can hold, it is intended to be some type one byte in length, but doesn't have to be. <br/></td></tr>
<tr class="separator:aeb16c1234f82f2b97b98d6d1079469c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:abb21f973c6deab7caab323b90df99938"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="abb21f973c6deab7caab323b90df99938"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#abb21f973c6deab7caab323b90df99938">BinaryBuffer</a> ()</td></tr>
<tr class="memdesc:abb21f973c6deab7caab323b90df99938"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor, set everything to zero. Doesn't allocate anything. <br/></td></tr>
<tr class="separator:abb21f973c6deab7caab323b90df99938"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac08221c49506acf0ca4067252421065a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#ac08221c49506acf0ca4067252421065a">BinaryBuffer</a> (const <a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml">BinaryBuffer</a> &amp;Other)</td></tr>
<tr class="memdesc:ac08221c49506acf0ca4067252421065a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy constructor.  <a href="#ac08221c49506acf0ca4067252421065a">More...</a><br/></td></tr>
<tr class="separator:ac08221c49506acf0ca4067252421065a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9f601df964ea8c3c72855de040360fa"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#ad9f601df964ea8c3c72855de040360fa">BinaryBuffer</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;DataString, bool <a class="el" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35">IsBase64</a>=true)</td></tr>
<tr class="memdesc:ad9f601df964ea8c3c72855de040360fa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Base64 decoding Constructor.  <a href="#ad9f601df964ea8c3c72855de040360fa">More...</a><br/></td></tr>
<tr class="separator:ad9f601df964ea8c3c72855de040360fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16eeeb9df439dfe0be115b4bcb5aa100"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a16eeeb9df439dfe0be115b4bcb5aa100">BinaryBuffer</a> (<a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#aeb16c1234f82f2b97b98d6d1079469c6">Byte</a> *BinaryPointer, <a class="el" href="namespaceMezzanine.xhtml#ac3576e52af3c62d13dde94829e0c5465">Integer</a> PredeterminedSize)</td></tr>
<tr class="memdesc:a16eeeb9df439dfe0be115b4bcb5aa100"><td class="mdescLeft">&#160;</td><td class="mdescRight">Verbose constructor, set everything custom on creation.  <a href="#a16eeeb9df439dfe0be115b4bcb5aa100">More...</a><br/></td></tr>
<tr class="separator:a16eeeb9df439dfe0be115b4bcb5aa100"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5bfa5eaba7bafe6db8993765805a713f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a5bfa5eaba7bafe6db8993765805a713f">BinaryBuffer</a> (<a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> PredeterminedSize)</td></tr>
<tr class="memdesc:a5bfa5eaba7bafe6db8993765805a713f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Terse constructor, set a custom size and allocates space (filled with gibberish).  <a href="#a5bfa5eaba7bafe6db8993765805a713f">More...</a><br/></td></tr>
<tr class="separator:a5bfa5eaba7bafe6db8993765805a713f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f61f7d10695fee7eff1b5a6b5fbe36e"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a1f61f7d10695fee7eff1b5a6b5fbe36e">~BinaryBuffer</a> ()</td></tr>
<tr class="memdesc:a1f61f7d10695fee7eff1b5a6b5fbe36e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Virtual deconstructor calls <a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a23b299647eb5c3e9b879c4aa3d23827d">DeleteBuffer()</a> to clean up whatever has been inserted here.  <a href="#a1f61f7d10695fee7eff1b5a6b5fbe36e">More...</a><br/></td></tr>
<tr class="separator:a1f61f7d10695fee7eff1b5a6b5fbe36e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a896e7d75300d6fede5a230c5b7c99d78"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a896e7d75300d6fede5a230c5b7c99d78">Concatenate</a> (const <a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#aeb16c1234f82f2b97b98d6d1079469c6">Byte</a> *OtherBuffer, <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> ByteSize)</td></tr>
<tr class="memdesc:a896e7d75300d6fede5a230c5b7c99d78"><td class="mdescLeft">&#160;</td><td class="mdescRight">Append another group of arbitrary data onto this one.  <a href="#a896e7d75300d6fede5a230c5b7c99d78">More...</a><br/></td></tr>
<tr class="separator:a896e7d75300d6fede5a230c5b7c99d78"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8f5da7c47ab1a1fdfd2fd675e58291e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#ae8f5da7c47ab1a1fdfd2fd675e58291e">Concatenate</a> (const <a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml">BinaryBuffer</a> BufferFromAnotherMother)</td></tr>
<tr class="memdesc:ae8f5da7c47ab1a1fdfd2fd675e58291e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Concatenate another buffer onto this one.  <a href="#ae8f5da7c47ab1a1fdfd2fd675e58291e">More...</a><br/></td></tr>
<tr class="separator:ae8f5da7c47ab1a1fdfd2fd675e58291e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a552b6e0339ed4754097ade81d3f3a42e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a552b6e0339ed4754097ade81d3f3a42e">CreateBuffer</a> ()</td></tr>
<tr class="memdesc:a552b6e0339ed4754097ade81d3f3a42e"><td class="mdescLeft">&#160;</td><td class="mdescRight">This will create a buffer with size matching the this-&gt;Size and point this-&gt;Binary to that Buffer.  <a href="#a552b6e0339ed4754097ade81d3f3a42e">More...</a><br/></td></tr>
<tr class="separator:a552b6e0339ed4754097ade81d3f3a42e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a10eebfd8ac37fef8e936ff58150d75"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a0a10eebfd8ac37fef8e936ff58150d75">CreateFromBase64</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;EncodedBinaryData)</td></tr>
<tr class="memdesc:a0a10eebfd8ac37fef8e936ff58150d75"><td class="mdescLeft">&#160;</td><td class="mdescRight">This calls deallocates any space, allocates fresh space of the size requestedthen the Decodes the passed and repopulates the Buffer.  <a href="#a0a10eebfd8ac37fef8e936ff58150d75">More...</a><br/></td></tr>
<tr class="separator:a0a10eebfd8ac37fef8e936ff58150d75"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23b299647eb5c3e9b879c4aa3d23827d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a23b299647eb5c3e9b879c4aa3d23827d">DeleteBuffer</a> (<a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> NewSize=0)</td></tr>
<tr class="memdesc:a23b299647eb5c3e9b879c4aa3d23827d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Deletes whatever Binary points at and assigns Size to 0.  <a href="#a23b299647eb5c3e9b879c4aa3d23827d">More...</a><br/></td></tr>
<tr class="separator:a23b299647eb5c3e9b879c4aa3d23827d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aabd5cf1d5289c14c730f763f084ee9ac"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml">BinaryBuffer</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#aabd5cf1d5289c14c730f763f084ee9ac">operator+=</a> (const <a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml">BinaryBuffer</a> &amp;RH)</td></tr>
<tr class="separator:aabd5cf1d5289c14c730f763f084ee9ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa83cde768f4a2f146cd23543d8fde484"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml">BinaryBuffer</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#aa83cde768f4a2f146cd23543d8fde484">operator=</a> (const <a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml">BinaryBuffer</a> &amp;RH)</td></tr>
<tr class="memdesc:aa83cde768f4a2f146cd23543d8fde484"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assignment Operator.  <a href="#aa83cde768f4a2f146cd23543d8fde484">More...</a><br/></td></tr>
<tr class="separator:aa83cde768f4a2f146cd23543d8fde484"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeef6819c9064a0e72c0d22e2c2955610"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#aeb16c1234f82f2b97b98d6d1079469c6">Byte</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#aeef6819c9064a0e72c0d22e2c2955610">operator[]</a> (<a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> Index)</td></tr>
<tr class="memdesc:aeef6819c9064a0e72c0d22e2c2955610"><td class="mdescLeft">&#160;</td><td class="mdescRight">Access a part of the buffer.  <a href="#aeef6819c9064a0e72c0d22e2c2955610">More...</a><br/></td></tr>
<tr class="separator:aeef6819c9064a0e72c0d22e2c2955610"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc52a141bce0c5f1b6f1eeb685a4f523"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#afc52a141bce0c5f1b6f1eeb685a4f523">ToBase64String</a> ()</td></tr>
<tr class="memdesc:afc52a141bce0c5f1b6f1eeb685a4f523"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the binary buffer as a base64 string.  <a href="#afc52a141bce0c5f1b6f1eeb685a4f523">More...</a><br/></td></tr>
<tr class="separator:afc52a141bce0c5f1b6f1eeb685a4f523"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4726a05fd3262ed729c86fcc02c7d739"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a4726a05fd3262ed729c86fcc02c7d739">ToString</a> ()</td></tr>
<tr class="memdesc:a4726a05fd3262ed729c86fcc02c7d739"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the contents of this crudely converted to a c style string then stuff it in a string.  <a href="#a4726a05fd3262ed729c86fcc02c7d739">More...</a><br/></td></tr>
<tr class="separator:a4726a05fd3262ed729c86fcc02c7d739"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Public Attributes</h2></td></tr>
<tr class="memitem:a99e9cadde8687dc8b304413608327b7c"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a99e9cadde8687dc8b304413608327b7c"></a>
<a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#aeb16c1234f82f2b97b98d6d1079469c6">Byte</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a99e9cadde8687dc8b304413608327b7c">Binary</a></td></tr>
<tr class="memdesc:a99e9cadde8687dc8b304413608327b7c"><td class="mdescLeft">&#160;</td><td class="mdescRight">A pointer to the actual binary data. <br/></td></tr>
<tr class="separator:a99e9cadde8687dc8b304413608327b7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d818c0f96de38e39c2a27e0f7682b4a"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a7d818c0f96de38e39c2a27e0f7682b4a"></a>
<a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a7d818c0f96de38e39c2a27e0f7682b4a">Size</a></td></tr>
<tr class="memdesc:a7d818c0f96de38e39c2a27e0f7682b4a"><td class="mdescLeft">&#160;</td><td class="mdescRight">How many bytes is <a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a99e9cadde8687dc8b304413608327b7c">Binary</a> in size. This is set to 0 if <a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a99e9cadde8687dc8b304413608327b7c">Binary</a> is invalid and should be a null pointer. <br/></td></tr>
<tr class="separator:a7d818c0f96de38e39c2a27e0f7682b4a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>A way to store and pass binary buffers, for example compiled bytecode. </p>
<p>Originally intended for use with ScriptCompilable as a basic way to store and pass bytecode around. This deletes the passed binary on destruction. To prevent this behavior set the Binary pointer to null. <br/>
 <br/>
 This is designed to be fairly minimalistic but passing by value causes the buffer to be copied. <br/>
 <br/>
 Where possible this class performs no speculative allocation unless explicitly requested to. In other words this should have allocated exactly as many bytes are indicated by the member Size, no more and no less. This will tend to not allocate memory unless an operation on it is specified that it does so. <br/>
 <br/>
 Whenever this needs to allocated memory it will use the Size member for determining the amount to allocate. If that is 0 an <a class="el" href="classMezzanine_1_1InvalidStateException.xhtml" title="Thrown when the available information should have worked but failed for unknown reasons.">InvalidStateException</a> exception is thrown. Bounds checking, if performed, only occurs when MEZZ_DEBUG is enabled. </p>

<p>Definition at line <a class="el" href="binarybuffer_8h_source.xhtml#l00066">66</a> of file <a class="el" href="binarybuffer_8h_source.xhtml">binarybuffer.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="ac08221c49506acf0ca4067252421065a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Mezzanine::BinaryTools::BinaryBuffer::BinaryBuffer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml">BinaryBuffer</a> &amp;&#160;</td>
          <td class="paramname"><em>Other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copy constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Other</td><td>The buffer to copy to make</td></tr>
  </table>
  </dd>
</dl>
<p>Allocates identical amount of memory as other buffer then copies the other buffer into the allocated space. Each <a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml" title="A way to store and pass binary buffers, for example compiled bytecode.">BinaryBuffer</a> retains ownership of their respective buffers. </p>

<p>Definition at line <a class="el" href="binarybuffer_8cpp_source.xhtml#l00155">155</a> of file <a class="el" href="binarybuffer_8cpp_source.xhtml">binarybuffer.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ad9f601df964ea8c3c72855de040360fa"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Mezzanine::BinaryTools::BinaryBuffer::BinaryBuffer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>DataString</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>IsBase64</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Base64 decoding Constructor. </p>
<p>Performs exactly one allocation of the amount required to store the decoded base64, Then starts filling it. If there is an error with the data as it is beign process the rest of the Buffer will be filled with gibberish, and everything before the error will be properly decoded. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">DataString</td><td>A Base64 string to be decode and used as a binary buffer, or a string to be used a buffer if IsBase64 is false </td></tr>
    <tr><td class="paramname">IsBase64</td><td>Is the String passed Base64 encoded </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="binarybuffer_8cpp_source.xhtml#l00167">167</a> of file <a class="el" href="binarybuffer_8cpp_source.xhtml">binarybuffer.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a16eeeb9df439dfe0be115b4bcb5aa100"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Mezzanine::BinaryTools::BinaryBuffer::BinaryBuffer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#aeb16c1234f82f2b97b98d6d1079469c6">Byte</a> *&#160;</td>
          <td class="paramname"><em>BinaryPointer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#ac3576e52af3c62d13dde94829e0c5465">Integer</a>&#160;</td>
          <td class="paramname"><em>PredeterminedSize</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Verbose constructor, set everything custom on creation. </p>
<p>If passed a pointer this assumes ownship of that pointer, otherwise this allocates the amount of space requested. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">BinaryPointer</td><td>A pointer to the first byte in memory, if this is null the buffer is created. Ownership of this Pointer will be assumed. </td></tr>
    <tr><td class="paramname">PredeterminedSize</td><td>The size to set on creation. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="binarybuffer_8h_source.xhtml#l00110">110</a> of file <a class="el" href="binarybuffer_8h_source.xhtml">binarybuffer.h</a>.</p>

</div>
</div>
<a class="anchor" id="a5bfa5eaba7bafe6db8993765805a713f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Mezzanine::BinaryTools::BinaryBuffer::BinaryBuffer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a>&#160;</td>
          <td class="paramname"><em>PredeterminedSize</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Terse constructor, set a custom size and allocates space (filled with gibberish). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">PredeterminedSize</td><td>The size to set on creation. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="binarybuffer_8h_source.xhtml#l00117">117</a> of file <a class="el" href="binarybuffer_8h_source.xhtml">binarybuffer.h</a>.</p>

</div>
</div>
<a class="anchor" id="a1f61f7d10695fee7eff1b5a6b5fbe36e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Mezzanine::BinaryTools::BinaryBuffer::~BinaryBuffer </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Virtual deconstructor calls <a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a23b299647eb5c3e9b879c4aa3d23827d">DeleteBuffer()</a> to clean up whatever has been inserted here. </p>
<p>If you do not want the Buffer pointed to by the pointer Binary assign Binary to 0 and this deconstructor will delete with erase nothing. </p>

<p>Definition at line <a class="el" href="binarybuffer_8cpp_source.xhtml#l00197">197</a> of file <a class="el" href="binarybuffer_8cpp_source.xhtml">binarybuffer.cpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a896e7d75300d6fede5a230c5b7c99d78"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::BinaryTools::BinaryBuffer::Concatenate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#aeb16c1234f82f2b97b98d6d1079469c6">Byte</a> *&#160;</td>
          <td class="paramname"><em>OtherBuffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a>&#160;</td>
          <td class="paramname"><em>ByteSize</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Append another group of arbitrary data onto this one. </p>
<p>Allocates space equal to the size of both buffers, Copies this Buffers data into it, then copies the other buffers data, then deallocates any space this buffer may have had allocated preivously. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">OtherBuffer</td><td>A pointer to a region of memory to be copied </td></tr>
    <tr><td class="paramname">ByteSize</td><td>How big in bytes is the Buffer </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="binarybuffer_8cpp_source.xhtml#l00254">254</a> of file <a class="el" href="binarybuffer_8cpp_source.xhtml">binarybuffer.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ae8f5da7c47ab1a1fdfd2fd675e58291e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::BinaryTools::BinaryBuffer::Concatenate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml">BinaryBuffer</a>&#160;</td>
          <td class="paramname"><em>BufferFromAnotherMother</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Concatenate another buffer onto this one. </p>
<p>This calls <a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a896e7d75300d6fede5a230c5b7c99d78">Concatenate(const Byte*, Whole)</a> </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">BufferFromAnotherMother</td><td>A buffer to copy and append onto this one. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="binarybuffer_8cpp_source.xhtml#l00266">266</a> of file <a class="el" href="binarybuffer_8cpp_source.xhtml">binarybuffer.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a552b6e0339ed4754097ade81d3f3a42e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::BinaryTools::BinaryBuffer::CreateBuffer </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This will create a buffer with size matching the this-&gt;Size and point this-&gt;Binary to that Buffer. </p>
<dl class="section warning"><dt>Warning</dt><dd>This does not delete an old buffer, delete that before calling this. </dd></dl>

<p>Definition at line <a class="el" href="binarybuffer_8cpp_source.xhtml#l00208">208</a> of file <a class="el" href="binarybuffer_8cpp_source.xhtml">binarybuffer.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a0a10eebfd8ac37fef8e936ff58150d75"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::BinaryTools::BinaryBuffer::CreateFromBase64 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>EncodedBinaryData</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This calls deallocates any space, allocates fresh space of the size requestedthen the Decodes the passed and repopulates the Buffer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">EncodedBinaryData</td><td>The Base64 string containing binary data. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="binarybuffer_8cpp_source.xhtml#l00236">236</a> of file <a class="el" href="binarybuffer_8cpp_source.xhtml">binarybuffer.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a23b299647eb5c3e9b879c4aa3d23827d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::BinaryTools::BinaryBuffer::DeleteBuffer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a>&#160;</td>
          <td class="paramname"><em>NewSize</em> = <code>0</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Deletes whatever Binary points at and assigns Size to 0. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">NewSize</td><td>If you don't want to just clear the buffer, but rather want to set size to a value and set a new size, you can do that with this </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="binarybuffer_8cpp_source.xhtml#l00200">200</a> of file <a class="el" href="binarybuffer_8cpp_source.xhtml">binarybuffer.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="aabd5cf1d5289c14c730f763f084ee9ac"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml">BinaryBuffer</a> &amp; Mezzanine::BinaryTools::BinaryBuffer::operator+= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml">BinaryBuffer</a> &amp;&#160;</td>
          <td class="paramname"><em>RH</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>An easier way to call <a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a896e7d75300d6fede5a230c5b7c99d78">Concatenate(const Byte*, Whole)</a> </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">RH</td><td>The other Buffer to copy/append. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A Reference to this buffer to allow operator chaining. </dd></dl>

<p>Definition at line <a class="el" href="binarybuffer_8cpp_source.xhtml#l00270">270</a> of file <a class="el" href="binarybuffer_8cpp_source.xhtml">binarybuffer.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="aa83cde768f4a2f146cd23543d8fde484"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml">BinaryBuffer</a> &amp; Mezzanine::BinaryTools::BinaryBuffer::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml">BinaryBuffer</a> &amp;&#160;</td>
          <td class="paramname"><em>RH</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Assignment Operator. </p>
<p>This deletes the buffer if it is not null, and allocates a fresh one of the size in RH, then copies it. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">RH</td><td>The item on the right hand side </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A reference to the newly assigned binary buffer. </dd></dl>

<p>Definition at line <a class="el" href="binarybuffer_8cpp_source.xhtml#l00182">182</a> of file <a class="el" href="binarybuffer_8cpp_source.xhtml">binarybuffer.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="aeef6819c9064a0e72c0d22e2c2955610"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#aeb16c1234f82f2b97b98d6d1079469c6">BinaryBuffer::Byte</a> &amp; Mezzanine::BinaryTools::BinaryBuffer::operator[] </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a>&#160;</td>
          <td class="paramname"><em>Index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Access a part of the buffer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Index</td><td>How from from the 0 aligned beginning of the buffer would you like to access. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A Reference to the specific Byte the Index passed refers to </dd></dl>
<dl class="section note"><dt>Note</dt><dd>When compiled as Debug this can throw a <a class="el" href="classMezzanine_1_1MemoryOutOfBoundsException.xhtml">MemoryOutOfBoundsException</a> if the index is to high (or cast from a negative </dd></dl>

<p>Definition at line <a class="el" href="binarybuffer_8cpp_source.xhtml#l00245">245</a> of file <a class="el" href="binarybuffer_8cpp_source.xhtml">binarybuffer.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="afc52a141bce0c5f1b6f1eeb685a4f523"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> Mezzanine::BinaryTools::BinaryBuffer::ToBase64String </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the binary buffer as a base64 string. </p>
<dl class="section return"><dt>Returns</dt><dd>a String contain a base6 encoded version of the binary </dd></dl>

<p>Definition at line <a class="el" href="binarybuffer_8cpp_source.xhtml#l00218">218</a> of file <a class="el" href="binarybuffer_8cpp_source.xhtml">binarybuffer.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a4726a05fd3262ed729c86fcc02c7d739"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> Mezzanine::BinaryTools::BinaryBuffer::ToString </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the contents of this crudely converted to a c style string then stuff it in a string. </p>
<dl class="section return"><dt>Returns</dt><dd>A String with the value stored in binary copied into it. </dd></dl>

<p>Definition at line <a class="el" href="binarybuffer_8cpp_source.xhtml#l00227">227</a> of file <a class="el" href="binarybuffer_8cpp_source.xhtml">binarybuffer.cpp</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/Code/Mezzanine/Mezzanine/src/<a class="el" href="binarybuffer_8h_source.xhtml">binarybuffer.h</a></li>
<li>/home/Code/Mezzanine/Mezzanine/src/<a class="el" href="binarybuffer_8cpp_source.xhtml">binarybuffer.cpp</a></li>
</ul>
</div><!-- contents -->
<hr class="footer"/><address class="footer"><small>
Generated on Sun Sep 15 2013 02:46:43 for MezzanineEngine by&#160;<a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1</small></address>
</body>
</html>
