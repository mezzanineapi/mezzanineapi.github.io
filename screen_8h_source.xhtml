<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>/home/Code/Mezzanine/Mezzanine/src/UI/screen.h Source File</title>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="DoxyStyle.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script> 
</head>
<body onload='searchBox.OnSelectItem(0);'>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;" nowrap="nowrap">
   <div id="projectname"><a href="http://blacktoppstudios.com"><img src="logogreen100pxtall.png"/></a>MezzanineEngine&#160;<span id="projectnumber">September14,2013</span></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_df2e1c8414b6a086be441ff04537838a.xhtml">Mezzanine</a></li><li class="navelem"><a class="el" href="dir_2b71fc9949116feedacddb93a79d832d.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_3ebf96fe972d575a9a92716dce298e4c.xhtml">UI</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">screen.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//Â© Copyright 2010 - 2013 BlackTopp Studios Inc.</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">/* This file is part of The Mezzanine Engine.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">    The Mezzanine Engine is free software: you can redistribute it and/or modify</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">    it under the terms of the GNU General Public License as published by</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">    the Free Software Foundation, either version 3 of the License, or</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">    (at your option) any later version.</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">    The Mezzanine Engine is distributed in the hope that it will be useful,</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">    but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">    GNU General Public License for more details.</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">    You should have received a copy of the GNU General Public License</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">    along with The Mezzanine Engine.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">/* The original authors have included a copy of the license specified above in the</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">   &#39;Docs&#39; folder. See &#39;gpl.txt&#39;</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">/* We welcome the use of the Mezzanine engine to anyone, including companies who wish to</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">   Build professional software and charge for their product.</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">   However there are some practical restrictions, so if your project involves</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">   any of the following you should contact us and we will try to work something</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">   out:</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">    - DRM or Copy Protection of any kind(except Copyrights)</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">    - Software Patents You Do Not Wish to Freely License</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">    - Any Kind of Linking to Non-GPL licensed Works</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">    - Are Currently In Violation of Another Copyright Holder&#39;s GPL License</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">    - If You want to change our code and not add a few hundred MB of stuff to</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">        your distribution</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment">   These and other limitations could cause serious legal problems if you ignore</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">   them, so it is best to simply contact us or the Free Software Foundation, if</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">   you have any questions.</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">   Joseph Toppi - toppij@gmail.com</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">   John Blackwood - makoenergy02@gmail.com</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#ifndef _uiscreen_h</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define _uiscreen_h</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">#include &quot;matrix4x4.h&quot;</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor">#include &quot;UI/glyph.h&quot;</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#include &quot;UI/vertex.h&quot;</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="preprocessor">#include &quot;UI/renderablecontainer.h&quot;</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="keyword">namespace </span>Mezzanine</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;{</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keyword">class </span>SceneManager;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keyword">namespace </span>Graphics</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    {</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <span class="keyword">class </span>Viewport;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    }</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">namespace </span>UI</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    {</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <span class="keyword">class </span>Button;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <span class="keyword">class </span>Widget;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <span class="keyword">class </span>Sprite;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="keyword">class </span>TextureAtlas;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        <span class="keyword">class </span>UIManager;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keyword">struct </span>ScreenInternalData;<span class="comment"></span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">        ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">        /// @class AtlasAndPosition</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">        /// @headerfile screen.h</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">        /// @brief This class stores how the calls to Render are to be done.</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">        /// @details</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">        ///////////////////////////////////////</span></div>
<div class="line"><a name="l00069"></a><span class="lineno"><a class="code" href="structMezzanine_1_1UI_1_1AtlasAndPosition.xhtml">   69</a></span>&#160;<span class="comment"></span>        <span class="keyword">struct </span><a class="code" href="structMezzanine_1_1UI_1_1AtlasAndPosition.xhtml" title="This class stores how the calls to Render are to be done.">AtlasAndPosition</a></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        {</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a> Atlas;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="Whole is an unsigned integer, it will be at least 32bits in size.">Whole</a> RenderCount;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="Whole is an unsigned integer, it will be at least 32bits in size.">Whole</a> RenderStart;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="Whole is an unsigned integer, it will be at least 32bits in size.">Whole</a> RenderEnd;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            <a class="code" href="structMezzanine_1_1UI_1_1AtlasAndPosition.xhtml" title="This class stores how the calls to Render are to be done.">AtlasAndPosition</a>() : RenderCount(0), RenderStart(0), RenderEnd(0) {};</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        };<span class="comment"></span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">        ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment">        /// @class ScreenVertexData</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">        /// @headerfile screen.h</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">        /// @brief This class stores all vertices pertaining to a layer sorted by their priority for rendering.</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">        /// @details</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment">        ///////////////////////////////////////</span></div>
<div class="line"><a name="l00084"></a><span class="lineno"><a class="code" href="classMezzanine_1_1UI_1_1ScreenVertexData.xhtml">   84</a></span>&#160;<span class="comment"></span>        <span class="keyword">class </span><a class="code" href="classMezzanine_1_1UI_1_1ScreenVertexData.xhtml" title="This class stores all vertices pertaining to a layer sorted by their priority for rendering...">ScreenVertexData</a></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        {</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            <span class="keyword">public</span>:</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            std::vector&lt;VertexData&gt; LowVertices;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            std::vector&lt;VertexData&gt; MediumVertices;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            std::vector&lt;VertexData&gt; HighVertices;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            <span class="keywordtype">void</span> Clear();</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="Whole is an unsigned integer, it will be at least 32bits in size.">Whole</a> Size();</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            <a class="code" href="structMezzanine_1_1UI_1_1VertexData.xhtml" title="Basic class describing a vertex in the UI to be rendered.">VertexData</a>&amp; operator[](<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="Whole is an unsigned integer, it will be at least 32bits in size.">Whole</a>&amp; Index);</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        };<span class="comment"></span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">        ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">        /// @class IndexData</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">        /// @headerfile uiscreen.h</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment">        /// @brief This is a basic class for storing data relating to a specific zorder in the UI.</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">        /// @details This class caches a root widget, it&#39;s verticies, and whether it needs to be redrawn.</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">        ///////////////////////////////////////</span></div>
<div class="line"><a name="l00101"></a><span class="lineno"><a class="code" href="structMezzanine_1_1UI_1_1IndexData.xhtml">  101</a></span>&#160;<span class="comment"></span>        <span class="keyword">struct </span><a class="code" href="structMezzanine_1_1UI_1_1IndexData.xhtml" title="This is a basic class for storing data relating to a specific zorder in the UI.">IndexData</a></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        {</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            <a class="code" href="classMezzanine_1_1UI_1_1Widget.xhtml" title="This class is the base class for all widgets.">Widget</a>* IndexWidget;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            <a class="code" href="classMezzanine_1_1UI_1_1ScreenVertexData.xhtml" title="This class stores all vertices pertaining to a layer sorted by their priority for rendering...">ScreenVertexData</a> Vertices;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            <a class="code" href="structMezzanine_1_1UI_1_1IndexData.xhtml" title="This is a basic class for storing data relating to a specific zorder in the UI.">IndexData</a>() : IndexWidget(NULL) {};</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        };<span class="comment"></span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">        ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">        /// @class Screen</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">        /// @headerfile screen.h</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">        /// @brief This class is a helper class for creating UI&#39;s.  It is responsible for storing and keeping</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">        /// track of all the elements of a single UI screen.</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">        /// @details UI&#39;s can optionally be divided up into Screens, or &quot;pages&quot;.  Each screen is batched together</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">        /// for rendering, so keeping the amount of screens to a minimum will improve performance.</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">        ///////////////////////////////////////</span></div>
<div class="line"><a name="l00116"></a><span class="lineno"><a class="code" href="classMezzanine_1_1UI_1_1Screen.xhtml">  116</a></span>&#160;<span class="comment"></span>        <span class="keyword">class </span><a class="code" href="crossplatformexport_8h.xhtml#a455f91aab9e6a1cf4286f5cdfa74c7bc" title="Some platforms require special decorations to denote what is exported/imported in a share library...">MEZZ_LIB</a> <a class="code" href="classMezzanine_1_1UI_1_1Screen.xhtml" title="This class is a helper class for creating UI&#39;s. It is responsible for storing and keeping track of al...">Screen</a> : <span class="keyword">public</span> <a class="code" href="classMezzanine_1_1UI_1_1ExtendedRenderableFactory.xhtml" title="This class is responsible for the creation and destruction of all UI renderables.">ExtendedRenderableFactory</a></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        {</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            <span class="keyword">public</span>:</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                <span class="keyword">typedef</span> std::map&lt;UInt16,IndexData*&gt;      IndexMap;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                <span class="keyword">typedef</span> IndexMap::iterator               IndexIterator;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                <span class="keyword">typedef</span> IndexMap::reverse_iterator       ReverseIndexIterator;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                <span class="keyword">typedef</span> IndexMap::const_iterator         ConstIndexIterator;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                <span class="keyword">typedef</span> IndexMap::const_reverse_iterator ConstReverseIndexIterator;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                <span class="keyword">typedef</span> std::map&lt;String,Widget*&gt;         WidgetContainer;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                <span class="keyword">typedef</span> WidgetContainer::iterator        WidgetIterator;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                <span class="keyword">typedef</span> WidgetContainer::const_iterator  ConstWidgetIterator;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classMezzanine_1_1UI_1_1UIManager.xhtml" title="This class is responsible for any and all user interactions with the User interface/HUD.">UIManager</a>;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                <a class="code" href="classMezzanine_1_1Graphics_1_1Viewport.xhtml" title="This class is for creating and managing viewports within a game window.">Graphics::Viewport</a>* GameViewport;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                <a class="code" href="structMezzanine_1_1UI_1_1ScreenInternalData.xhtml" title="Basic struct holding some of the internal bits of this class that could not be placed on the class di...">ScreenInternalData</a>* SID;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                <span class="keywordtype">bool</span> OrientationChanged;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                <span class="keywordtype">bool</span> Visible;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                <span class="keywordtype">bool</span> IndexRedrawNeeded;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                <span class="keywordtype">bool</span> IndexRedrawAll;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                <span class="keywordtype">bool</span> ViewportSizeChanged;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="Whole is an unsigned integer, it will be at least 32bits in size.">Whole</a> VertexBufferSize;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                <a class="code" href="namespaceMezzanine.xhtml#a8892173bd6aaf7d0e34a07b2b30aad33" title="Simple enum for communicating the orientation the UI and Camera have relative to the world it is rend...">Mezzanine::OrientationMode</a> Orientation;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                <a class="code" href="classMezzanine_1_1Vector2.xhtml" title="This is used to represent a point on a 2 dimentional area, such as a screen.">Vector2</a> KnownViewportSize;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                <a class="code" href="classMezzanine_1_1Vector2.xhtml" title="This is used to represent a point on a 2 dimentional area, such as a screen.">Vector2</a> InverseViewportSize;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> Scale;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                <a class="code" href="classMezzanine_1_1Matrix4x4.xhtml">Matrix4x4</a> VertexTransform;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a> Name;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a> PrimaryAtlas;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                std::vector&lt;AtlasAndPosition&gt; TextureByVertex;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                IndexMap WidgetsRoot;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                WidgetContainer Widgets;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                <span class="keyword">virtual</span> <a class="code" href="classMezzanine_1_1SceneManager.xhtml" title="This class contains utilities and functions to allow the manipulation of the Graphical scene...">SceneManager</a>* GetSceneManager();</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                <span class="keyword">virtual</span> <a class="code" href="classMezzanine_1_1UI_1_1Screen.xhtml" title="This class is a helper class for creating UI&#39;s. It is responsible for storing and keeping track of al...">Screen</a>* GetScreen();</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                <span class="keyword">virtual</span> <a class="code" href="classMezzanine_1_1UI_1_1Widget.xhtml" title="This class is the base class for all widgets.">Widget</a>* CheckAndInsert(<a class="code" href="classMezzanine_1_1UI_1_1Widget.xhtml" title="This class is the base class for all widgets.">Widget</a>* ToInsert);</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                <span class="keyword">virtual</span> <span class="keywordtype">void</span> PrepareRenderSystem();</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                <span class="keyword">virtual</span> <span class="keywordtype">void</span> CreateVertexBuffer(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="Whole is an unsigned integer, it will be at least 32bits in size.">Whole</a>&amp; InitialSize = 32);</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                <span class="keyword">virtual</span> <span class="keywordtype">void</span> DestroyVertexBuffer();</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                <span class="keyword">virtual</span> <span class="keywordtype">void</span> ResizeVertexBuffer(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="Whole is an unsigned integer, it will be at least 32bits in size.">Whole</a>&amp; RequestedSize);</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            <span class="comment">//public:</span><span class="comment"></span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">                /// @brief Internal constructor.</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">                /// @param name The name of this screen.</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment">                /// @param Atlas The name of the primary atlas to be assigned to this screen.</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment">                /// This can be overridden later, even by individual UI elements.</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment">                /// @param WindowViewport The Viewport to which this screen belongs.</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment"></span>                <a class="code" href="classMezzanine_1_1UI_1_1Screen.xhtml" title="This class is a helper class for creating UI&#39;s. It is responsible for storing and keeping track of al...">Screen</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; name, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; Atlas, <a class="code" href="classMezzanine_1_1Graphics_1_1Viewport.xhtml" title="This class is for creating and managing viewports within a game window.">Graphics::Viewport</a>* WindowViewport);<span class="comment"></span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment">                /// @brief Class destructor.</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> ~<a class="code" href="classMezzanine_1_1UI_1_1Screen.xhtml" title="This class is a helper class for creating UI&#39;s. It is responsible for storing and keeping track of al...">Screen</a>();</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;            <span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">                ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment"></span>                <span class="comment">// Utility and Visibility Methods</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">                /// @brief Gets the name of this screen.</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">                /// @return Returns a string containing the name of this screen.</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; GetName();<span class="comment"></span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment">                /// @brief Sets the screens visability.</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment">                /// @param visable A bool representing the visability of the screen.</span></div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetVisible(<span class="keywordtype">bool</span> visible);<span class="comment"></span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment">                /// @brief Gets the screens visability.</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment">                /// @return Returns a bool representing the visability of the screen.</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">bool</span> IsVisible();<span class="comment"></span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment">                /// @brief Forces the screen to be shown.</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">void</span> Show();<span class="comment"></span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment">                /// @brief Forces the screen to hide.</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">void</span> Hide();<span class="comment"></span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment">                /// @brief Gets the current viewport dimensions.</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment">                /// @return Returns a Vector2 representing the current viewport dimensions.</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code" href="classMezzanine_1_1Vector2.xhtml" title="This is used to represent a point on a 2 dimentional area, such as a screen.">Vector2</a>&amp; GetViewportDimensions();<span class="comment"></span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment">                /// @brief Checks to see if the viewport has changed in size.  If so it updates all the UI elements on the screen.</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">void</span> CheckViewportSize();<span class="comment"></span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment">                /// @brief Gets the Viewport this screen is currently rendering to.</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment">                /// @return Returns a pointer to the Viewport this screen is applied to.</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <a class="code" href="classMezzanine_1_1Graphics_1_1Viewport.xhtml" title="This class is for creating and managing viewports within a game window.">Graphics::Viewport</a>* GetViewport();</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment">                ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment"></span>                <span class="comment">// Hover Checks</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment">                /// @brief Gets the widget the mouse is over if any.</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment">                /// @details This function searches only the visable layers contained in this screen.</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment">                /// @return Returns the widget the mouse is over, or NULL if there are none.</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <a class="code" href="classMezzanine_1_1UI_1_1Widget.xhtml" title="This class is the base class for all widgets.">Widget</a>* CheckWidgetMouseIsOver();</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment">                ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment"></span>                <span class="comment">// Creating Widgets</span></div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="comment">                /// @copydoc RenderableFactory::CreateButton(ConstString&amp; Name, const RenderableRect&amp; Rect)</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <a class="code" href="classMezzanine_1_1UI_1_1Button.xhtml" title="This class is a helper class, specifically for use as a button.">Button</a>* CreateButton(<a class="code" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506" title="A Datatype used to a series of imutable characters.">ConstString</a>&amp; Name, <span class="keyword">const</span> <a class="code" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml" title="This class contains all the utilities necessary for capturing input.">RenderableRect</a>&amp; Rect);<span class="comment"></span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="comment">                /// @copydoc RenderableFactory::CreateButton(ConstString&amp; Name, const RenderableRect&amp; Rect, const Whole&amp; Glyph, ConstString&amp; Text)</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <a class="code" href="classMezzanine_1_1UI_1_1Button.xhtml" title="This class is a helper class, specifically for use as a button.">Button</a>* CreateButton(<a class="code" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506" title="A Datatype used to a series of imutable characters.">ConstString</a>&amp; Name, <span class="keyword">const</span> <a class="code" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml" title="This class contains all the utilities necessary for capturing input.">RenderableRect</a>&amp; Rect, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="Whole is an unsigned integer, it will be at least 32bits in size.">Whole</a>&amp; <a class="code" href="classMezzanine_1_1UI_1_1Glyph.xhtml" title="Class used to describe a single glyph or character available for text operations.">Glyph</a>, <a class="code" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506" title="A Datatype used to a series of imutable characters.">ConstString</a>&amp; Text);<span class="comment"></span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="comment">                /// @copydoc RenderableFactory::CreateButton(ConstString&amp; Name, const RenderableRect&amp; Rect, const Real&amp; LineHeight, ConstString&amp; Text)</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <a class="code" href="classMezzanine_1_1UI_1_1Button.xhtml" title="This class is a helper class, specifically for use as a button.">Button</a>* CreateButton(<a class="code" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506" title="A Datatype used to a series of imutable characters.">ConstString</a>&amp; Name, <span class="keyword">const</span> <a class="code" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml" title="This class contains all the utilities necessary for capturing input.">RenderableRect</a>&amp; Rect, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a>&amp; LineHeight, <a class="code" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506" title="A Datatype used to a series of imutable characters.">ConstString</a>&amp; Text);<span class="comment"></span></div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="comment">                /// @copydoc RenderableFactory::CreateScrollbar(ConstString&amp; Name, const RenderableRect&amp; Rect, const UI::ScrollbarStyle&amp; Style)</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <a class="code" href="classMezzanine_1_1UI_1_1Scrollbar.xhtml" title="This class is a widget class, to be used alongside any scrollable widget.">Scrollbar</a>* CreateScrollbar(<a class="code" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506" title="A Datatype used to a series of imutable characters.">ConstString</a>&amp; Name, <span class="keyword">const</span> <a class="code" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml" title="This class contains all the utilities necessary for capturing input.">RenderableRect</a>&amp; Rect, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine_1_1UI.xhtml#a5998a9bf372a7e92605c0c461736e763" title="Used by the scrollbar class to determine what styling should be used for the scrollbar.">UI::ScrollbarStyle</a>&amp; Style);<span class="comment"></span></div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="comment">                /// @copydoc RenderableFactory::CreateCheckBox(ConstString&amp; Name, const RenderableRect&amp; Rect, const Real&amp; LineHeight, const String &amp;LabelText)</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <a class="code" href="classMezzanine_1_1UI_1_1CheckBox.xhtml" title="This is a simple widget for storing a bool value.">CheckBox</a>* CreateCheckBox(<a class="code" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506" title="A Datatype used to a series of imutable characters.">ConstString</a>&amp; Name, <span class="keyword">const</span> <a class="code" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml" title="This class contains all the utilities necessary for capturing input.">RenderableRect</a>&amp; Rect, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a>&amp; LineHeight, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; LabelText);<span class="comment"></span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="comment">                /// @copydoc RenderableFactory::CreateListBox(ConstString&amp; Name, const RenderableRect&amp; Rect, const UI::ScrollbarStyle&amp; ScrollbarStyle)</span></div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <a class="code" href="classMezzanine_1_1UI_1_1ListBox.xhtml" title="This is a widget for displaying a list of captions in a box.">ListBox</a>* CreateListBox(<a class="code" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506" title="A Datatype used to a series of imutable characters.">ConstString</a>&amp; Name, <span class="keyword">const</span> <a class="code" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml" title="This class contains all the utilities necessary for capturing input.">RenderableRect</a>&amp; Rect, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine_1_1UI.xhtml#a5998a9bf372a7e92605c0c461736e763" title="Used by the scrollbar class to determine what styling should be used for the scrollbar.">UI::ScrollbarStyle</a>&amp; ScrollStyle);<span class="comment"></span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="comment">                /// @copydoc RenderableFactory::CreateSpinner(ConstString&amp; Name, const RenderableRect&amp; Rect, const UI::SpinnerStyle&amp; SStyle, const Real&amp; GlyphHeight)</span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <a class="code" href="classMezzanine_1_1UI_1_1Spinner.xhtml" title="This is a simple widget for a numeric variable in a box.">Spinner</a>* CreateSpinner(<a class="code" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506" title="A Datatype used to a series of imutable characters.">ConstString</a>&amp; Name, <span class="keyword">const</span> <a class="code" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml" title="This class contains all the utilities necessary for capturing input.">RenderableRect</a>&amp; Rect, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine_1_1UI.xhtml#a62462d4df783dcdda77e1590a96bc6d6" title="Used by the spinner class to determine what styling should be used for the spinner.">UI::SpinnerStyle</a>&amp; SStyle, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a>&amp; GlyphHeight);<span class="comment"></span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment">                /// @copydoc RenderableFactory::CreateScrolledCellGrid(ConstString&amp; Name, const RenderableRect&amp; Rect, const Real&amp; Thickness, const UI::ScrollbarStyle&amp; Style)</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <a class="code" href="classMezzanine_1_1UI_1_1ScrolledCellGrid.xhtml" title="This is a specialization of the cell grid that allows you to use scrollbars to navigate the cells on ...">ScrolledCellGrid</a>* CreateScrolledCellGrid(<a class="code" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506" title="A Datatype used to a series of imutable characters.">ConstString</a>&amp; Name, <span class="keyword">const</span> <a class="code" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml" title="This class contains all the utilities necessary for capturing input.">RenderableRect</a>&amp; Rect, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a>&amp; Thickness, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine_1_1UI.xhtml#a5998a9bf372a7e92605c0c461736e763" title="Used by the scrollbar class to determine what styling should be used for the scrollbar.">UI::ScrollbarStyle</a>&amp; Style);<span class="comment"></span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment">                /// @copydoc RenderableFactory::CreatePagedCellGrid(ConstString&amp; Name, const RenderableRect&amp; Rect, const RenderableRect&amp; SpnRect, const UI::SpinnerStyle&amp; SStyle, const Real&amp; GlyphHeight)</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <a class="code" href="classMezzanine_1_1UI_1_1PagedCellGrid.xhtml" title="This is a specialization of the cell grid that allows you to use a spinner to navigate through pages ...">PagedCellGrid</a>* CreatePagedCellGrid(<a class="code" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506" title="A Datatype used to a series of imutable characters.">ConstString</a>&amp; Name, <span class="keyword">const</span> <a class="code" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml" title="This class contains all the utilities necessary for capturing input.">RenderableRect</a>&amp; Rect, <span class="keyword">const</span> <a class="code" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml" title="This class contains all the utilities necessary for capturing input.">RenderableRect</a>&amp; SpnRect, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine_1_1UI.xhtml#a62462d4df783dcdda77e1590a96bc6d6" title="Used by the spinner class to determine what styling should be used for the spinner.">UI::SpinnerStyle</a>&amp; SStyle, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a>&amp; GlyphHeight);<span class="comment"></span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment">                /// @copydoc RenderableFactory::CreateDropDownList(ConstString&amp; Name, const RenderableRect&amp; Rect, const Real&amp; LineHeight, const UI::ScrollbarStyle&amp; ScrollStyle)</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <a class="code" href="classMezzanine_1_1UI_1_1DropDownList.xhtml" title="A widget that displays one selection from a list that can have it&#39;s visibility toggled.">DropDownList</a>* CreateDropDownList(<a class="code" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506" title="A Datatype used to a series of imutable characters.">ConstString</a>&amp; Name, <span class="keyword">const</span> <a class="code" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml" title="This class contains all the utilities necessary for capturing input.">RenderableRect</a>&amp; Rect, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a>&amp; LineHeight, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine_1_1UI.xhtml#a5998a9bf372a7e92605c0c461736e763" title="Used by the scrollbar class to determine what styling should be used for the scrollbar.">UI::ScrollbarStyle</a>&amp; ScrollStyle);<span class="comment"></span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment">                /// @copydoc RenderableFactory::CreateTabSet(ConstString&amp; Name, const RenderableRect&amp; SetRect)</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <a class="code" href="classMezzanine_1_1UI_1_1TabSet.xhtml" title="This is a widget that stores sets of renderables but only displays one at a time.">TabSet</a>* CreateTabSet(<a class="code" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506" title="A Datatype used to a series of imutable characters.">ConstString</a>&amp; Name, <span class="keyword">const</span> <a class="code" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml" title="This class contains all the utilities necessary for capturing input.">RenderableRect</a>&amp; SetRect);<span class="comment"></span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment">                /// @copydoc RenderableFactory::CreateEnclosedRenderableContainerWidget(ConstString&amp; Name, const RenderableRect&amp; Rect)</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <a class="code" href="classMezzanine_1_1UI_1_1EnclosedRenderableContainerWidget.xhtml" title="This is an abstract class for the creation and storage of widgets to be used by other classes...">EnclosedRenderableContainerWidget</a>* CreateEnclosedRenderableContainerWidget(<a class="code" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506" title="A Datatype used to a series of imutable characters.">ConstString</a>&amp; Name, <span class="keyword">const</span> <a class="code" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml" title="This class contains all the utilities necessary for capturing input.">RenderableRect</a>&amp; Rect);<span class="comment"></span></div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment">                /// @copydoc ExtendedRenderableFactory::CreateWidgetWindow(ConstString&amp; Name, const RenderableRect&amp; Rect)</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <a class="code" href="classMezzanine_1_1UI_1_1Window.xhtml" title="This is a container widget capable of holding any other widget.">Window</a>* CreateWidgetWindow(<a class="code" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506" title="A Datatype used to a series of imutable characters.">ConstString</a>&amp; Name, <span class="keyword">const</span> <a class="code" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml" title="This class contains all the utilities necessary for capturing input.">RenderableRect</a>&amp; Rect);<span class="comment"></span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment">                /// @copydoc ExtendedRenderableFactory::CreateMenu(ConstString&amp; Name, const RenderableRect&amp; Rect)</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <a class="code" href="classMezzanine_1_1UI_1_1Menu.xhtml" title="This class is a control mechanism for multiple windows in a heirarchy.">Menu</a>* CreateMenu(<a class="code" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506" title="A Datatype used to a series of imutable characters.">ConstString</a>&amp; Name, <span class="keyword">const</span> <a class="code" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml" title="This class contains all the utilities necessary for capturing input.">RenderableRect</a>&amp; Rect);<span class="comment"></span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment">                /// @copydoc ExtendedRenderableFactory::CreateOpenRenderableContainerWidget(ConstString&amp; Name)</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <a class="code" href="classMezzanine_1_1UI_1_1OpenRenderableContainerWidget.xhtml">OpenRenderableContainerWidget</a>* CreateOpenRenderableContainerWidget(<a class="code" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506" title="A Datatype used to a series of imutable characters.">ConstString</a>&amp; Name);</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="comment">                ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="comment"></span>                <span class="comment">// Working with all Widgets</span></div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment">                /// @brief Adds a widget to the root of this screen for rendering.</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="comment">                /// @param ZOrder The ZOrder the widget will be rendered at on this screen relative to other root widgets.</span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="comment">                /// @param ToAdd The widget to be added.</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">void</span> AddRootWidget(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="Whole is an unsigned integer, it will be at least 32bits in size.">Whole</a>&amp; ZOrder, <a class="code" href="classMezzanine_1_1UI_1_1Widget.xhtml" title="This class is the base class for all widgets.">Widget</a>* ToAdd);<span class="comment"></span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="comment">                /// @brief Gets a widget in this screen by name.</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="comment">                /// @param Name The name of the widget to get.</span></div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="comment">                /// @return Returns a pointer to the widget of the specified name.</span></div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <a class="code" href="classMezzanine_1_1UI_1_1Widget.xhtml" title="This class is the base class for all widgets.">Widget</a>* GetWidget(<a class="code" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506" title="A Datatype used to a series of imutable characters.">ConstString</a>&amp; Name);<span class="comment"></span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="comment">                /// @brief Gets a widget by it&#39;s ZOrder among the root widgets on this screen.</span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="comment">                /// @param ZOrder The ZOrder of the widget to get.</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="comment">                /// @return Returns a pointer to the widget with the specified ZOrder.</span></div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <a class="code" href="classMezzanine_1_1UI_1_1Widget.xhtml" title="This class is the base class for all widgets.">Widget</a>* GetWidget(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="Whole is an unsigned integer, it will be at least 32bits in size.">Whole</a>&amp; ZOrder);<span class="comment"></span></div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="comment">                /// @brief Gets the number of widgets being used in this screen.</span></div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="comment">                /// @return Returns the number of widgets this screen is storing.</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="Whole is an unsigned integer, it will be at least 32bits in size.">Whole</a> GetNumWidgets();</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="comment">                ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="comment"></span>                <span class="comment">// Atlas Query</span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="comment">                /// @brief Sets the Atlas to be assumed when one isn&#39;t provided for atlas related tasks.</span></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="comment">                /// @param Atlas The name of the atlas to be used.</span></div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetPrimaryAtlas(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; Atlas);<span class="comment"></span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="comment">                /// @brief Gets the currently set primary atlas.</span></div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="comment">                /// @return Returns a string containing the name of the primary atlas that is set.</span></div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a> GetPrimaryAtlas();<span class="comment"></span></div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="comment">                /// @brief Gets the solid UV position from an Atlas.</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="comment">                /// @param Atlas The name of the Atlas to get the Solid UV from.</span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="comment">                /// @return Returns a Vector2 with the location of Solid UV on the Atlas.</span></div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="comment"></span>                <a class="code" href="classMezzanine_1_1Vector2.xhtml" title="This is used to represent a point on a 2 dimentional area, such as a screen.">Vector2</a> GetSolidUV(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; Atlas) <span class="keyword">const</span>;<span class="comment"></span></div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="comment">                /// @brief Gets a sprite from an Atlas.</span></div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="comment">                /// @param SpriteName The name of the sprite to retrieve.</span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="comment">                /// @param Atlas The name of the Atlas to get the sprite from.</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="comment">                /// @return Returns a pointer to the requested Sprite.</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="comment"></span>                <a class="code" href="structMezzanine_1_1UI_1_1Sprite.xhtml" title="Basic class used to describe a portion of a texture to be applied to a Quad.">Sprite</a>* GetSprite(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; SpriteName, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; Atlas) <span class="keyword">const</span>;<span class="comment"></span></div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="comment">                /// @brief Gets the specified GlyphData from an Atlas.</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="comment">                /// @param ID The identification number associated with the loaded GlyphData.</span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="comment">                /// @param Atlas The name of the atlas to check the specified GlyphData ID for.</span></div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="comment">                /// @return Returns a pointer to the requested GlyphData.</span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="comment"></span>                <a class="code" href="classMezzanine_1_1UI_1_1GlyphData.xhtml" title="Class used to describe a single glyph or character available for text operations.">GlyphData</a>* GetGlyphData(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="Whole is an unsigned integer, it will be at least 32bits in size.">Whole</a>&amp; ID, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; Atlas) <span class="keyword">const</span>;<span class="comment"></span></div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="comment">                /// @brief Gets the texture size of the specified Atlas.</span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="comment">                /// @param Atlas The name of the atlas to get the texture size of.</span></div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="comment">                /// @return Returns a Vector2 containing the size of the requested Atlas.</span></div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="comment"></span>                <a class="code" href="classMezzanine_1_1Vector2.xhtml" title="This is used to represent a point on a 2 dimentional area, such as a screen.">Vector2</a> GetTextureSize(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; Atlas) <span class="keyword">const</span>;<span class="comment"></span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="comment">                /// @brief Gets an atlas that has been loaded.</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="comment">                /// @param Atlas The name of the Atlas to retrieve, usually stored as a filename.</span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="comment">                /// @return Returns a pointer to the requested Texture Atlas.</span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="comment"></span>                <a class="code" href="classMezzanine_1_1UI_1_1TextureAtlas.xhtml">TextureAtlas</a>* GetAtlas(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; Atlas) <span class="keyword">const</span>;<span class="comment"></span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="comment">                /// @brief Gets the ColourValue set at the specified index.</span></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="comment">                /// @param Index The index of the Markup colour to get.</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="comment">                /// @param Atlas The Atlas to check the markup colours of.</span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="comment">                /// @return Returns a ColourValue with the colour at the provided index, or White if the Index is invalid(or if that is the colour set, which would be silly).</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="comment"></span>                <a class="code" href="classMezzanine_1_1ColourValue.xhtml" title="This is a simple class for holding 4 reals representing the colour any give object or lightsource can...">ColourValue</a> GetMarkupColour(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="Whole is an unsigned integer, it will be at least 32bits in size.">Whole</a>&amp; Index, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; Atlas) <span class="keyword">const</span>;<span class="comment"></span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="comment">                /// @brief Gets the X axis Texel Offset for the current rendersystem.</span></div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="comment">                /// @return Retruns a real containing the texel offset to be applied to renderables on this screen.</span></div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> GetTexelOffsetX() <span class="keyword">const</span>;<span class="comment"></span></div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="comment">                /// @brief Gets the Y axis Texel Offset for the current rendersystem.</span></div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="comment">                /// @return Retruns a real containing the texel offset to be applied to renderables on this screen.</span></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> GetTexelOffsetY() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="comment">                ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="comment"></span>                <span class="comment">// Internal Functions</span></div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="comment">                /// @internal</span></div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="comment">                /// @brief Manually calls the UI system to render this screen.</span></div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">void</span> _RenderScreen();<span class="comment"></span></div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="comment">                /// @internal</span></div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="comment">                /// @brief Forces an orientation mode change for this screen.</span></div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="comment">                /// @param Mode The orientation mode to be applied to the UI on this screen.</span></div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">void</span> _SetOrientation(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#a8892173bd6aaf7d0e34a07b2b30aad33" title="Simple enum for communicating the orientation the UI and Camera have relative to the world it is rend...">Mezzanine::OrientationMode</a>&amp; Mode);<span class="comment"></span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="comment">                /// @internal</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="comment">                /// @brief Updates the vertex positions so they are in front of the camera in world space.</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="comment">                /// @param Vertices Vector of the vertices to be transformed.</span></div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="comment">                /// @param Begin The first Vertex to transform in the range.</span></div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="comment">                /// @param End The last Vertex to transform in the range.</span></div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">void</span> _Transform(<a class="code" href="classMezzanine_1_1UI_1_1ScreenVertexData.xhtml" title="This class stores all vertices pertaining to a layer sorted by their priority for rendering...">ScreenVertexData</a>&amp; Vertices, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="Whole is an unsigned integer, it will be at least 32bits in size.">Whole</a>&amp; Begin, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="Whole is an unsigned integer, it will be at least 32bits in size.">Whole</a>&amp; End);<span class="comment"></span></div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="comment">                /// @internal</span></div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="comment">                /// @brief Clears the existing verticies and regenerates them for a specific index(widget).</span></div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="comment">                /// @param Index The Index corresponding to the widget you want regenerated.</span></div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">void</span> _RedrawIndex(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#abea3b8e8e9b03d2547b2800284ba682d" title="An 32-bit unsigned integer.">UInt32</a>&amp; Index);<span class="comment"></span></div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="comment">                /// @internal</span></div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="comment">                /// @brief Clears all verticies for every widget and regenerates them for rendering.</span></div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="comment">                /// @param Force Whether or not to force a redraw on all layers regardless of if they need it.</span></div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">void</span> _RedrawAllIndexes(<span class="keywordtype">bool</span> Force = <span class="keyword">false</span>);<span class="comment"></span></div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="comment">                /// @internal</span></div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="comment">                /// @brief Flags a widget for redraw before the next render.</span></div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="comment">                /// @param Index The ID or Index of the widget to be flagged for redraw.</span></div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">void</span> _RequestIndexRedraw(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#a1b6c09063432c7ddd87011c88306c767" title="An 16-bit unsigned integer.">UInt16</a>&amp; Index);<span class="comment"></span></div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="comment">                /// @internal</span></div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="comment">                /// @brief Prepares all vertices for rendering to the screen.</span></div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="comment">                /// @param Force Whether or not to force preparation regardless of if they need it.</span></div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">void</span> _RenderVertices(<span class="keywordtype">bool</span> Force = <span class="keyword">false</span>);</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        };<span class="comment">//uiscreen</span></div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    }<span class="comment">//ui</span></div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;}<span class="comment">//Mezzanine</span></div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="preprocessor">#endif</span></div>
</div><!-- fragment --></div><!-- contents -->
<hr class="footer"/><address class="footer"><small>
Generated on Sat Sep 14 2013 00:19:06 for MezzanineEngine by&#160;<a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1</small></address>
</body>
</html>
