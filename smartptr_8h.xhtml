<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>/home/Code/Mezzanine/Mezzanine/src/smartptr.h File Reference</title>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="DoxyStyle.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script> 
</head>
<body onload='searchBox.OnSelectItem(0);'>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;" nowrap="nowrap">
   <div id="projectname"><a href="http://blacktoppstudios.com"><img src="logogreen100pxtall.png"/></a>MezzanineEngine&#160;<span id="projectnumber">September14,2013</span></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_df2e1c8414b6a086be441ff04537838a.xhtml">Mezzanine</a></li><li class="navelem"><a class="el" href="dir_2b71fc9949116feedacddb93a79d832d.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#namespaces">Namespaces</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">smartptr.h File Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>This file describes and implements any pointers or typedefs to pointers that the <a class="el" href="namespaceMezzanine.xhtml" title="The bulk of the engine components go in this namspace.">Mezzanine</a> uses and exposes in its API.  
<a href="#details">More...</a></p>
<div class="textblock"><code>#include &quot;<a class="el" href="datatypes_8h_source.xhtml">datatypes.h</a>&quot;</code><br/>
<code>#include &lt;memory&gt;</code><br/>
</div><div class="textblock"><div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Include dependency graph for smartptr.h:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="smartptr_8h__incl.svg" width="100%" height="460"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>
</div><div class="textblock"><div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> This graph shows which files directly or indirectly include this file:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="smartptr_8h__dep__incl.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>
</div>
<p><a href="smartptr_8h_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CountedPtr.xhtml">Mezzanine::CountedPtr&lt; TypePointedTo &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A simple reference counting pointer.  <a href="classMezzanine_1_1CountedPtr.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CountedPtr.xhtml">Mezzanine::CountedPtr&lt; TypePointedTo &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A simple reference counting pointer.  <a href="classMezzanine_1_1CountedPtr.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CountedPtrCastImpl.xhtml">Mezzanine::CountedPtrCastImpl&lt; ReturnPointer, OriginalPointer, CountedPointerCastingState &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is used as to determine how a <a class="el" href="classMezzanine_1_1CountedPtr.xhtml" title="A simple reference counting pointer.">CountedPtr</a> performs castin between pointer types internally.  <a href="classMezzanine_1_1CountedPtrCastImpl.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CountedPtrCastImpl.xhtml">Mezzanine::CountedPtrCastImpl&lt; ReturnPointer, OriginalPointer, CountedPointerCastingState &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is used as to determine how a <a class="el" href="classMezzanine_1_1CountedPtr.xhtml" title="A simple reference counting pointer.">CountedPtr</a> performs castin between pointer types internally.  <a href="classMezzanine_1_1CountedPtrCastImpl.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CountedPtrCastImpl_3_01OriginalPointer_00_01OriginalPointer_00_01CastNoneError_01_4.xhtml">Mezzanine::CountedPtrCastImpl&lt; OriginalPointer, OriginalPointer, CastNoneError &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An implementation of the CountedPtrCast that always return the pointer passed reached via CastNoneError in the <a class="el" href="classMezzanine_1_1ReferenceCountTraits.xhtml" title="This is used to deduce at compile if a specific class has built-in reference counting or needs an ext...">ReferenceCountTraits</a> of the target class.  <a href="classMezzanine_1_1CountedPtrCastImpl_3_01OriginalPointer_00_01OriginalPointer_00_01CastNoneError_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CountedPtrCastImpl_3_01ReturnPointer_00_01OriginalPointer_00_01CastDynamic_01_4.xhtml">Mezzanine::CountedPtrCastImpl&lt; ReturnPointer, OriginalPointer, CastDynamic &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An implementation of the CountedPtrCast that naively dynamic casts the passed pointer. Reached by putting CastDynamic in the <a class="el" href="classMezzanine_1_1ReferenceCountTraits.xhtml" title="This is used to deduce at compile if a specific class has built-in reference counting or needs an ext...">ReferenceCountTraits</a> of the target class.  <a href="classMezzanine_1_1CountedPtrCastImpl_3_01ReturnPointer_00_01OriginalPointer_00_01CastDynamic_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CountedPtrCastImpl_3_01ReturnPointer_00_01OriginalPointer_00_01CastImplicit_01_4.xhtml">Mezzanine::CountedPtrCastImpl&lt; ReturnPointer, OriginalPointer, CastImplicit &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An implementation of the CountedPtrCast that casts the passed pointer. Reached by putting CastStatic in the <a class="el" href="classMezzanine_1_1ReferenceCountTraits.xhtml" title="This is used to deduce at compile if a specific class has built-in reference counting or needs an ext...">ReferenceCountTraits</a> of the target class.  <a href="classMezzanine_1_1CountedPtrCastImpl_3_01ReturnPointer_00_01OriginalPointer_00_01CastImplicit_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CountedPtrCastImpl_3_01ReturnPointer_00_01OriginalPointer_00_01CastNoneReturnZero_01_4.xhtml">Mezzanine::CountedPtrCastImpl&lt; ReturnPointer, OriginalPointer, CastNoneReturnZero &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An implementation of the CountedPtrCast that always returns 0 cast to the original pointer type. Reached by putting CastNoneReturnZero in the <a class="el" href="classMezzanine_1_1ReferenceCountTraits.xhtml" title="This is used to deduce at compile if a specific class has built-in reference counting or needs an ext...">ReferenceCountTraits</a> of the target class.  <a href="classMezzanine_1_1CountedPtrCastImpl_3_01ReturnPointer_00_01OriginalPointer_00_01CastNoneReturnZero_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CountedPtrCastImpl_3_01ReturnPointer_00_01OriginalPointer_00_01CastStatic_01_4.xhtml">Mezzanine::CountedPtrCastImpl&lt; ReturnPointer, OriginalPointer, CastStatic &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An implementation of the CountedPtrCast that naively static casts the passed pointer. Reached by putting CastStatic in the <a class="el" href="classMezzanine_1_1ReferenceCountTraits.xhtml" title="This is used to deduce at compile if a specific class has built-in reference counting or needs an ext...">ReferenceCountTraits</a> of the target class.  <a href="classMezzanine_1_1CountedPtrCastImpl_3_01ReturnPointer_00_01OriginalPointer_00_01CastStatic_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1IntrusiveRefCount.xhtml">Mezzanine::IntrusiveRefCount</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A sample class that implements a minimal intrusive reference counting scheme.  <a href="classMezzanine_1_1IntrusiveRefCount.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ReferenceCount.xhtml">Mezzanine::ReferenceCount&lt; TypePointedTo &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This exists once per object managed by a group of shared pointer to track items in memory.  <a href="classMezzanine_1_1ReferenceCount.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ReferenceCountTraits.xhtml">Mezzanine::ReferenceCountTraits&lt; T &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is used to deduce at compile if a specific class has built-in reference counting or needs an external reference count.  <a href="classMezzanine_1_1ReferenceCountTraits.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ReferenceCountTraits.xhtml">Mezzanine::ReferenceCountTraits&lt; T &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is used to deduce at compile if a specific class has built-in reference counting or needs an external reference count.  <a href="classMezzanine_1_1ReferenceCountTraits.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ReferenceCountTraits_3_01IntrusiveRefCount_01_4.xhtml">Mezzanine::ReferenceCountTraits&lt; IntrusiveRefCount &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An Example <a class="el" href="classMezzanine_1_1ReferenceCountTraits.xhtml" title="This is used to deduce at compile if a specific class has built-in reference counting or needs an ext...">ReferenceCountTraits</a> implmentation.  <a href="classMezzanine_1_1ReferenceCountTraits_3_01IntrusiveRefCount_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespaceMezzanine"><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml">Mezzanine</a></td></tr>
<tr class="memdesc:namespaceMezzanine"><td class="mdescLeft">&#160;</td><td class="mdescRight">The bulk of the engine components go in this namspace. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:ad937b4d169586b963a9545c39fe66739"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#ad937b4d169586b963a9545c39fe66739">Mezzanine::CountedPointerCastingState</a> { <br/>
&#160;&#160;<a class="el" href="namespaceMezzanine.xhtml#ad937b4d169586b963a9545c39fe66739a80b6e8497f1239b63fb0bac739f5618f">Mezzanine::CastNoneError</a> = -2, 
<a class="el" href="namespaceMezzanine.xhtml#ad937b4d169586b963a9545c39fe66739ae348e547d2f989d5704dca631120c733">Mezzanine::CastNoneReturnZero</a> = -1, 
<a class="el" href="namespaceMezzanine.xhtml#ad937b4d169586b963a9545c39fe66739ae59dfba69bca041768bad858c2d34151">Mezzanine::CastImplicit</a> = 1, 
<a class="el" href="namespaceMezzanine.xhtml#ad937b4d169586b963a9545c39fe66739a823a0503378eda9a9d1a1916a4d1e881">Mezzanine::CastStatic</a> = 2, 
<br/>
&#160;&#160;<a class="el" href="namespaceMezzanine.xhtml#ad937b4d169586b963a9545c39fe66739ab052c77358611ba65ad3a013cb430867">Mezzanine::CastDynamic</a> = 3
<br/>
 }</td></tr>
<tr class="memdesc:ad937b4d169586b963a9545c39fe66739"><td class="mdescLeft">&#160;</td><td class="mdescRight">CountedPointer casting implementation states.  <a href="namespaceMezzanine.xhtml#ad937b4d169586b963a9545c39fe66739">More...</a><br/></td></tr>
<tr class="separator:ad937b4d169586b963a9545c39fe66739"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ab4224173a1ac42674b1ff813d72a1666"><td class="memTemplParams" colspan="2">template&lt;typename ReturnType , typename OtherPointerTargetType &gt; </td></tr>
<tr class="memitem:ab4224173a1ac42674b1ff813d72a1666"><td class="memTemplItemLeft" align="right" valign="top">CountedPtr&lt; ReturnType &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#ab4224173a1ac42674b1ff813d72a1666">Mezzanine::CountedPtrCast</a> (CountedPtr&lt; OtherPointerTargetType &gt; &amp;Original)</td></tr>
<tr class="memdesc:ab4224173a1ac42674b1ff813d72a1666"><td class="mdescLeft">&#160;</td><td class="mdescRight">A compile time cast that uses only the implicit conversion of the underlying raw pointers.  <a href="#ab4224173a1ac42674b1ff813d72a1666">More...</a><br/></td></tr>
<tr class="separator:ab4224173a1ac42674b1ff813d72a1666"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d26cc4afa9fedd9c998091d2d960784"><td class="memTemplParams" colspan="2">template&lt;typename ReturnType , typename OtherPointerTargetType &gt; </td></tr>
<tr class="memitem:a5d26cc4afa9fedd9c998091d2d960784"><td class="memTemplItemLeft" align="right" valign="top">CountedPtr&lt; ReturnType &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#a5d26cc4afa9fedd9c998091d2d960784">Mezzanine::CountedPtrDynamicCast</a> (CountedPtr&lt; OtherPointerTargetType &gt; &amp;Original)</td></tr>
<tr class="memdesc:a5d26cc4afa9fedd9c998091d2d960784"><td class="mdescLeft">&#160;</td><td class="mdescRight">A Runtime cast that uses dynamic casting conversion of the underlying raw pointers but only works on internally reference count types.  <a href="#a5d26cc4afa9fedd9c998091d2d960784">More...</a><br/></td></tr>
<tr class="separator:a5d26cc4afa9fedd9c998091d2d960784"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4900c81f1a95d2da5d6309936b57b663"><td class="memTemplParams" colspan="2">template&lt;typename Pointer &gt; </td></tr>
<tr class="memitem:a4900c81f1a95d2da5d6309936b57b663"><td class="memTemplItemLeft" align="right" valign="top">Pointer *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#a4900c81f1a95d2da5d6309936b57b663">Mezzanine::CountedPtrInternalCast</a> (Pointer *Original)</td></tr>
<tr class="memdesc:a4900c81f1a95d2da5d6309936b57b663"><td class="mdescLeft">&#160;</td><td class="mdescRight">Used internally by CounterPtr to abstract away casts in the case where the return type would match the input type.  <a href="#a4900c81f1a95d2da5d6309936b57b663">More...</a><br/></td></tr>
<tr class="separator:a4900c81f1a95d2da5d6309936b57b663"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a81cb2e3c87ff45317e47ac082e60ad32"><td class="memTemplParams" colspan="2">template&lt;typename ReturnPointer , typename OriginalPointer &gt; </td></tr>
<tr class="memitem:a81cb2e3c87ff45317e47ac082e60ad32"><td class="memTemplItemLeft" align="right" valign="top">ReturnPointer *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#a81cb2e3c87ff45317e47ac082e60ad32">Mezzanine::CountedPtrInternalCast</a> (const OriginalPointer *Original)</td></tr>
<tr class="memdesc:a81cb2e3c87ff45317e47ac082e60ad32"><td class="mdescLeft">&#160;</td><td class="mdescRight">Used internally by CounterPtr to abstract away casts in the case where the return type would <em>NOT</em> match the input type.  <a href="#a81cb2e3c87ff45317e47ac082e60ad32">More...</a><br/></td></tr>
<tr class="separator:a81cb2e3c87ff45317e47ac082e60ad32"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abca8f4d958804ca1c77b3d7cd41b2108"><td class="memTemplParams" colspan="2">template&lt;typename ReturnType , typename OtherPointerTargetType &gt; </td></tr>
<tr class="memitem:abca8f4d958804ca1c77b3d7cd41b2108"><td class="memTemplItemLeft" align="right" valign="top">CountedPtr&lt; ReturnType &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#abca8f4d958804ca1c77b3d7cd41b2108">Mezzanine::CountedPtrStaticCast</a> (CountedPtr&lt; OtherPointerTargetType &gt; &amp;Original)</td></tr>
<tr class="memdesc:abca8f4d958804ca1c77b3d7cd41b2108"><td class="mdescLeft">&#160;</td><td class="mdescRight">A compile time cast that uses static casting conversion of the underlying raw pointers but only works on internally reference count types.  <a href="#abca8f4d958804ca1c77b3d7cd41b2108">More...</a><br/></td></tr>
<tr class="separator:abca8f4d958804ca1c77b3d7cd41b2108"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>This file describes and implements any pointers or typedefs to pointers that the <a class="el" href="namespaceMezzanine.xhtml" title="The bulk of the engine components go in this namspace.">Mezzanine</a> uses and exposes in its API. </p>

<p>Definition in file <a class="el" href="smartptr_8h_source.xhtml">smartptr.h</a>.</p>
</div></div><!-- contents -->
<hr class="footer"/><address class="footer"><small>
Generated on Sat Sep 14 2013 00:19:07 for MezzanineEngine by&#160;<a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1</small></address>
</body>
</html>
