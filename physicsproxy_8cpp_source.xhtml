<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>/home/Code/Mezzanine/Mezzanine/src/Physics/physicsproxy.cpp Source File</title>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="DoxyStyle.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script> 
</head>
<body onload='searchBox.OnSelectItem(0);'>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;" nowrap="nowrap">
   <div id="projectname"><a href="http://blacktoppstudios.com"><img src="logogreen100pxtall.png"/></a>MezzanineEngine&#160;<span id="projectnumber">September 2, 2013</span></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_df2e1c8414b6a086be441ff04537838a.xhtml">Mezzanine</a></li><li class="navelem"><a class="el" href="dir_2b71fc9949116feedacddb93a79d832d.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_61c0ec937c468b49b332752e9f643e74.xhtml">Physics</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">physicsproxy.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//c Copyright 2010 - 2012 BlackTopp Studios Inc.</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">/* This file is part of The Mezzanine Engine.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">The Mezzanine Engine is free software: you can redistribute it and/or modify</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">it under the terms of the GNU General Public License as published by</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">the Free Software Foundation, either version 3 of the License, or</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">(at your option) any later version.</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">The Mezzanine Engine is distributed in the hope that it will be useful,</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">GNU General Public License for more details.</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">You should have received a copy of the GNU General Public License</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">along with The Mezzanine Engine. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">/* The original authors have included a copy of the license specified above in the</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">&#39;Docs&#39; folder. See &#39;gpl.txt&#39;</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">/* We welcome the use of the Mezzanine engine to anyone, including companies who wish to</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">Build professional software and charge for their product.</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">However there are some practical restrictions, so if your project involves</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">any of the following you should contact us and we will try to work something</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">out:</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">- DRM or Copy Protection of any kind(except Copyrights)</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">- Software Patents You Do Not Wish to Freely License</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">- Any Kind of Linking to Non-GPL licensed Works</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">- Are Currently In Violation of Another Copyright Holder&#39;s GPL License</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">- If You want to change our code and not add a few hundred MB of stuff to</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">your distribution</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment">These and other limitations could cause serious legal problems if you ignore</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">them, so it is best to simply contact us or the Free Software Foundation, if</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">you have any questions.</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">Joseph Toppi - toppij@gmail.com</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">John Blackwood - makoenergy02@gmail.com</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#ifndef _physicsproxy_cpp</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define _physicsproxy_cpp</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">#include &quot;Physics/physicsproxy.h&quot;</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor">#include &quot;Physics/collisionshape.h&quot;</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#include &quot;collisionshapemanager.h&quot;</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="preprocessor">#include &lt;btBulletDynamicsCommon.h&gt;</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="keyword">namespace</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;{</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <a class="code" href="namespaceMezzanine.xhtml#a942580f9d14a57c4a192270eb78f7d57" title="Generally acts a single bit, true or false.">Mezzanine::Bool</a> IsConvex(<span class="keyword">const</span> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a985a918f81fe43d088cc1e39bbffc8ea" title="This enum describes what kind of shape you are currently working with.">Mezzanine::Physics::CollisionShape::ShapeType</a> Type)</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    {</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <span class="keywordflow">switch</span>( Type )</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        {</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            <span class="comment">// All the basic convex shapes</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a985a918f81fe43d088cc1e39bbffc8eaa1ecbe5f3eedc791e64fb1fd52c747e53" title="Indicates the class is a BoxCollisionShape.">Mezzanine::Physics::CollisionShape::ST_Box</a>:</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a985a918f81fe43d088cc1e39bbffc8eaa0b1be0d16df9fc1a3709469f35cc022e" title="Indicates the class is a CapsuleCollisionShape.">Mezzanine::Physics::CollisionShape::ST_Capsule</a>:</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a985a918f81fe43d088cc1e39bbffc8eaaac2762c16caf507b8a8fa37ba51e5310" title="Indicates the class is a ConeCollisionShape.">Mezzanine::Physics::CollisionShape::ST_Cone</a>:</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a985a918f81fe43d088cc1e39bbffc8eaac3036bd9f4a0bde962866fe11213faab" title="Indicates the class is a ConvexHullCollisionShape.">Mezzanine::Physics::CollisionShape::ST_ConvexHull</a>:</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a985a918f81fe43d088cc1e39bbffc8eaad1c7d8e9c1385ea1fd17705780965fee" title="Indicates the class is a CylinderCollisionShape.">Mezzanine::Physics::CollisionShape::ST_Cylinder</a>:</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a985a918f81fe43d088cc1e39bbffc8eaaa6cf2f8bb4a12adcbe9de5a9b3106d16" title="Indicates the class is a MultiSphereCollisionShape.">Mezzanine::Physics::CollisionShape::ST_MultiSphere</a>:</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            <span class="keywordflow">case</span> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a985a918f81fe43d088cc1e39bbffc8eaa40d090efe55e06dceef14a4e1ba26382" title="Indicates the class is a SphereCollisionShape.">Mezzanine::Physics::CollisionShape::ST_Sphere</a>:</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            {</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            }</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            {</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            }</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        }</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    }</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <a class="code" href="namespaceMezzanine.xhtml#a942580f9d14a57c4a192270eb78f7d57" title="Generally acts a single bit, true or false.">Mezzanine::Bool</a> IsCompound(<span class="keyword">const</span> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a985a918f81fe43d088cc1e39bbffc8ea" title="This enum describes what kind of shape you are currently working with.">Mezzanine::Physics::CollisionShape::ShapeType</a> Type)</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    {</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="keywordflow">return</span> Type == <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a985a918f81fe43d088cc1e39bbffc8eaa07402c83f66065747779321aec2f89e7" title="Indicates the class is a CompoundCollisionShape.">Mezzanine::Physics::CollisionShape::ST_Compound</a>;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    }</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <a class="code" href="namespaceMezzanine.xhtml#a942580f9d14a57c4a192270eb78f7d57" title="Generally acts a single bit, true or false.">Mezzanine::Bool</a> IsStaticTrimesh(<span class="keyword">const</span> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a985a918f81fe43d088cc1e39bbffc8ea" title="This enum describes what kind of shape you are currently working with.">Mezzanine::Physics::CollisionShape::ShapeType</a> Type)</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    {</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="keywordflow">return</span> Type == <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a985a918f81fe43d088cc1e39bbffc8eaab3ea202442832fcac695b82df402ca77" title="Indicates the class is a StaticMeshCollisionShape.">Mezzanine::Physics::CollisionShape::ST_StaticTriMesh</a>;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    }</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <a class="code" href="namespaceMezzanine.xhtml#a942580f9d14a57c4a192270eb78f7d57" title="Generally acts a single bit, true or false.">Mezzanine::Bool</a> IsDynamicTrimesh(<span class="keyword">const</span> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a985a918f81fe43d088cc1e39bbffc8ea" title="This enum describes what kind of shape you are currently working with.">Mezzanine::Physics::CollisionShape::ShapeType</a> Type)</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    {</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="keywordflow">return</span> Type == <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a985a918f81fe43d088cc1e39bbffc8eaa210028bc131008a47b1a274af9f1c7d5" title="Indicates the class is a DynamicMeshCollisionShape.">Mezzanine::Physics::CollisionShape::ST_DynamicTriMesh</a>;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    }</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;}</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="keyword">namespace </span>Mezzanine</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;{</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keyword">namespace </span>Physics</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    {<span class="comment"></span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">        ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment"></span>        <span class="comment">// ScalingShape Methods</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment">        ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">        /// @class ScalingShape</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">        /// @brief This is a custom scaling shape that permits scaling specific to the object it is applied to.</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">        /// @details Scaling portion of a transform does not exist on RigidBodies in Bullet.  For an object to be</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">        /// scaled it has to be done on the collision shape.  However collision shapes can be shared and if they are</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">        /// it would scale all other objects it is shared with as well.  This shape is a simple scaling wrapper for</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">        /// collision shapes that can be created just for a single object that allows re-use and sharing of</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">        /// collision shapes when scaling them for different objects. @n @n</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">        /// Bullet does have another scaling shape built in for different types of shapes.  GImpact lacks one, but</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">        /// BVHTriangleMesh have an appropriate wrapper.  All the collision shapes under the Convex branch of the</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">        /// inheritance tree have another that only applies custom scaling uniformly on all axes.  This is</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">        /// unacceptable and one that allows independant scaling on each axis is needed.  That is where this class</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">        /// comes in.</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">        ///////////////////////////////////////</span></div>
<div class="line"><a name="l00112"></a><span class="lineno"><a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a4f06c188eff28fc5e9a7350e9add640e">  112</a></span>&#160;<span class="comment"></span>        ATTRIBUTE_ALIGNED16(<span class="keyword">class</span>) <a class="code" href="crossplatformexport_8h.xhtml#a455f91aab9e6a1cf4286f5cdfa74c7bc" title="Some platforms require special decorations to denote what is exported/imported in a share library...">MEZZ_LIB</a> <a class="code" href="classScalingShape.xhtml" title="This is a custom scaling shape that permits scaling specific to the object it is applied to...">ScalingShape</a> : public btConvexShape</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        {</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="keyword">protected</span>:<span class="comment"></span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">            /// @brief The actual data in bullet this represents</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment"></span>            btConvexShape* ChildConvexShape;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">            /// @brief The actual data in bullet this represents</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment"></span>            btVector3 <a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a4f06c188eff28fc5e9a7350e9add640e" title="The actual data in bullet this represents.">ChildScaling</a>;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment">            /// @cond false</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment"></span>            BT_DECLARE_ALIGNED_ALLOCATOR();<span class="comment"></span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment">            /// @endcond</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment"></span><span class="comment"></span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">            /// @brief Class constructor.</span></div>
<div class="line"><a name="l00126"></a><span class="lineno"><a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a3907e0a268e3765c4cd5689b21cf4db2">  126</a></span>&#160;<span class="comment"></span>            <a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a3907e0a268e3765c4cd5689b21cf4db2" title="Class constructor.">ScalingShape</a>(btConvexShape* ChildShape, <span class="keyword">const</span> btVector3&amp; Scaling) :</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                ChildConvexShape(ChildShape),</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                ChildScaling(Scaling)</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                { this-&gt;m_shapeType = UNIFORM_SCALING_SHAPE_PROXYTYPE; }<span class="comment"></span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">            /// @brief Class destructor.</span></div>
<div class="line"><a name="l00131"></a><span class="lineno"><a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a1307d251cf7410710c68f0844bd70e9c">  131</a></span>&#160;<span class="comment"></span>            <span class="keyword">virtual</span> <a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a1307d251cf7410710c68f0844bd70e9c" title="Class destructor.">~ScalingShape</a>()</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                {  }</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">            ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment"></span>            <span class="comment">// Configuration Methods</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">            /// @brief Sets the child shape to be scaled by this wrapper.</span></div>
<div class="line"><a name="l00138"></a><span class="lineno"><a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a607060b95b125f4194a1874fc338867f">  138</a></span>&#160;<span class="comment"></span>            <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a607060b95b125f4194a1874fc338867f" title="Sets the child shape to be scaled by this wrapper.">SetChildShape</a>(btConvexShape* ChildShape)</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            {</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                this-&gt;ChildConvexShape = ChildShape;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            }<span class="comment"></span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment">            /// @brief Gets the child shape being scaled by this wrapper.</span></div>
<div class="line"><a name="l00143"></a><span class="lineno"><a class="code" href="namespaceMezzanine_1_1Physics.xhtml#af4e5d2e51153383e22a60d8d686fab37">  143</a></span>&#160;<span class="comment"></span>            <span class="keyword">virtual</span> btConvexShape* <a class="code" href="namespaceMezzanine_1_1Physics.xhtml#af4e5d2e51153383e22a60d8d686fab37" title="Gets the child shape being scaled by this wrapper.">GetChildShape</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="keyword">            </span>{</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                <span class="keywordflow">return</span> this-&gt;ChildConvexShape;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            }<span class="comment"></span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment">            /// @brief Sets the amount of scaling to be applied to the child shape.</span></div>
<div class="line"><a name="l00148"></a><span class="lineno"><a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a989038d3fb847cdadb5d2376e2650cf7">  148</a></span>&#160;<span class="comment"></span>            <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a989038d3fb847cdadb5d2376e2650cf7" title="Sets the amount of scaling to be applied to the child shape.">SetChildScaling</a>(<span class="keyword">const</span> btVector3&amp; Scaling)</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            {</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                this-&gt;ChildScaling = Scaling;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            }<span class="comment"></span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">            /// @brief Gets the amount of scaling being applied to the child shape.</span></div>
<div class="line"><a name="l00153"></a><span class="lineno"><a class="code" href="namespaceMezzanine_1_1Physics.xhtml#ae67386b846a277a2a56a1bd2e6387709">  153</a></span>&#160;<span class="comment"></span>            <span class="keyword">virtual</span> btVector3 <a class="code" href="namespaceMezzanine_1_1Physics.xhtml#ae67386b846a277a2a56a1bd2e6387709" title="Gets the amount of scaling being applied to the child shape.">GetChildScaling</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="keyword">            </span>{</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                <span class="keywordflow">return</span> this-&gt;<a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a4f06c188eff28fc5e9a7350e9add640e" title="The actual data in bullet this represents.">ChildScaling</a>;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            }<span class="comment"></span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">            /// @brief Gets the serialization name of this shape.</span></div>
<div class="line"><a name="l00158"></a><span class="lineno"><a class="code" href="namespaceMezzanine_1_1Physics.xhtml#af674ef2cbd9afc93fac234807a49bd0d">  158</a></span>&#160;<span class="comment"></span>            <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="namespaceMezzanine_1_1Physics.xhtml#af674ef2cbd9afc93fac234807a49bd0d" title="Gets the serialization name of this shape.">getName</a>()<span class="keyword">const</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="keyword">            </span>{</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                <span class="keywordflow">return</span> <span class="stringliteral">&quot;UniformScalingShape&quot;</span>;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;            }</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment">            ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment"></span>            <span class="comment">// Internal Transform Methods</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">            /// @brief No Idea.</span></div>
<div class="line"><a name="l00167"></a><span class="lineno"><a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a8a8c2f4b09a6d367a3dca55571bded65">  167</a></span>&#160;<span class="comment"></span>            <span class="keyword">virtual</span> btVector3 <a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a8a8c2f4b09a6d367a3dca55571bded65" title="No Idea.">localGetSupportingVertexWithoutMargin</a>(<span class="keyword">const</span> btVector3&amp; vec)<span class="keyword">const</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="keyword">            </span>{</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                btVector3 tmpVertex;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                tmpVertex = this-&gt;ChildConvexShape-&gt;localGetSupportingVertexWithoutMargin(vec);</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                <span class="keywordflow">return</span> tmpVertex * this-&gt;<a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a4f06c188eff28fc5e9a7350e9add640e" title="The actual data in bullet this represents.">ChildScaling</a>;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            }<span class="comment"></span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment">            /// @brief No Idea.</span></div>
<div class="line"><a name="l00174"></a><span class="lineno"><a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a02c2abe2511aadf8b21c486239e61d3a">  174</a></span>&#160;<span class="comment"></span>            <span class="keyword">virtual</span> btVector3 <a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a02c2abe2511aadf8b21c486239e61d3a" title="No Idea.">localGetSupportingVertex</a>(<span class="keyword">const</span> btVector3&amp; vec)<span class="keyword">const</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="keyword">            </span>{</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                btVector3 tmpVertex;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                btScalar ChildMargin = this-&gt;ChildConvexShape-&gt;getMargin();</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                tmpVertex = this-&gt;ChildConvexShape-&gt;localGetSupportingVertexWithoutMargin(vec);</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                <span class="keywordflow">return</span> (tmpVertex * this-&gt;ChildScaling) + btVector3(ChildMargin,ChildMargin,ChildMargin);</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            }<span class="comment"></span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">            /// @brief No Idea.</span></div>
<div class="line"><a name="l00182"></a><span class="lineno"><a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a4972cfc582da7c4fe0ab812057afc9c5">  182</a></span>&#160;<span class="comment"></span>            <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a4972cfc582da7c4fe0ab812057afc9c5" title="No Idea.">batchedUnitVectorGetSupportingVertexWithoutMargin</a>(<span class="keyword">const</span> btVector3* vectors,btVector3* supportVerticesOut,<span class="keywordtype">int</span> numVectors)<span class="keyword"> const</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="keyword">            </span>{</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                this-&gt;ChildConvexShape-&gt;batchedUnitVectorGetSupportingVertexWithoutMargin(vectors,supportVerticesOut,numVectors);</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                <span class="keywordflow">for</span>( <span class="keywordtype">int</span> i = 0 ; i &lt; numVectors ; i++ )</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                {</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                    supportVerticesOut[i] = supportVerticesOut[i] * this-&gt;<a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a4f06c188eff28fc5e9a7350e9add640e" title="The actual data in bullet this represents.">ChildScaling</a>;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                }</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            }<span class="comment"></span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment">            /// @brief Calculates the local inertia for this shape and it&#39;s child shape.</span></div>
<div class="line"><a name="l00191"></a><span class="lineno"><a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a5473e2044243715cfa64691cdcef0476">  191</a></span>&#160;<span class="comment"></span>            <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a5473e2044243715cfa64691cdcef0476" title="Calculates the local inertia for this shape and it&#39;s child shape.">calculateLocalInertia</a>(btScalar mass,btVector3&amp; inertia)<span class="keyword"> const</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="keyword">            </span>{</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                btVector3 tmpInertia;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                this-&gt;ChildConvexShape-&gt;calculateLocalInertia(mass,tmpInertia);</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                inertia = tmpInertia * this-&gt;<a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a4f06c188eff28fc5e9a7350e9add640e" title="The actual data in bullet this represents.">ChildScaling</a>;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            }</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment">            ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment"></span>            <span class="comment">// Inherited from btCollisionShape</span></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="comment">            /// @brief Gets the AABB of this shape.</span></div>
<div class="line"><a name="l00202"></a><span class="lineno"><a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a3718b273facdcc84d9ef1257642faacc">  202</a></span>&#160;<span class="comment"></span>            <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a3718b273facdcc84d9ef1257642faacc" title="Gets the AABB of this shape.">getAabb</a>(<span class="keyword">const</span> btTransform&amp; trans,btVector3&amp; aabbMin,btVector3&amp; aabbMax)<span class="keyword"> const</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="keyword">            </span>{</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                this-&gt;<a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a8a5309b61b8b4b84f39568c883928dd2" title="Gets the AABB of this shape.">getAabbSlow</a>(trans,aabbMin,aabbMax);</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            }<span class="comment"></span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="comment">            /// @brief Gets the AABB of this shape.</span></div>
<div class="line"><a name="l00207"></a><span class="lineno"><a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a8a5309b61b8b4b84f39568c883928dd2">  207</a></span>&#160;<span class="comment"></span>            <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a8a5309b61b8b4b84f39568c883928dd2" title="Gets the AABB of this shape.">getAabbSlow</a>(<span class="keyword">const</span> btTransform&amp; t,btVector3&amp; aabbMin,btVector3&amp; aabbMax)<span class="keyword"> const</span></div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="keyword">            </span>{</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                btVector3 _directions[] =</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                {</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                    btVector3( 1.,  0.,  0.),</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                    btVector3( 0.,  1.,  0.),</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                    btVector3( 0.,  0.,  1.),</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                    btVector3( -1., 0.,  0.),</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                    btVector3( 0., -1.,  0.),</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                    btVector3( 0.,  0., -1.)</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                };</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                btVector3 _supporting[] =</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                {</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                    btVector3( 0., 0., 0.),</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                    btVector3( 0., 0., 0.),</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                    btVector3( 0., 0., 0.),</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                    btVector3( 0., 0., 0.),</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                    btVector3( 0., 0., 0.),</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                    btVector3( 0., 0., 0.)</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                };</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                <span class="keywordflow">for</span>( <span class="keywordtype">int</span> i = 0 ; i &lt; 6 ; i++ )</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                {</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                    _directions[i] = _directions[i] * t.getBasis();</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                }</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                this-&gt;<a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a4972cfc582da7c4fe0ab812057afc9c5" title="No Idea.">batchedUnitVectorGetSupportingVertexWithoutMargin</a>(_directions, _supporting, 6);</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                btVector3 aabbMin1(0,0,0),aabbMax1(0,0,0);</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                <span class="keywordflow">for</span> ( <span class="keywordtype">int</span> i = 0; i &lt; 3; ++i )</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                {</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                    aabbMax1[i] = t(_supporting[i])[i];</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                    aabbMin1[i] = t(_supporting[i + 3])[i];</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                }</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                btVector3 marginVec(this-&gt;<a class="code" href="namespaceMezzanine_1_1Physics.xhtml#ab805e9b1ab8b47f6debc4c0229565fe0" title="Gets the collision margin of the sharable/global child collision shape.">getMargin</a>(),this-&gt;<a class="code" href="namespaceMezzanine_1_1Physics.xhtml#ab805e9b1ab8b47f6debc4c0229565fe0" title="Gets the collision margin of the sharable/global child collision shape.">getMargin</a>(),this-&gt;<a class="code" href="namespaceMezzanine_1_1Physics.xhtml#ab805e9b1ab8b47f6debc4c0229565fe0" title="Gets the collision margin of the sharable/global child collision shape.">getMargin</a>());</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                aabbMin = aabbMin1-marginVec;</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                aabbMax = aabbMax1+marginVec;</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;            }</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="comment">            /// @brief Sets the scaling to be applied to the sharable/global child collision shape.</span></div>
<div class="line"><a name="l00249"></a><span class="lineno"><a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a41545f79f4f1dc6df56338fb50961f5f">  249</a></span>&#160;<span class="comment"></span>            <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a41545f79f4f1dc6df56338fb50961f5f" title="Sets the scaling to be applied to the sharable/global child collision shape.">setLocalScaling</a>(<span class="keyword">const</span> btVector3&amp; scaling)</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                { this-&gt;<a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a989038d3fb847cdadb5d2376e2650cf7" title="Sets the amount of scaling to be applied to the child shape.">SetChildScaling</a>(scaling); }<span class="comment"></span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="comment">            /// @brief Gets the scaling being applied to the sharable/global child collision shape.</span></div>
<div class="line"><a name="l00252"></a><span class="lineno"><a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a7928377caf19366c86330bfaa6a00ed9">  252</a></span>&#160;<span class="comment"></span>            <span class="keyword">virtual</span> <span class="keyword">const</span> btVector3&amp; <a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a7928377caf19366c86330bfaa6a00ed9" title="Gets the scaling being applied to the sharable/global child collision shape.">getLocalScaling</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="keyword">                </span>{ <span class="keywordflow">return</span> this-&gt;<a class="code" href="namespaceMezzanine_1_1Physics.xhtml#ae67386b846a277a2a56a1bd2e6387709" title="Gets the amount of scaling being applied to the child shape.">GetChildScaling</a>(); }<span class="comment"></span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="comment">            /// @brief Sets the collision margin of the sharable/global child collision shape.</span></div>
<div class="line"><a name="l00255"></a><span class="lineno"><a class="code" href="namespaceMezzanine_1_1Physics.xhtml#ac7732245786f9af9d0a798437dfeab80">  255</a></span>&#160;<span class="comment"></span>            <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="namespaceMezzanine_1_1Physics.xhtml#ac7732245786f9af9d0a798437dfeab80" title="Sets the collision margin of the sharable/global child collision shape.">setMargin</a>(btScalar margin)</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                { this-&gt;ChildConvexShape-&gt;setMargin(margin); }<span class="comment"></span></div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="comment">            /// @brief Gets the collision margin of the sharable/global child collision shape.</span></div>
<div class="line"><a name="l00258"></a><span class="lineno"><a class="code" href="namespaceMezzanine_1_1Physics.xhtml#ab805e9b1ab8b47f6debc4c0229565fe0">  258</a></span>&#160;<span class="comment"></span>            <span class="keyword">virtual</span> btScalar <a class="code" href="namespaceMezzanine_1_1Physics.xhtml#ab805e9b1ab8b47f6debc4c0229565fe0" title="Gets the collision margin of the sharable/global child collision shape.">getMargin</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="keyword">                </span>{ <span class="keywordflow">return</span> this-&gt;ChildConvexShape-&gt;getMargin(); }<span class="comment"></span></div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="comment">            /// @brief Gets the number of directions available for the first parameter in &quot;getPreferredPenetrationDirection&quot;.</span></div>
<div class="line"><a name="l00261"></a><span class="lineno"><a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a9c870ac1f54de4066a6f7fe6983922a6">  261</a></span>&#160;<span class="comment"></span>            <span class="keyword">virtual</span> <span class="keywordtype">int</span> <a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a9c870ac1f54de4066a6f7fe6983922a6" title="Gets the number of directions available for the first parameter in &quot;getPreferredPenetrationDirection&quot;...">getNumPreferredPenetrationDirections</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="keyword">                </span>{ <span class="keywordflow">return</span> this-&gt;ChildConvexShape-&gt;getNumPreferredPenetrationDirections(); }<span class="comment"></span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="comment">            /// @brief Gets the direction objects should follow for penetration recovery at the specified index.</span></div>
<div class="line"><a name="l00264"></a><span class="lineno"><a class="code" href="namespaceMezzanine_1_1Physics.xhtml#aa441e97f92740b91a0e6b737b6bad81b">  264</a></span>&#160;<span class="comment"></span>            <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="namespaceMezzanine_1_1Physics.xhtml#aa441e97f92740b91a0e6b737b6bad81b" title="Gets the direction objects should follow for penetration recovery at the specified index...">getPreferredPenetrationDirection</a>(<span class="keywordtype">int</span> index, btVector3&amp; penetrationVector)<span class="keyword"> const</span></div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="keyword">                </span>{ this-&gt;ChildConvexShape-&gt;getPreferredPenetrationDirection(index,penetrationVector); }</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        };<span class="comment">//ScalingShape</span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="comment">        ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="comment"></span>        <span class="comment">// PhysicsProxy Methods</span></div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div>
<div class="line"><a name="l00271"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a63fbf80af1a4600712ce3c998cbc4fd4">  271</a></span>&#160;        <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a63fbf80af1a4600712ce3c998cbc4fd4" title="Standard Constructor.">PhysicsProxy::PhysicsProxy</a>() :</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;            ProxyShape(NULL),</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;            ScalerShape(NULL),</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;            CollisionGroup(0),</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;            CollisionMask(0)</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        {</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        }</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;</div>
<div class="line"><a name="l00279"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a6dd4958f907ab0796a21019450682d6c">  279</a></span>&#160;        <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a6dd4958f907ab0796a21019450682d6c" title="Class Destructor.">PhysicsProxy::~PhysicsProxy</a>()</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        {</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        }</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="comment">        ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="comment"></span>        <span class="comment">// Utility</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div>
<div class="line"><a name="l00286"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#abab2b204ae9ac67b9d840785038f8fdb">  286</a></span>&#160;        <a class="code" href="namespaceMezzanine.xhtml#a942580f9d14a57c4a192270eb78f7d57" title="Generally acts a single bit, true or false.">Bool</a> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#abab2b204ae9ac67b9d840785038f8fdb" title="Gets whether or not this proxy can have scaling applied to itself (instead of it&#39;s shape)...">PhysicsProxy::CanLocallyScale</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;            <span class="keywordflow">return</span> ( this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a48dc8fc1aea598d69645e05ffdf8361b" title="This is an internal only shape that provides the ability for a collision shape to be scaled locally (...">ScalerShape</a> != NULL );</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        }</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;</div>
<div class="line"><a name="l00291"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a1b1865135a6fa338dcf172ed9fca6533">  291</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a1b1865135a6fa338dcf172ed9fca6533" title="Gets whether or not this object is inside of it&#39;s world. ">PhysicsProxy::IsInWorld</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;            <span class="keywordflow">return</span> ( this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac409b95e62f39f23deebd9b6ba9f6c2d" title="Accessor for the internal physics object.">_GetBasePhysicsObject</a>()-&gt;getBroadphaseHandle() != NULL );</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        }</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="comment">        ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="comment"></span>        <span class="comment">// Collision Settings</span></div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;</div>
<div class="line"><a name="l00299"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ae8a82279f36b240b29bb4b0b972e0d05">  299</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ae8a82279f36b240b29bb4b0b972e0d05" title="Set the collision group and mask for the proxy to determine what it should collide with...">PhysicsProxy::SetCollisionGroupAndMask</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="Whole is an unsigned integer, it will be at least 32bits in size.">Whole</a> Group, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="Whole is an unsigned integer, it will be at least 32bits in size.">Whole</a> Mask)</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        {</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a19e4e14646ef4ce1945cb2ac7041423c" title="The classifications pertaining to this object in regards to collisions.">CollisionGroup</a> = Group;</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ae8999b3ac508ffa0375409c707993f09" title="Stores the kind of World Objects that can collide with each other.">CollisionMask</a> = Mask;</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        }</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;</div>
<div class="line"><a name="l00305"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#af4d7c1657c720dba675de02aa6a3bc14">  305</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#af4d7c1657c720dba675de02aa6a3bc14" title="Sets which collision group this proxy belongs to, which determines it&#39;s collision behavior...">PhysicsProxy::SetCollisionGroup</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="Whole is an unsigned integer, it will be at least 32bits in size.">Whole</a> Group)</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        {</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a19e4e14646ef4ce1945cb2ac7041423c" title="The classifications pertaining to this object in regards to collisions.">CollisionGroup</a> = Group;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        }</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;</div>
<div class="line"><a name="l00310"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ae602999ca7f2e7cf87832b7d2a1c85f9">  310</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ae602999ca7f2e7cf87832b7d2a1c85f9" title="Sets the collision mask of this proxy, which determines which groups it will collide with...">PhysicsProxy::SetCollisionMask</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="Whole is an unsigned integer, it will be at least 32bits in size.">Whole</a> Mask)</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        {</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ae8999b3ac508ffa0375409c707993f09" title="Stores the kind of World Objects that can collide with each other.">CollisionMask</a> = Mask;</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        }</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;</div>
<div class="line"><a name="l00315"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a4f57dc0341aa2b9e0ea092581c305570">  315</a></span>&#160;        <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="Whole is an unsigned integer, it will be at least 32bits in size.">Whole</a> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a4f57dc0341aa2b9e0ea092581c305570" title="Gets the objects collision group.">PhysicsProxy::GetCollisionGroup</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            <span class="keywordflow">return</span> this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a19e4e14646ef4ce1945cb2ac7041423c" title="The classifications pertaining to this object in regards to collisions.">CollisionGroup</a>;</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        }</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;</div>
<div class="line"><a name="l00320"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ad0151e1b745385e0f7895e5f15d5f56b">  320</a></span>&#160;        <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="Whole is an unsigned integer, it will be at least 32bits in size.">Whole</a> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ad0151e1b745385e0f7895e5f15d5f56b" title="Gets the object&#39;s collision mask.">PhysicsProxy::GetCollisionMask</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;            <span class="keywordflow">return</span> this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ae8999b3ac508ffa0375409c707993f09" title="Stores the kind of World Objects that can collide with each other.">CollisionMask</a>;</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        }</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;</div>
<div class="line"><a name="l00325"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a125686861d43b00ed835ef2f32362ece">  325</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a125686861d43b00ed835ef2f32362ece" title="Sets the collision shape to be used.">PhysicsProxy::SetCollisionShape</a>(<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml" title="This is the base class for all collision shapes.">CollisionShape</a>* Shape)</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        {</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;            <span class="keywordflow">if</span>( this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#abc7e8655c424d511040cbf6f100b5e64" title="The physics shape of this proxy.">ProxyShape</a> != Shape )</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;            {</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                <span class="keywordflow">if</span>( Shape != NULL )</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                {</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                    <span class="keywordflow">switch</span>( Shape-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a86ea76660e7f96a28c74af150a6a4ee5" title="Gets the type of Collision shape this is.">GetType</a>() )</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                    {</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                        <span class="comment">// All the basic convex shapes</span></div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                        <span class="keywordflow">case</span> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a985a918f81fe43d088cc1e39bbffc8eaa1ecbe5f3eedc791e64fb1fd52c747e53" title="Indicates the class is a BoxCollisionShape.">CollisionShape::ST_Box</a>:</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                        <span class="keywordflow">case</span> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a985a918f81fe43d088cc1e39bbffc8eaa0b1be0d16df9fc1a3709469f35cc022e" title="Indicates the class is a CapsuleCollisionShape.">CollisionShape::ST_Capsule</a>:</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                        <span class="keywordflow">case</span> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a985a918f81fe43d088cc1e39bbffc8eaaac2762c16caf507b8a8fa37ba51e5310" title="Indicates the class is a ConeCollisionShape.">CollisionShape::ST_Cone</a>:</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                        <span class="keywordflow">case</span> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a985a918f81fe43d088cc1e39bbffc8eaac3036bd9f4a0bde962866fe11213faab" title="Indicates the class is a ConvexHullCollisionShape.">CollisionShape::ST_ConvexHull</a>:</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                        <span class="keywordflow">case</span> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a985a918f81fe43d088cc1e39bbffc8eaad1c7d8e9c1385ea1fd17705780965fee" title="Indicates the class is a CylinderCollisionShape.">CollisionShape::ST_Cylinder</a>:</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                        <span class="keywordflow">case</span> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a985a918f81fe43d088cc1e39bbffc8eaaa6cf2f8bb4a12adcbe9de5a9b3106d16" title="Indicates the class is a MultiSphereCollisionShape.">CollisionShape::ST_MultiSphere</a>:</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                        <span class="keywordflow">case</span> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a985a918f81fe43d088cc1e39bbffc8eaa40d090efe55e06dceef14a4e1ba26382" title="Indicates the class is a SphereCollisionShape.">CollisionShape::ST_Sphere</a>:</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                        {</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                            btConvexShape* ScaledShape = <span class="keyword">static_cast&lt;</span>btConvexShape*<span class="keyword">&gt;</span>( Shape-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#afedd1b778a3111778a5b17e9ce30d661" title="Gets the internal shape pointer this collision shape is based on.">_GetInternalShape</a>() );</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                            <span class="keywordflow">if</span>( this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a48dc8fc1aea598d69645e05ffdf8361b" title="This is an internal only shape that provides the ability for a collision shape to be scaled locally (...">ScalerShape</a> == NULL ) {</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                                this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a48dc8fc1aea598d69645e05ffdf8361b" title="This is an internal only shape that provides the ability for a collision shape to be scaled locally (...">ScalerShape</a> = <span class="keyword">new</span> <a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a3907e0a268e3765c4cd5689b21cf4db2" title="Class constructor.">ScalingShape</a>( ScaledShape, this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ae85957f245b9e955b2bbbe0ef2058f30" title="A vector3 storing the scaling applied to this body.">BodyScale</a>.<a class="code" href="classMezzanine_1_1Vector3.xhtml#ab9fb84bdbfe3bed9fd210a6ad1cee8b7" title="Gets a Bullet vector3.">GetBulletVector3</a>() );</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                            }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                                <span class="keyword">static_cast&lt;</span><a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a3907e0a268e3765c4cd5689b21cf4db2" title="Class constructor.">Physics::ScalingShape</a>*<span class="keyword">&gt;</span>( this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a48dc8fc1aea598d69645e05ffdf8361b" title="This is an internal only shape that provides the ability for a collision shape to be scaled locally (...">ScalerShape</a> )-&gt;<a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a607060b95b125f4194a1874fc338867f" title="Sets the child shape to be scaled by this wrapper.">SetChildShape</a>( ScaledShape );</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                            }</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac409b95e62f39f23deebd9b6ba9f6c2d" title="Accessor for the internal physics object.">_GetBasePhysicsObject</a>()-&gt;setCollisionShape( this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a48dc8fc1aea598d69645e05ffdf8361b" title="This is an internal only shape that provides the ability for a collision shape to be scaled locally (...">ScalerShape</a> );</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                        }</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                        <span class="comment">// The static bvh trimesh</span></div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                        <span class="keywordflow">case</span> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a985a918f81fe43d088cc1e39bbffc8eaab3ea202442832fcac695b82df402ca77" title="Indicates the class is a StaticMeshCollisionShape.">CollisionShape::ST_StaticTriMesh</a>:</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                        {</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                            btBvhTriangleMeshShape* ScaledShape = <span class="keyword">static_cast&lt;</span>btBvhTriangleMeshShape*<span class="keyword">&gt;</span>( Shape-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#afedd1b778a3111778a5b17e9ce30d661" title="Gets the internal shape pointer this collision shape is based on.">_GetInternalShape</a>() );</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                            <span class="keywordflow">if</span>( this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a48dc8fc1aea598d69645e05ffdf8361b" title="This is an internal only shape that provides the ability for a collision shape to be scaled locally (...">ScalerShape</a> == NULL ) {</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                                this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a48dc8fc1aea598d69645e05ffdf8361b" title="This is an internal only shape that provides the ability for a collision shape to be scaled locally (...">ScalerShape</a> = <span class="keyword">new</span> btScaledBvhTriangleMeshShape( ScaledShape, this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ae85957f245b9e955b2bbbe0ef2058f30" title="A vector3 storing the scaling applied to this body.">BodyScale</a>.<a class="code" href="classMezzanine_1_1Vector3.xhtml#ab9fb84bdbfe3bed9fd210a6ad1cee8b7" title="Gets a Bullet vector3.">GetBulletVector3</a>() );</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                            }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                                this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a48dc8fc1aea598d69645e05ffdf8361b" title="This is an internal only shape that provides the ability for a collision shape to be scaled locally (...">ScalerShape</a>-&gt;setLocalScaling( this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ae85957f245b9e955b2bbbe0ef2058f30" title="A vector3 storing the scaling applied to this body.">BodyScale</a>.<a class="code" href="classMezzanine_1_1Vector3.xhtml#ab9fb84bdbfe3bed9fd210a6ad1cee8b7" title="Gets a Bullet vector3.">GetBulletVector3</a>() );</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                            }</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac409b95e62f39f23deebd9b6ba9f6c2d" title="Accessor for the internal physics object.">_GetBasePhysicsObject</a>()-&gt;setCollisionShape( this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a48dc8fc1aea598d69645e05ffdf8361b" title="This is an internal only shape that provides the ability for a collision shape to be scaled locally (...">ScalerShape</a> );</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                        }</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                        <span class="comment">// No idea what to do about compound shapes</span></div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                        <span class="keywordflow">case</span> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a985a918f81fe43d088cc1e39bbffc8eaa07402c83f66065747779321aec2f89e7" title="Indicates the class is a CompoundCollisionShape.">CollisionShape::ST_Compound</a>:</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                        <span class="comment">// GImpact doesn&#39;t have anything to give it per object scaling</span></div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                        <span class="keywordflow">case</span> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a985a918f81fe43d088cc1e39bbffc8eaa210028bc131008a47b1a274af9f1c7d5" title="Indicates the class is a DynamicMeshCollisionShape.">CollisionShape::ST_DynamicTriMesh</a>:</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                        <span class="comment">// These shapes are either specifically tailored to the object or just don&#39;t make sense to scale</span></div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                        <span class="keywordflow">case</span> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a985a918f81fe43d088cc1e39bbffc8eaa7debb12831ab57829daec577b200fe69" title="Indicates the class is a HeightfieldCollisionShape.">CollisionShape::ST_Heightfield</a>:</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                        <span class="keywordflow">case</span> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a985a918f81fe43d088cc1e39bbffc8eaae6931fabfa9c1f426b826945ab29ae15" title="Indicates the class is a PlaneCollisionShape.">CollisionShape::ST_Plane</a>:</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                        <span class="keywordflow">case</span> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a985a918f81fe43d088cc1e39bbffc8eaa0fc3e066b38a7bb0ac442c8b2faaf90b" title="Indicates the class is a ActorSoftCollisionShape.">CollisionShape::ST_ActorSoft</a>:</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                        {</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                            <span class="keywordflow">if</span>( this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a48dc8fc1aea598d69645e05ffdf8361b" title="This is an internal only shape that provides the ability for a collision shape to be scaled locally (...">ScalerShape</a> != NULL ) {</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                                <span class="keyword">delete</span> this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a48dc8fc1aea598d69645e05ffdf8361b" title="This is an internal only shape that provides the ability for a collision shape to be scaled locally (...">ScalerShape</a>;</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                                this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a48dc8fc1aea598d69645e05ffdf8361b" title="This is an internal only shape that provides the ability for a collision shape to be scaled locally (...">ScalerShape</a> = NULL;</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                            }</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac409b95e62f39f23deebd9b6ba9f6c2d" title="Accessor for the internal physics object.">_GetBasePhysicsObject</a>()-&gt;setCollisionShape( Shape-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#afedd1b778a3111778a5b17e9ce30d661" title="Gets the internal shape pointer this collision shape is based on.">_GetInternalShape</a>() );</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                        }</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                    }</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                    this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#abc7e8655c424d511040cbf6f100b5e64" title="The physics shape of this proxy.">ProxyShape</a> = Shape;</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                    <span class="keywordflow">if</span>( this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a48dc8fc1aea598d69645e05ffdf8361b" title="This is an internal only shape that provides the ability for a collision shape to be scaled locally (...">ScalerShape</a> != NULL ) {</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                        <span class="keyword">delete</span> this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a48dc8fc1aea598d69645e05ffdf8361b" title="This is an internal only shape that provides the ability for a collision shape to be scaled locally (...">ScalerShape</a>;</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                        this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a48dc8fc1aea598d69645e05ffdf8361b" title="This is an internal only shape that provides the ability for a collision shape to be scaled locally (...">ScalerShape</a> = NULL;</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                    }</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                    this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#abc7e8655c424d511040cbf6f100b5e64" title="The physics shape of this proxy.">ProxyShape</a> = NULL;</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                }</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                <span class="comment">// Gotta flicker to update the AABB appropriately</span></div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                <span class="keywordflow">if</span>( this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a1b1865135a6fa338dcf172ed9fca6533" title="Gets whether or not this object is inside of it&#39;s world. ">IsInWorld</a>() ) {</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                    this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#abc420940924654d77e1adc792b3e3591" title="Unhooks this proxy from it&#39;s respective world. ">RemoveFromWorld</a>();</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                    this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a5a273eff8150caa9700e2c6f969a9be1" title="Performs all the necessary task to ensure this object is connected to it&#39;s respective world and ready...">AddToWorld</a>();</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                }</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;            }</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;        }</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;</div>
<div class="line"><a name="l00398"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a80e7ca2664aedbad0ceefb2ae46af9b0">  398</a></span>&#160;        <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml" title="This is the base class for all collision shapes.">CollisionShape</a>* <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a80e7ca2664aedbad0ceefb2ae46af9b0" title="Gets the collision shape currently in use by this object.">PhysicsProxy::GetCollisionShape</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;            <span class="keywordflow">return</span> this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#abc7e8655c424d511040cbf6f100b5e64" title="The physics shape of this proxy.">ProxyShape</a>;</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;        }</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;</div>
<div class="line"><a name="l00403"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#af3ffd001430adae862dd23e5d38bcbc9">  403</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#af3ffd001430adae862dd23e5d38bcbc9" title="Sets the World Object to be able to collide with other objects in the world.">PhysicsProxy::SetCollisionResponse</a>(<span class="keywordtype">bool</span> Enable)</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        {</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;            <span class="keywordflow">if</span>( Enable != this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a9495dcc99c88236c06c4d3b35cc0233d" title="Will this respond to 3d collisions.">GetCollisionResponse</a>() )</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;            {</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                btCollisionObject* Base = this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac409b95e62f39f23deebd9b6ba9f6c2d" title="Accessor for the internal physics object.">_GetBasePhysicsObject</a>();</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                <span class="keywordflow">if</span>( Enable ) {</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                    Base-&gt;setCollisionFlags( Base-&gt;getCollisionFlags() | btCollisionObject::CF_NO_CONTACT_RESPONSE );</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                    Base-&gt;setCollisionFlags( Base-&gt;getCollisionFlags() &amp; ~btCollisionObject::CF_NO_CONTACT_RESPONSE );</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                }</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;            }</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;        }</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;</div>
<div class="line"><a name="l00416"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a9495dcc99c88236c06c4d3b35cc0233d">  416</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a9495dcc99c88236c06c4d3b35cc0233d" title="Will this respond to 3d collisions.">PhysicsProxy::GetCollisionResponse</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;            <span class="keywordflow">return</span> !(this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac409b95e62f39f23deebd9b6ba9f6c2d" title="Accessor for the internal physics object.">_GetBasePhysicsObject</a>()-&gt;getCollisionFlags() &amp; btCollisionObject::CF_NO_CONTACT_RESPONSE);</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;        }</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;</div>
<div class="line"><a name="l00421"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a77d7aa21ff90d12b1c45c1c1e7ca1bce">  421</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a77d7aa21ff90d12b1c45c1c1e7ca1bce" title="Sets the collection of flags that help determine collision response for this object.">PhysicsProxy::SetCollisionFlags</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="Whole is an unsigned integer, it will be at least 32bits in size.">Whole</a> Flags)</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;        {</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac409b95e62f39f23deebd9b6ba9f6c2d" title="Accessor for the internal physics object.">_GetBasePhysicsObject</a>()-&gt;setCollisionFlags(Flags);</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;        }</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;</div>
<div class="line"><a name="l00426"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a3d86f7cb6d277e64bd3d67b142c0828e">  426</a></span>&#160;        <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="Whole is an unsigned integer, it will be at least 32bits in size.">Whole</a> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a3d86f7cb6d277e64bd3d67b142c0828e" title="Gets the collection of flags that help determine collision response for this object.">PhysicsProxy::GetCollisionFlags</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;            <span class="keywordflow">return</span> this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac409b95e62f39f23deebd9b6ba9f6c2d" title="Accessor for the internal physics object.">_GetBasePhysicsObject</a>()-&gt;getCollisionFlags();</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;        }</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;<span class="comment">        ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;<span class="comment"></span>        <span class="comment">// Static or Kinematic Properties</span></div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;</div>
<div class="line"><a name="l00434"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ab0ee636127380bb12fbedf31facbd862">  434</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ab0ee636127380bb12fbedf31facbd862" title="Sets the state of the object to Kinematic.">PhysicsProxy::SetKinematic</a>()</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        {</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;            btCollisionObject* Base = this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac409b95e62f39f23deebd9b6ba9f6c2d" title="Accessor for the internal physics object.">_GetBasePhysicsObject</a>();</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;            Base-&gt;setCollisionFlags( Base-&gt;getCollisionFlags() | btCollisionObject::CF_KINEMATIC_OBJECT );</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;        }</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;</div>
<div class="line"><a name="l00440"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#aa021fdb845d3577769cb601a5ca295c5">  440</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#aa021fdb845d3577769cb601a5ca295c5" title="Sets the state of the object to Static.">PhysicsProxy::SetStatic</a>()</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;        {</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;            btCollisionObject* Base = this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac409b95e62f39f23deebd9b6ba9f6c2d" title="Accessor for the internal physics object.">_GetBasePhysicsObject</a>();</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;            Base-&gt;setCollisionFlags( Base-&gt;getCollisionFlags() | btCollisionObject::CF_STATIC_OBJECT );</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;        }</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;</div>
<div class="line"><a name="l00446"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a4b0cd0b9e19b48ce341708a8abafbbdc">  446</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a4b0cd0b9e19b48ce341708a8abafbbdc" title="Is the object kinematic.">PhysicsProxy::IsKinematic</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;            <span class="keywordflow">return</span> this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac409b95e62f39f23deebd9b6ba9f6c2d" title="Accessor for the internal physics object.">_GetBasePhysicsObject</a>()-&gt;isKinematicObject();</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;        }</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;</div>
<div class="line"><a name="l00451"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a464b11c078a3c9027177b01cb6eae86d">  451</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a464b11c078a3c9027177b01cb6eae86d" title="Is the object static.">PhysicsProxy::IsStatic</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;            <span class="keywordflow">return</span> this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac409b95e62f39f23deebd9b6ba9f6c2d" title="Accessor for the internal physics object.">_GetBasePhysicsObject</a>()-&gt;isStaticObject();</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        }</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;</div>
<div class="line"><a name="l00456"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#af1ecc23bd90eae4b5d8997bf760d9f24">  456</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#af1ecc23bd90eae4b5d8997bf760d9f24" title="Checks if the object is either static or kinematic.">PhysicsProxy::IsStaticOrKinematic</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;            <span class="keywordflow">return</span> this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac409b95e62f39f23deebd9b6ba9f6c2d" title="Accessor for the internal physics object.">_GetBasePhysicsObject</a>()-&gt;isStaticOrKinematicObject();</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;        }</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;<span class="comment">        ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;<span class="comment"></span>        <span class="comment">// Physics Properties</span></div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;</div>
<div class="line"><a name="l00464"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#adfc0736a59bbc79aa142f28e5dcf0ba7">  464</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#adfc0736a59bbc79aa142f28e5dcf0ba7" title="Sets the sliding friction coefficient.">PhysicsProxy::SetFriction</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> Friction)</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;            { this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac409b95e62f39f23deebd9b6ba9f6c2d" title="Accessor for the internal physics object.">_GetBasePhysicsObject</a>()-&gt;setFriction(Friction); }</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;</div>
<div class="line"><a name="l00467"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a101f3c4981e07f98b87ae481b8ac4245">  467</a></span>&#160;        <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a101f3c4981e07f98b87ae481b8ac4245" title="Gets the sliding friction coefficient.">PhysicsProxy::GetFriction</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;<span class="keyword">            </span>{ <span class="keywordflow">return</span> this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac409b95e62f39f23deebd9b6ba9f6c2d" title="Accessor for the internal physics object.">_GetBasePhysicsObject</a>()-&gt;getFriction(); }</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;</div>
<div class="line"><a name="l00470"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#aa4d95097eaab83e9d0bf94b082ab1b06">  470</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#aa4d95097eaab83e9d0bf94b082ab1b06" title="Sets the rolling friction coefficient.">PhysicsProxy::SetRollingFriction</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> Friction)</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;            { this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac409b95e62f39f23deebd9b6ba9f6c2d" title="Accessor for the internal physics object.">_GetBasePhysicsObject</a>()-&gt;setRollingFriction(Friction); }</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;</div>
<div class="line"><a name="l00473"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#acd8e178c311b3f66526b29b29263086c">  473</a></span>&#160;        <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#acd8e178c311b3f66526b29b29263086c" title="Gets the rolling friction coefficient.">PhysicsProxy::GetRollingFriction</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;<span class="keyword">            </span>{ <span class="keywordflow">return</span> this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac409b95e62f39f23deebd9b6ba9f6c2d" title="Accessor for the internal physics object.">_GetBasePhysicsObject</a>()-&gt;getRollingFriction(); }</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;</div>
<div class="line"><a name="l00476"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a168d3fabf4990a24b2efb2e91f94572b">  476</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a168d3fabf4990a24b2efb2e91f94572b" title="Sets the anisotropic friction factor.">PhysicsProxy::SetAnisotropicFriction</a>(<span class="keyword">const</span> <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a>&amp; Friction, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="Whole is an unsigned integer, it will be at least 32bits in size.">Whole</a> Mode)</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;            { this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac409b95e62f39f23deebd9b6ba9f6c2d" title="Accessor for the internal physics object.">_GetBasePhysicsObject</a>()-&gt;setAnisotropicFriction(Friction.<a class="code" href="classMezzanine_1_1Vector3.xhtml#ab9fb84bdbfe3bed9fd210a6ad1cee8b7" title="Gets a Bullet vector3.">GetBulletVector3</a>(),Mode); }</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;</div>
<div class="line"><a name="l00479"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a7a031a99d7e92ca6c7c0a2cf473e712f">  479</a></span>&#160;        <a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a492c0398afcd0464f6188351e4e11bab" title="This is used by physics proxies to help determine the behavior of it&#39;s anistropic friction behavior...">Physics::AnisotropicFrictionFlags</a> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a7a031a99d7e92ca6c7c0a2cf473e712f" title="Gets the current Anisotropic friction mode being applied to this proxy.">PhysicsProxy::GetAnisotropicFrictionMode</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;            <span class="keywordflow">if</span>( this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ae69249a6d9ac14a48abf0fc927900a0a" title="Gets whether or not anisotropic friction is being used in a specified mode.">IsAnisotropicFrictionModeSet</a>(Physics::AFF_AnisotropicFrictionDisabled) )</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                <span class="keywordflow">return</span> Physics::AFF_AnisotropicFrictionDisabled;</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;            <span class="keywordflow">if</span>( this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ae69249a6d9ac14a48abf0fc927900a0a" title="Gets whether or not anisotropic friction is being used in a specified mode.">IsAnisotropicFrictionModeSet</a>(Physics::AFF_AnisotropicFriction) )</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;                <span class="keywordflow">return</span> Physics::AFF_AnisotropicFriction;</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;            <span class="keywordflow">if</span>( this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ae69249a6d9ac14a48abf0fc927900a0a" title="Gets whether or not anisotropic friction is being used in a specified mode.">IsAnisotropicFrictionModeSet</a>(Physics::AFF_AnisotropicRollingFriction) )</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;                <span class="keywordflow">return</span> Physics::AFF_AnisotropicRollingFriction;</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;            <span class="keywordflow">return</span> Physics::AFF_AnisotropicFrictionDisabled;</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;        }</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;</div>
<div class="line"><a name="l00491"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ae69249a6d9ac14a48abf0fc927900a0a">  491</a></span>&#160;        <a class="code" href="namespaceMezzanine.xhtml#a942580f9d14a57c4a192270eb78f7d57" title="Generally acts a single bit, true or false.">Bool</a> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ae69249a6d9ac14a48abf0fc927900a0a" title="Gets whether or not anisotropic friction is being used in a specified mode.">PhysicsProxy::IsAnisotropicFrictionModeSet</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="Whole is an unsigned integer, it will be at least 32bits in size.">Whole</a> Mode)<span class="keyword"> const</span></div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;<span class="keyword">            </span>{ <span class="keywordflow">return</span> this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac409b95e62f39f23deebd9b6ba9f6c2d" title="Accessor for the internal physics object.">_GetBasePhysicsObject</a>()-&gt;hasAnisotropicFriction(Mode); }</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;</div>
<div class="line"><a name="l00494"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a5eccef79efa1fbfcdb16f2676db3ce62">  494</a></span>&#160;        <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a5eccef79efa1fbfcdb16f2676db3ce62" title="Gets the anisotropic friction factor.">PhysicsProxy::GetAnisotropicFriction</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;<span class="keyword">            </span>{ <span class="keywordflow">return</span> <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a>( this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac409b95e62f39f23deebd9b6ba9f6c2d" title="Accessor for the internal physics object.">_GetBasePhysicsObject</a>()-&gt;getAnisotropicFriction() ); }</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;</div>
<div class="line"><a name="l00497"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a8b6875f0453184b919d7978bfba4e172">  497</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a8b6875f0453184b919d7978bfba4e172" title="Sets the restitution coefficient.">PhysicsProxy::SetRestitution</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a>&amp; Restitution)</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;            { this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac409b95e62f39f23deebd9b6ba9f6c2d" title="Accessor for the internal physics object.">_GetBasePhysicsObject</a>()-&gt;setRestitution(Restitution); }</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;</div>
<div class="line"><a name="l00500"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a4604724710bc619dbfee5869608f573d">  500</a></span>&#160;        <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a4604724710bc619dbfee5869608f573d" title="Gets the World Object restitution coefficient.">PhysicsProxy::GetRestitution</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;<span class="keyword">            </span>{ <span class="keywordflow">return</span> this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac409b95e62f39f23deebd9b6ba9f6c2d" title="Accessor for the internal physics object.">_GetBasePhysicsObject</a>()-&gt;getRestitution(); }</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;<span class="comment">        ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;<span class="comment"></span>        <span class="comment">// Activation State</span></div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;</div>
<div class="line"><a name="l00506"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#af6c31bd37245ba2af2544bcf3288683f">  506</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#af6c31bd37245ba2af2544bcf3288683f" title="Sets the activation state of the world object.">PhysicsProxy::SetActivationState</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a17f518115a6221cce3619160261ca407" title="This is used by physics proxies to monitor and set their physics activation.">Physics::ActivationState</a> State, <span class="keywordtype">bool</span> Force)</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;        {</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;            <span class="keywordflow">if</span>(Force) this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac409b95e62f39f23deebd9b6ba9f6c2d" title="Accessor for the internal physics object.">_GetBasePhysicsObject</a>()-&gt;forceActivationState(State);</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;            <span class="keywordflow">else</span> this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac409b95e62f39f23deebd9b6ba9f6c2d" title="Accessor for the internal physics object.">_GetBasePhysicsObject</a>()-&gt;setActivationState(State);</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;        }</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;</div>
<div class="line"><a name="l00512"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a21075b3296c2f5de292661475e762673">  512</a></span>&#160;        <a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a17f518115a6221cce3619160261ca407" title="This is used by physics proxies to monitor and set their physics activation.">Physics::ActivationState</a> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a21075b3296c2f5de292661475e762673" title="Gets the current activation state of this proxy.">PhysicsProxy::GetActivationState</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a17f518115a6221cce3619160261ca407" title="This is used by physics proxies to monitor and set their physics activation.">Physics::ActivationState</a><span class="keyword">&gt;</span>( this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac409b95e62f39f23deebd9b6ba9f6c2d" title="Accessor for the internal physics object.">_GetBasePhysicsObject</a>()-&gt;getActivationState() );</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;        }</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;</div>
<div class="line"><a name="l00517"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ad3cb32fd4ded679f6a5c1d32dbdbcef7">  517</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ad3cb32fd4ded679f6a5c1d32dbdbcef7" title="Checks if the object is active in the simulation.">PhysicsProxy::IsActive</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;            <span class="keywordflow">return</span> this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac409b95e62f39f23deebd9b6ba9f6c2d" title="Accessor for the internal physics object.">_GetBasePhysicsObject</a>()-&gt;isActive();</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;        }</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;</div>
<div class="line"><a name="l00522"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#af730b22f0a0a73ee3f4d6e89a7d6f8e2">  522</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#af730b22f0a0a73ee3f4d6e89a7d6f8e2" title="Sets the amount of time this object needs to have no forces enacted upon it to be deactivated...">PhysicsProxy::SetDeactivationTime</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> <a class="code" href="structMezzanine_1_1Time.xhtml" title="A container for the metrics of time relevant for the timer class.">Time</a>)</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;        {</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac409b95e62f39f23deebd9b6ba9f6c2d" title="Accessor for the internal physics object.">_GetBasePhysicsObject</a>()-&gt;setDeactivationTime(Time);</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;        }</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;</div>
<div class="line"><a name="l00527"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a8bf37c9f8a6554f333f049337e5b3a2a">  527</a></span>&#160;        <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a8bf37c9f8a6554f333f049337e5b3a2a" title="Gets the current deactivation time for this object.">PhysicsProxy::GetDeactivationTime</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;            <span class="keywordflow">return</span> this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac409b95e62f39f23deebd9b6ba9f6c2d" title="Accessor for the internal physics object.">_GetBasePhysicsObject</a>()-&gt;getDeactivationTime();</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;        }</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;<span class="comment">        ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;<span class="comment"></span>        <span class="comment">// Transform Methods</span></div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;</div>
<div class="line"><a name="l00535"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a2b5bec5b04620f10872ffffaa83e65ef">  535</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a2b5bec5b04620f10872ffffaa83e65ef" title="Sets the location of this object in parent space. ">PhysicsProxy::SetLocation</a>(<span class="keyword">const</span> <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a>&amp; Loc)</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;        {</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a2b5bec5b04620f10872ffffaa83e65ef" title="Sets the location of this object in parent space. ">SetLocation</a>(Loc.<a class="code" href="classMezzanine_1_1Vector3.xhtml#aa858d9bc5ac5ad1b685b7088c94c05f6" title="Coordinate on the X vector.">X</a>,Loc.<a class="code" href="classMezzanine_1_1Vector3.xhtml#a2303527e4ea4cd1659a23320627cd62c" title="Coordinate on the Y vector.">Y</a>,Loc.<a class="code" href="classMezzanine_1_1Vector3.xhtml#a9b887faced986921956f20f3e4cb8ddc" title="Coordinate on the Z vector.">Z</a>);</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;        }</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;</div>
<div class="line"><a name="l00540"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a1e13699c8ff5465e606726fd9b591733">  540</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a2b5bec5b04620f10872ffffaa83e65ef" title="Sets the location of this object in parent space. ">PhysicsProxy::SetLocation</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> X, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> Y, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> Z)</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;        {</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;            btVector3 NewLoc(X,Y,Z);</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac409b95e62f39f23deebd9b6ba9f6c2d" title="Accessor for the internal physics object.">_GetBasePhysicsObject</a>()-&gt;getWorldTransform().setOrigin(NewLoc);</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac409b95e62f39f23deebd9b6ba9f6c2d" title="Accessor for the internal physics object.">_GetBasePhysicsObject</a>()-&gt;getInterpolationWorldTransform().setOrigin(NewLoc);</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;        }</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;</div>
<div class="line"><a name="l00547"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ad29760e7413df5fee2d41fb4fb24ed77">  547</a></span>&#160;        <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ad29760e7413df5fee2d41fb4fb24ed77" title="Gets this objects current location. ">PhysicsProxy::GetLocation</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a>( this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac409b95e62f39f23deebd9b6ba9f6c2d" title="Accessor for the internal physics object.">_GetBasePhysicsObject</a>()-&gt;getWorldTransform().getOrigin() );</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;        }</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;</div>
<div class="line"><a name="l00552"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a3558fa69d0c863f867e640b27f619c9b">  552</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a3558fa69d0c863f867e640b27f619c9b" title="Sets the orientation of this object in parent space. ">PhysicsProxy::SetOrientation</a>(<span class="keyword">const</span> <a class="code" href="classMezzanine_1_1Quaternion.xhtml" title="This is used to store information about rotation in 3d space.">Quaternion</a>&amp; Ori)</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;        {</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a3558fa69d0c863f867e640b27f619c9b" title="Sets the orientation of this object in parent space. ">SetOrientation</a>(Ori.<a class="code" href="classMezzanine_1_1Quaternion.xhtml#afe9d0fceef87816390f4181aadd9e683" title="The X component of the Axis.">X</a>,Ori.<a class="code" href="classMezzanine_1_1Quaternion.xhtml#ae0170f8f57a3471921a312413df42151" title="The Y component of the Axis.">Y</a>,Ori.<a class="code" href="classMezzanine_1_1Quaternion.xhtml#a1d93e9f132b4e7c71127f2b307c998db" title="The Z component of the Axis.">Z</a>,Ori.<a class="code" href="classMezzanine_1_1Quaternion.xhtml#a0efb51aeabeecf63fd30966ea68a0cdc" title="Rotation on the Axis X, Y and Z defined.">W</a>);</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;        }</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;</div>
<div class="line"><a name="l00557"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a08fbe4267b3b22bd18b4dfc8720f2c45">  557</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a3558fa69d0c863f867e640b27f619c9b" title="Sets the orientation of this object in parent space. ">PhysicsProxy::SetOrientation</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> X, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> Y, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> Z, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> W)</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;        {</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;            btQuaternion NewRot(X,Y,Z,W);</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac409b95e62f39f23deebd9b6ba9f6c2d" title="Accessor for the internal physics object.">_GetBasePhysicsObject</a>()-&gt;getWorldTransform().setRotation(NewRot);</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac409b95e62f39f23deebd9b6ba9f6c2d" title="Accessor for the internal physics object.">_GetBasePhysicsObject</a>()-&gt;getInterpolationWorldTransform().setRotation(NewRot);</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;        }</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;</div>
<div class="line"><a name="l00564"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ab193e177391f22755a1eb6d07d13ae76">  564</a></span>&#160;        <a class="code" href="classMezzanine_1_1Quaternion.xhtml" title="This is used to store information about rotation in 3d space.">Quaternion</a> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ab193e177391f22755a1eb6d07d13ae76" title="Gets this objects current orientation. ">PhysicsProxy::GetOrientation</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classMezzanine_1_1Quaternion.xhtml" title="This is used to store information about rotation in 3d space.">Quaternion</a>( this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac409b95e62f39f23deebd9b6ba9f6c2d" title="Accessor for the internal physics object.">_GetBasePhysicsObject</a>()-&gt;getWorldTransform().getRotation() );</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;        }</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;</div>
<div class="line"><a name="l00569"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac31d6912be34499b78b7561ef43bef30">  569</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac31d6912be34499b78b7561ef43bef30" title="Sets the scaling to be applied to this object. ">PhysicsProxy::SetScale</a>(<span class="keyword">const</span> <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a>&amp; Sc)</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;        {</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ae85957f245b9e955b2bbbe0ef2058f30" title="A vector3 storing the scaling applied to this body.">BodyScale</a> = Sc;</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;            <span class="keywordflow">if</span>( this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a48dc8fc1aea598d69645e05ffdf8361b" title="This is an internal only shape that provides the ability for a collision shape to be scaled locally (...">ScalerShape</a> != NULL ) {</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;                this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a48dc8fc1aea598d69645e05ffdf8361b" title="This is an internal only shape that provides the ability for a collision shape to be scaled locally (...">ScalerShape</a>-&gt;setLocalScaling(Sc.<a class="code" href="classMezzanine_1_1Vector3.xhtml#ab9fb84bdbfe3bed9fd210a6ad1cee8b7" title="Gets a Bullet vector3.">GetBulletVector3</a>());</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;            }<span class="keywordflow">else</span> <span class="keywordflow">if</span>( this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#abc7e8655c424d511040cbf6f100b5e64" title="The physics shape of this proxy.">ProxyShape</a> != NULL ) {</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;                this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#abc7e8655c424d511040cbf6f100b5e64" title="The physics shape of this proxy.">ProxyShape</a>-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a332218c96af9808146e588f08675d3e3" title="Scales the collision shape on each of it&#39;s axes.">SetScaling</a>(Sc);</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;            }</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;        }</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;</div>
<div class="line"><a name="l00579"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a11302d21c6d358b16b5b3e31598563fb">  579</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac31d6912be34499b78b7561ef43bef30" title="Sets the scaling to be applied to this object. ">PhysicsProxy::SetScale</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> X, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> Y, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> Z)</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;        {</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac31d6912be34499b78b7561ef43bef30" title="Sets the scaling to be applied to this object. ">SetScale</a>( <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a>(X,Y,Z) );</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;        }</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;</div>
<div class="line"><a name="l00584"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#aa6c122590516bfabd50b25541ff66bd4">  584</a></span>&#160;        <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#aa6c122590516bfabd50b25541ff66bd4" title="Gets the scaling currently being applied to this object. ">PhysicsProxy::GetScale</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;            <span class="keywordflow">return</span> this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ae85957f245b9e955b2bbbe0ef2058f30" title="A vector3 storing the scaling applied to this body.">BodyScale</a>;</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;        }</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;</div>
<div class="line"><a name="l00589"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a4addbae29f6520856fb9770590408fc5">  589</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a4addbae29f6520856fb9770590408fc5" title="Moves this object from it&#39;s current location. ">PhysicsProxy::Translate</a>(<span class="keyword">const</span> <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a>&amp; Trans)</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;        {</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a2b5bec5b04620f10872ffffaa83e65ef" title="Sets the location of this object in parent space. ">SetLocation</a>( this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ad29760e7413df5fee2d41fb4fb24ed77" title="Gets this objects current location. ">GetLocation</a>() + Trans );</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;        }</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;</div>
<div class="line"><a name="l00594"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a6eb46a4aab40d737d664e01f4b800940">  594</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a4addbae29f6520856fb9770590408fc5" title="Moves this object from it&#39;s current location. ">PhysicsProxy::Translate</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> X, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> Y, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> Z)</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;        {</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;            <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> Trans(X,Y,Z);</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a2b5bec5b04620f10872ffffaa83e65ef" title="Sets the location of this object in parent space. ">SetLocation</a>( this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ad29760e7413df5fee2d41fb4fb24ed77" title="Gets this objects current location. ">GetLocation</a>() + Trans );</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;        }</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;</div>
<div class="line"><a name="l00600"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a7e337d206712f0d7b9c02bc14f7ed968">  600</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a7e337d206712f0d7b9c02bc14f7ed968" title="Rotate the object around the Y axis. ">PhysicsProxy::Yaw</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> Angle)</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;        {</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;            <a class="code" href="classMezzanine_1_1Quaternion.xhtml" title="This is used to store information about rotation in 3d space.">Quaternion</a> NewRot = this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ab193e177391f22755a1eb6d07d13ae76" title="Gets this objects current orientation. ">GetOrientation</a>() * <a class="code" href="classMezzanine_1_1Quaternion.xhtml" title="This is used to store information about rotation in 3d space.">Quaternion</a>(Angle,<a class="code" href="classMezzanine_1_1Vector3.xhtml#a62285c6842027aec46da54553c22bc61" title="Gets a vector representing the Y unit of a vector.">Vector3::Unit_Y</a>());</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a3558fa69d0c863f867e640b27f619c9b" title="Sets the orientation of this object in parent space. ">SetOrientation</a>(NewRot);</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;        }</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;</div>
<div class="line"><a name="l00606"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a10626d236aea69bbf784a7746ea522ac">  606</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a10626d236aea69bbf784a7746ea522ac" title="Rotate the object around the X axis. ">PhysicsProxy::Pitch</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> Angle)</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;        {</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;            <a class="code" href="classMezzanine_1_1Quaternion.xhtml" title="This is used to store information about rotation in 3d space.">Quaternion</a> NewRot = this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ab193e177391f22755a1eb6d07d13ae76" title="Gets this objects current orientation. ">GetOrientation</a>() * <a class="code" href="classMezzanine_1_1Quaternion.xhtml" title="This is used to store information about rotation in 3d space.">Quaternion</a>(Angle,<a class="code" href="classMezzanine_1_1Vector3.xhtml#aa3d186d62631a38fe6cd553a1a92469a" title="Gets a vector representing the X unit of a Vector3.">Vector3::Unit_X</a>());</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a3558fa69d0c863f867e640b27f619c9b" title="Sets the orientation of this object in parent space. ">SetOrientation</a>(NewRot);</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;        }</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;</div>
<div class="line"><a name="l00612"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a39c7f8277d5d88bfbc27744874775a18">  612</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a39c7f8277d5d88bfbc27744874775a18" title="Rotate the object around the Z axis. ">PhysicsProxy::Roll</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> Angle)</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;        {</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;            <a class="code" href="classMezzanine_1_1Quaternion.xhtml" title="This is used to store information about rotation in 3d space.">Quaternion</a> NewRot = this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ab193e177391f22755a1eb6d07d13ae76" title="Gets this objects current orientation. ">GetOrientation</a>() * <a class="code" href="classMezzanine_1_1Quaternion.xhtml" title="This is used to store information about rotation in 3d space.">Quaternion</a>(Angle,<a class="code" href="classMezzanine_1_1Vector3.xhtml#a6a70011d21182d44fd458458b1627ea1" title="Gets a vector representing the Z unit of a vector.">Vector3::Unit_Z</a>());</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a3558fa69d0c863f867e640b27f619c9b" title="Sets the orientation of this object in parent space. ">SetOrientation</a>(NewRot);</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;        }</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;</div>
<div class="line"><a name="l00618"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a34dd4309b0befa01be8ae451022f41ee">  618</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a34dd4309b0befa01be8ae451022f41ee" title="Rotates the object from it&#39;s existing rotation. ">PhysicsProxy::Rotate</a>(<span class="keyword">const</span> <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a>&amp; Axis, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> Angle)</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;        {</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;            <a class="code" href="classMezzanine_1_1Quaternion.xhtml" title="This is used to store information about rotation in 3d space.">Quaternion</a> NewRot = this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ab193e177391f22755a1eb6d07d13ae76" title="Gets this objects current orientation. ">GetOrientation</a>() * <a class="code" href="classMezzanine_1_1Quaternion.xhtml" title="This is used to store information about rotation in 3d space.">Quaternion</a>(Angle,Axis);</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a3558fa69d0c863f867e640b27f619c9b" title="Sets the orientation of this object in parent space. ">SetOrientation</a>(NewRot);</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;        }</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;</div>
<div class="line"><a name="l00624"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a7d9f7ea9b9304c1c2076ed86861cf94e">  624</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a34dd4309b0befa01be8ae451022f41ee" title="Rotates the object from it&#39;s existing rotation. ">PhysicsProxy::Rotate</a>(<span class="keyword">const</span> <a class="code" href="classMezzanine_1_1Quaternion.xhtml" title="This is used to store information about rotation in 3d space.">Quaternion</a>&amp; Rotation)</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;        {</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;            <a class="code" href="classMezzanine_1_1Quaternion.xhtml" title="This is used to store information about rotation in 3d space.">Quaternion</a> NewRot = this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ab193e177391f22755a1eb6d07d13ae76" title="Gets this objects current orientation. ">GetOrientation</a>() * Rotation;</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a3558fa69d0c863f867e640b27f619c9b" title="Sets the orientation of this object in parent space. ">SetOrientation</a>(NewRot);</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;        }</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;</div>
<div class="line"><a name="l00630"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a24ccb983b48163c89dbf311de7594a90">  630</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a24ccb983b48163c89dbf311de7594a90" title="Scales the object from it&#39;s current size. ">PhysicsProxy::Scale</a>(<span class="keyword">const</span> <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a>&amp; Scale)</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;        {</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;            <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> NewScale = this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#aa6c122590516bfabd50b25541ff66bd4" title="Gets the scaling currently being applied to this object. ">GetScale</a>() * <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a24ccb983b48163c89dbf311de7594a90" title="Scales the object from it&#39;s current size. ">Scale</a>;</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac31d6912be34499b78b7561ef43bef30" title="Sets the scaling to be applied to this object. ">SetScale</a>(NewScale);</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;        }</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;</div>
<div class="line"><a name="l00636"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a611089f99118ae94d73274beb069e30b">  636</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a24ccb983b48163c89dbf311de7594a90" title="Scales the object from it&#39;s current size. ">PhysicsProxy::Scale</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> X, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> Y, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> Z)</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;        {</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;            <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> NewScale(X,Y,Z);</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a24ccb983b48163c89dbf311de7594a90" title="Scales the object from it&#39;s current size. ">Scale</a>(NewScale);</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;        }</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;<span class="comment">        ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;<span class="comment"></span>        <span class="comment">// Serialization</span></div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;</div>
<div class="line"><a name="l00645"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#abd79eb2336cc349af785a65cb410ae87">  645</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#abd79eb2336cc349af785a65cb410ae87">PhysicsProxy::ProtoSerialize</a>(<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">XML::Node</a>&amp; ParentNode)<span class="keyword"> const</span></div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;            <a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">XML::Node</a> SelfRoot = ParentNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a65772e1f13ac21655e3ffbe8ffe4aaa1" title="Creates a Node and makes it a child of this one.">AppendChild</a>(this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ade57416c69f8b5b1e82f7211b4244d32" title="Gets the most derived serializable name of this WorldProxy. ">GetDerivedSerializableName</a>());</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a9d5e4859a029c3f43c48050ffb4b9c1c" title="Convert the properties of this class to an XML::Node ready for serialization.">ProtoSerializeProperties</a>(SelfRoot);</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#aad995b7fd70a39de70e8a30940073f83" title="Convert the shape of this class to an XML::Node ready for serialization.">ProtoSerializeShape</a>(SelfRoot);</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;        }</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;</div>
<div class="line"><a name="l00653"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a9d5e4859a029c3f43c48050ffb4b9c1c">  653</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a9d5e4859a029c3f43c48050ffb4b9c1c" title="Convert the properties of this class to an XML::Node ready for serialization.">PhysicsProxy::ProtoSerializeProperties</a>(<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">XML::Node</a>&amp; SelfRoot)<span class="keyword"> const</span></div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;            <span class="comment">// We&#39;re at the base implementation, so no calling of child implementations</span></div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;            <a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">XML::Node</a> PropertiesNode = SelfRoot.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a65772e1f13ac21655e3ffbe8ffe4aaa1" title="Creates a Node and makes it a child of this one.">AppendChild</a>( <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a0ee3fd4d37eb7c85a4895d3c41d6ce6c" title="Get the name of the the XML tag the Renderable class will leave behind as its instances are serialize...">PhysicsProxy::GetSerializableName</a>() + <span class="stringliteral">&quot;Properties&quot;</span> );</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;            <span class="keywordflow">if</span>( PropertiesNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a20ea63a61ca1a7df2e00e074178bd9a4" title="Creates an Attribute and puts it at the end of this Nodes attributes.">AppendAttribute</a>(<span class="stringliteral">&quot;Version&quot;</span>).<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#afff322c3640040f0054c6d1e346891fc" title="Set the value of this.">SetValue</a>(<span class="stringliteral">&quot;1&quot;</span>) &amp;&amp;</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;                PropertiesNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a20ea63a61ca1a7df2e00e074178bd9a4" title="Creates an Attribute and puts it at the end of this Nodes attributes.">AppendAttribute</a>(<span class="stringliteral">&quot;CollisionGroup&quot;</span>).<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#afff322c3640040f0054c6d1e346891fc" title="Set the value of this.">SetValue</a>( this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a4f57dc0341aa2b9e0ea092581c305570" title="Gets the objects collision group.">GetCollisionGroup</a>() ) &amp;&amp;</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;                PropertiesNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a20ea63a61ca1a7df2e00e074178bd9a4" title="Creates an Attribute and puts it at the end of this Nodes attributes.">AppendAttribute</a>(<span class="stringliteral">&quot;CollisionMask&quot;</span>).<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#afff322c3640040f0054c6d1e346891fc" title="Set the value of this.">SetValue</a>( this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ad0151e1b745385e0f7895e5f15d5f56b" title="Gets the object&#39;s collision mask.">GetCollisionMask</a>() ) &amp;&amp;</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;                PropertiesNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a20ea63a61ca1a7df2e00e074178bd9a4" title="Creates an Attribute and puts it at the end of this Nodes attributes.">AppendAttribute</a>(<span class="stringliteral">&quot;CollisionFlags&quot;</span>).<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#afff322c3640040f0054c6d1e346891fc" title="Set the value of this.">SetValue</a>( this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a3d86f7cb6d277e64bd3d67b142c0828e" title="Gets the collection of flags that help determine collision response for this object.">GetCollisionFlags</a>() ) &amp;&amp;</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;                PropertiesNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a20ea63a61ca1a7df2e00e074178bd9a4" title="Creates an Attribute and puts it at the end of this Nodes attributes.">AppendAttribute</a>(<span class="stringliteral">&quot;Friction&quot;</span>).<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#afff322c3640040f0054c6d1e346891fc" title="Set the value of this.">SetValue</a>( this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a101f3c4981e07f98b87ae481b8ac4245" title="Gets the sliding friction coefficient.">GetFriction</a>() ) &amp;&amp;</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;                PropertiesNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a20ea63a61ca1a7df2e00e074178bd9a4" title="Creates an Attribute and puts it at the end of this Nodes attributes.">AppendAttribute</a>(<span class="stringliteral">&quot;RollingFriction&quot;</span>).<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#afff322c3640040f0054c6d1e346891fc" title="Set the value of this.">SetValue</a>( this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#acd8e178c311b3f66526b29b29263086c" title="Gets the rolling friction coefficient.">GetRollingFriction</a>() ) &amp;&amp;</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;                PropertiesNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a20ea63a61ca1a7df2e00e074178bd9a4" title="Creates an Attribute and puts it at the end of this Nodes attributes.">AppendAttribute</a>(<span class="stringliteral">&quot;AnisotropicFrictionMode&quot;</span>).<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#afff322c3640040f0054c6d1e346891fc" title="Set the value of this.">SetValue</a>( this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a7a031a99d7e92ca6c7c0a2cf473e712f" title="Gets the current Anisotropic friction mode being applied to this proxy.">GetAnisotropicFrictionMode</a>() ) &amp;&amp;</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;                PropertiesNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a20ea63a61ca1a7df2e00e074178bd9a4" title="Creates an Attribute and puts it at the end of this Nodes attributes.">AppendAttribute</a>(<span class="stringliteral">&quot;Restitution&quot;</span>).<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#afff322c3640040f0054c6d1e346891fc" title="Set the value of this.">SetValue</a>( this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a4604724710bc619dbfee5869608f573d" title="Gets the World Object restitution coefficient.">GetRestitution</a>() ) &amp;&amp;</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;                PropertiesNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a20ea63a61ca1a7df2e00e074178bd9a4" title="Creates an Attribute and puts it at the end of this Nodes attributes.">AppendAttribute</a>(<span class="stringliteral">&quot;ActivationState&quot;</span>).<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#afff322c3640040f0054c6d1e346891fc" title="Set the value of this.">SetValue</a>( static_cast&lt;Whole&gt;( this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a21075b3296c2f5de292661475e762673" title="Gets the current activation state of this proxy.">GetActivationState</a>() ) ) &amp;&amp;</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;                PropertiesNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a20ea63a61ca1a7df2e00e074178bd9a4" title="Creates an Attribute and puts it at the end of this Nodes attributes.">AppendAttribute</a>(<span class="stringliteral">&quot;DeactivationTime&quot;</span>).<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#afff322c3640040f0054c6d1e346891fc" title="Set the value of this.">SetValue</a>( this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a8bf37c9f8a6554f333f049337e5b3a2a" title="Gets the current deactivation time for this object.">GetDeactivationTime</a>() ) &amp;&amp;</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;                PropertiesNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a20ea63a61ca1a7df2e00e074178bd9a4" title="Creates an Attribute and puts it at the end of this Nodes attributes.">AppendAttribute</a>(<span class="stringliteral">&quot;ContactProcessingThreshold&quot;</span>).<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#afff322c3640040f0054c6d1e346891fc" title="Set the value of this.">SetValue</a>( this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a343da8d5f5b73e4bbc018ffd07431377" title="Gets the maximum distance to be considered for processing collisions with this object.">_GetContactProcessingThreshold</a>() ) )</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;            {</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;                <a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">XML::Node</a> LocationNode = PropertiesNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a65772e1f13ac21655e3ffbe8ffe4aaa1" title="Creates a Node and makes it a child of this one.">AppendChild</a>(<span class="stringliteral">&quot;Location&quot;</span>);</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;                this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ad29760e7413df5fee2d41fb4fb24ed77" title="Gets this objects current location. ">GetLocation</a>().<a class="code" href="classMezzanine_1_1Vector3.xhtml#a6f0f6a536da4fe69db00960953ef373b" title="Convert this class to an XML::Node ready for serialization.">ProtoSerialize</a>( LocationNode );</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;                <a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">XML::Node</a> OrientationNode = PropertiesNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a65772e1f13ac21655e3ffbe8ffe4aaa1" title="Creates a Node and makes it a child of this one.">AppendChild</a>(<span class="stringliteral">&quot;Orientation&quot;</span>);</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;                this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ab193e177391f22755a1eb6d07d13ae76" title="Gets this objects current orientation. ">GetOrientation</a>().<a class="code" href="classMezzanine_1_1Quaternion.xhtml#ab2439bccdabc60c847174248e86dd13e" title="Convert this class to an XML::Node ready for serialization.">ProtoSerialize</a>( OrientationNode );</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;                <a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">XML::Node</a> ScaleNode = PropertiesNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a65772e1f13ac21655e3ffbe8ffe4aaa1" title="Creates a Node and makes it a child of this one.">AppendChild</a>(<span class="stringliteral">&quot;Scale&quot;</span>);</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;                this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#aa6c122590516bfabd50b25541ff66bd4" title="Gets the scaling currently being applied to this object. ">GetScale</a>().<a class="code" href="classMezzanine_1_1Vector3.xhtml#a6f0f6a536da4fe69db00960953ef373b" title="Convert this class to an XML::Node ready for serialization.">ProtoSerialize</a>( ScaleNode );</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;                <a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">XML::Node</a> AnisotropicFrictionNode = PropertiesNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a65772e1f13ac21655e3ffbe8ffe4aaa1" title="Creates a Node and makes it a child of this one.">AppendChild</a>(<span class="stringliteral">&quot;AnisotropicFriction&quot;</span>);</div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;                this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a5eccef79efa1fbfcdb16f2676db3ce62" title="Gets the anisotropic friction factor.">GetAnisotropicFriction</a>().<a class="code" href="classMezzanine_1_1Vector3.xhtml#a6f0f6a536da4fe69db00960953ef373b" title="Convert this class to an XML::Node ready for serialization.">ProtoSerialize</a>( AnisotropicFrictionNode );</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;                <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;            }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;                <a class="code" href="namespaceMezzanine.xhtml#ab061665515c8e8a8b09ee54d93612da1" title="Simply does some string concatenation, then throws an Exception.">SerializeError</a>(<span class="stringliteral">&quot;Create XML Attribute Values&quot;</span>,<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a0ee3fd4d37eb7c85a4895d3c41d6ce6c" title="Get the name of the the XML tag the Renderable class will leave behind as its instances are serialize...">PhysicsProxy::GetSerializableName</a>() + <span class="stringliteral">&quot;Properties&quot;</span>,<span class="keyword">true</span>);</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;            }</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;        }</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;</div>
<div class="line"><a name="l00685"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#aad995b7fd70a39de70e8a30940073f83">  685</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#aad995b7fd70a39de70e8a30940073f83" title="Convert the shape of this class to an XML::Node ready for serialization.">PhysicsProxy::ProtoSerializeShape</a>(<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">XML::Node</a>&amp; SelfRoot)<span class="keyword"> const</span></div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;            <a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">XML::Node</a> ShapeNode = SelfRoot.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a65772e1f13ac21655e3ffbe8ffe4aaa1" title="Creates a Node and makes it a child of this one.">AppendChild</a>( <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a0ee3fd4d37eb7c85a4895d3c41d6ce6c" title="Get the name of the the XML tag the Renderable class will leave behind as its instances are serialize...">PhysicsProxy::GetSerializableName</a>() + <span class="stringliteral">&quot;Shape&quot;</span> );</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;            <span class="keywordflow">if</span>( ShapeNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a20ea63a61ca1a7df2e00e074178bd9a4" title="Creates an Attribute and puts it at the end of this Nodes attributes.">AppendAttribute</a>(<span class="stringliteral">&quot;Version&quot;</span>).<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#afff322c3640040f0054c6d1e346891fc" title="Set the value of this.">SetValue</a>(<span class="stringliteral">&quot;1&quot;</span>) &amp;&amp;</div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;                ShapeNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a20ea63a61ca1a7df2e00e074178bd9a4" title="Creates an Attribute and puts it at the end of this Nodes attributes.">AppendAttribute</a>(<span class="stringliteral">&quot;ProxyShape&quot;</span>).<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#afff322c3640040f0054c6d1e346891fc" title="Set the value of this.">SetValue</a>( this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#abc7e8655c424d511040cbf6f100b5e64" title="The physics shape of this proxy.">ProxyShape</a>-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a1a4a30c6523dc87fee9f8c33f9a7dbfa" title="Gets the name of this shape.">GetName</a>() ) )</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;            {</div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;                <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;            }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;                <a class="code" href="namespaceMezzanine.xhtml#ab061665515c8e8a8b09ee54d93612da1" title="Simply does some string concatenation, then throws an Exception.">SerializeError</a>(<span class="stringliteral">&quot;Create XML Attribute Values&quot;</span>,<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a0ee3fd4d37eb7c85a4895d3c41d6ce6c" title="Get the name of the the XML tag the Renderable class will leave behind as its instances are serialize...">PhysicsProxy::GetSerializableName</a>() + <span class="stringliteral">&quot;Shape&quot;</span>,<span class="keyword">true</span>);</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;            }</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;        }</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;</div>
<div class="line"><a name="l00698"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a92fcdf47d1eb3140f6f5b9e40bc1625f">  698</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a92fcdf47d1eb3140f6f5b9e40bc1625f" title="Take the data stored in an XML Node and overwrite this object with it. ">PhysicsProxy::ProtoDeSerialize</a>(<span class="keyword">const</span> <a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">XML::Node</a>&amp; SelfRoot)</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;        {</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#add09356a645dbb22f1bde76f07576cbe" title="Take the data stored in an XML Node and overwrite the properties of this object with it...">ProtoDeSerializeProperties</a>(SelfRoot);</div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;        }</div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;</div>
<div class="line"><a name="l00703"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#add09356a645dbb22f1bde76f07576cbe">  703</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#add09356a645dbb22f1bde76f07576cbe" title="Take the data stored in an XML Node and overwrite the properties of this object with it...">PhysicsProxy::ProtoDeSerializeProperties</a>(<span class="keyword">const</span> <a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">XML::Node</a>&amp; SelfRoot)</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;        {</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;            <span class="comment">// We&#39;re at the base implementation, so no calling of child implementations</span></div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;            <a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml" title="A light-weight handle for manipulating attributes in DOM tree.">XML::Attribute</a> CurrAttrib;</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;            <a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">XML::Node</a> PropertiesNode = SelfRoot.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a9c5b7b5376c9444d3d1d0bfeb47e4dc4" title="Attempt to get a child Node with a given name.">GetChild</a>( <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a0ee3fd4d37eb7c85a4895d3c41d6ce6c" title="Get the name of the the XML tag the Renderable class will leave behind as its instances are serialize...">PhysicsProxy::GetSerializableName</a>() + <span class="stringliteral">&quot;Properties&quot;</span> );</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;            <span class="keywordflow">if</span>( !PropertiesNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a8c770f21644c937e1e5ca1fd9966651b" title="Is this storing anything at all?">Empty</a>() ) {</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;                <span class="keywordflow">if</span>(PropertiesNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a7257f2f9f8e08461260afae0d5062aa7" title="Attempt to get an Attribute on this Node with a given name.">GetAttribute</a>(<span class="stringliteral">&quot;Version&quot;</span>).<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#a433fef4f74eaa825755b53b1baea539a" title="Attempts to convert the value of the attribute to an int and returns the results.">AsInt</a>() == 1) {</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;                    <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="Whole is an unsigned integer, it will be at least 32bits in size.">Whole</a> AFMode = 0;</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;                    CurrAttrib = PropertiesNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a7257f2f9f8e08461260afae0d5062aa7" title="Attempt to get an Attribute on this Node with a given name.">GetAttribute</a>(<span class="stringliteral">&quot;CollisionGroup&quot;</span>);</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;                    <span class="keywordflow">if</span>( !CurrAttrib.<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#a9f3ac1beb83562f6b2c155772b87dc05" title="Is this storing anything at all?">Empty</a>() )</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;                        this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#af4d7c1657c720dba675de02aa6a3bc14" title="Sets which collision group this proxy belongs to, which determines it&#39;s collision behavior...">SetCollisionGroup</a>( CurrAttrib.<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#ae5d2a5afd1559756172c5fbeadd3750b" title="Attempts to convert the value of the attribute to a Whole and returns the results.">AsWhole</a>() );</div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;                    CurrAttrib = PropertiesNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a7257f2f9f8e08461260afae0d5062aa7" title="Attempt to get an Attribute on this Node with a given name.">GetAttribute</a>(<span class="stringliteral">&quot;CollisionMask&quot;</span>);</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;                    <span class="keywordflow">if</span>( !CurrAttrib.<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#a9f3ac1beb83562f6b2c155772b87dc05" title="Is this storing anything at all?">Empty</a>() )</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;                        this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ae602999ca7f2e7cf87832b7d2a1c85f9" title="Sets the collision mask of this proxy, which determines which groups it will collide with...">SetCollisionMask</a>( CurrAttrib.<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#ae5d2a5afd1559756172c5fbeadd3750b" title="Attempts to convert the value of the attribute to a Whole and returns the results.">AsWhole</a>() );</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;                    CurrAttrib = PropertiesNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a7257f2f9f8e08461260afae0d5062aa7" title="Attempt to get an Attribute on this Node with a given name.">GetAttribute</a>(<span class="stringliteral">&quot;CollisionFlags&quot;</span>);</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;                    <span class="keywordflow">if</span>( !CurrAttrib.<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#a9f3ac1beb83562f6b2c155772b87dc05" title="Is this storing anything at all?">Empty</a>() )</div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;                        this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a77d7aa21ff90d12b1c45c1c1e7ca1bce" title="Sets the collection of flags that help determine collision response for this object.">SetCollisionFlags</a>( CurrAttrib.<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#ae5d2a5afd1559756172c5fbeadd3750b" title="Attempts to convert the value of the attribute to a Whole and returns the results.">AsWhole</a>() );</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;                    CurrAttrib = PropertiesNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a7257f2f9f8e08461260afae0d5062aa7" title="Attempt to get an Attribute on this Node with a given name.">GetAttribute</a>(<span class="stringliteral">&quot;Friction&quot;</span>);</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;                    <span class="keywordflow">if</span>( !CurrAttrib.<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#a9f3ac1beb83562f6b2c155772b87dc05" title="Is this storing anything at all?">Empty</a>() )</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;                        this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#adfc0736a59bbc79aa142f28e5dcf0ba7" title="Sets the sliding friction coefficient.">SetFriction</a>( CurrAttrib.<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#a4a8e7e953f94b05f8be0f0beb3ae1fe3" title="Attempts to convert the value of the attribute to a Real and returns the results.">AsReal</a>() );</div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;</div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;                    CurrAttrib = PropertiesNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a7257f2f9f8e08461260afae0d5062aa7" title="Attempt to get an Attribute on this Node with a given name.">GetAttribute</a>(<span class="stringliteral">&quot;RollingFriction&quot;</span>);</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;                    <span class="keywordflow">if</span>( !CurrAttrib.<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#a9f3ac1beb83562f6b2c155772b87dc05" title="Is this storing anything at all?">Empty</a>() )</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;                        this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#aa4d95097eaab83e9d0bf94b082ab1b06" title="Sets the rolling friction coefficient.">SetRollingFriction</a>( CurrAttrib.<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#a4a8e7e953f94b05f8be0f0beb3ae1fe3" title="Attempts to convert the value of the attribute to a Real and returns the results.">AsReal</a>() );</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;</div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;                    CurrAttrib = PropertiesNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a7257f2f9f8e08461260afae0d5062aa7" title="Attempt to get an Attribute on this Node with a given name.">GetAttribute</a>(<span class="stringliteral">&quot;AnisotropicFrictionMode&quot;</span>);</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;                    <span class="keywordflow">if</span>( !CurrAttrib.<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#a9f3ac1beb83562f6b2c155772b87dc05" title="Is this storing anything at all?">Empty</a>() )</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;                        AFMode = CurrAttrib.<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#ae5d2a5afd1559756172c5fbeadd3750b" title="Attempts to convert the value of the attribute to a Whole and returns the results.">AsWhole</a>();</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;                    CurrAttrib = PropertiesNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a7257f2f9f8e08461260afae0d5062aa7" title="Attempt to get an Attribute on this Node with a given name.">GetAttribute</a>(<span class="stringliteral">&quot;Restitution&quot;</span>);</div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;                    <span class="keywordflow">if</span>( !CurrAttrib.<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#a9f3ac1beb83562f6b2c155772b87dc05" title="Is this storing anything at all?">Empty</a>() )</div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;                        this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a8b6875f0453184b919d7978bfba4e172" title="Sets the restitution coefficient.">SetRestitution</a>( CurrAttrib.<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#a4a8e7e953f94b05f8be0f0beb3ae1fe3" title="Attempts to convert the value of the attribute to a Real and returns the results.">AsReal</a>() );</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;                    CurrAttrib = PropertiesNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a7257f2f9f8e08461260afae0d5062aa7" title="Attempt to get an Attribute on this Node with a given name.">GetAttribute</a>(<span class="stringliteral">&quot;ActivationState&quot;</span>);</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;                    <span class="keywordflow">if</span>( !CurrAttrib.<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#a9f3ac1beb83562f6b2c155772b87dc05" title="Is this storing anything at all?">Empty</a>() )</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;                        this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#af6c31bd37245ba2af2544bcf3288683f" title="Sets the activation state of the world object.">SetActivationState</a>( static_cast&lt;Physics::ActivationState&gt;( CurrAttrib.<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#ae5d2a5afd1559756172c5fbeadd3750b" title="Attempts to convert the value of the attribute to a Whole and returns the results.">AsWhole</a>() ) );</div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;</div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;                    CurrAttrib = PropertiesNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a7257f2f9f8e08461260afae0d5062aa7" title="Attempt to get an Attribute on this Node with a given name.">GetAttribute</a>(<span class="stringliteral">&quot;DeactivationTime&quot;</span>);</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;                    <span class="keywordflow">if</span>( !CurrAttrib.<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#a9f3ac1beb83562f6b2c155772b87dc05" title="Is this storing anything at all?">Empty</a>() )</div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;                        this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#af730b22f0a0a73ee3f4d6e89a7d6f8e2" title="Sets the amount of time this object needs to have no forces enacted upon it to be deactivated...">SetDeactivationTime</a>( CurrAttrib.<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#a4a8e7e953f94b05f8be0f0beb3ae1fe3" title="Attempts to convert the value of the attribute to a Real and returns the results.">AsReal</a>() );</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;</div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;                    CurrAttrib = PropertiesNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a7257f2f9f8e08461260afae0d5062aa7" title="Attempt to get an Attribute on this Node with a given name.">GetAttribute</a>(<span class="stringliteral">&quot;ContactProcessingThreshold&quot;</span>);</div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;                    <span class="keywordflow">if</span>( !CurrAttrib.<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#a9f3ac1beb83562f6b2c155772b87dc05" title="Is this storing anything at all?">Empty</a>() )</div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;                        this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ad76871ef8897f722aefb4c3b7dd869e1" title="Sets the maximum distance to be considered for processing collisions with this object.">_SetContactProcessingThreshold</a>( CurrAttrib.<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#a4a8e7e953f94b05f8be0f0beb3ae1fe3" title="Attempts to convert the value of the attribute to a Real and returns the results.">AsReal</a>() );</div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;</div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;                    <span class="comment">// Get the properties that need their own nodes</span></div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;                    <a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">XML::Node</a> PositionNode = PropertiesNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a9c5b7b5376c9444d3d1d0bfeb47e4dc4" title="Attempt to get a child Node with a given name.">GetChild</a>(<span class="stringliteral">&quot;Location&quot;</span>).<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a4fd3f099201e3e6001bdf2afea598a8a" title="Get the first child Node of this Node.">GetFirstChild</a>();</div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;                    <span class="keywordflow">if</span>( !PositionNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a8c770f21644c937e1e5ca1fd9966651b" title="Is this storing anything at all?">Empty</a>() ) {</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;                        <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> Loc(PositionNode);</div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;                        this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a2b5bec5b04620f10872ffffaa83e65ef" title="Sets the location of this object in parent space. ">SetLocation</a>(Loc);</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;                    }</div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;                    <a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">XML::Node</a> OrientationNode = PropertiesNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a9c5b7b5376c9444d3d1d0bfeb47e4dc4" title="Attempt to get a child Node with a given name.">GetChild</a>(<span class="stringliteral">&quot;Orientation&quot;</span>).<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a4fd3f099201e3e6001bdf2afea598a8a" title="Get the first child Node of this Node.">GetFirstChild</a>();</div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;                    <span class="keywordflow">if</span>( !PositionNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a8c770f21644c937e1e5ca1fd9966651b" title="Is this storing anything at all?">Empty</a>() ) {</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;                        <a class="code" href="classMezzanine_1_1Quaternion.xhtml" title="This is used to store information about rotation in 3d space.">Quaternion</a> Rot(OrientationNode);</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;                        this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a3558fa69d0c863f867e640b27f619c9b" title="Sets the orientation of this object in parent space. ">SetOrientation</a>(Rot);</div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;                    }</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;</div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;                    <a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">XML::Node</a> ScaleNode = PropertiesNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a9c5b7b5376c9444d3d1d0bfeb47e4dc4" title="Attempt to get a child Node with a given name.">GetChild</a>(<span class="stringliteral">&quot;Scale&quot;</span>).<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a4fd3f099201e3e6001bdf2afea598a8a" title="Get the first child Node of this Node.">GetFirstChild</a>();</div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;                    <span class="keywordflow">if</span>( !PositionNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a8c770f21644c937e1e5ca1fd9966651b" title="Is this storing anything at all?">Empty</a>() ) {</div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;                        <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a24ccb983b48163c89dbf311de7594a90" title="Scales the object from it&#39;s current size. ">Scale</a>(ScaleNode);</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;                        this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac31d6912be34499b78b7561ef43bef30" title="Sets the scaling to be applied to this object. ">SetScale</a>(Scale);</div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;                    }</div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;</div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;                    <a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">XML::Node</a> AnisotropicFrictionNode = PropertiesNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a9c5b7b5376c9444d3d1d0bfeb47e4dc4" title="Attempt to get a child Node with a given name.">GetChild</a>(<span class="stringliteral">&quot;AnisotropicFriction&quot;</span>).<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a4fd3f099201e3e6001bdf2afea598a8a" title="Get the first child Node of this Node.">GetFirstChild</a>();</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;                    <span class="keywordflow">if</span>( !PositionNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a8c770f21644c937e1e5ca1fd9966651b" title="Is this storing anything at all?">Empty</a>() ) {</div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;                        <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> AF(AnisotropicFrictionNode);</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;                        this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a168d3fabf4990a24b2efb2e91f94572b" title="Sets the anisotropic friction factor.">SetAnisotropicFriction</a>(AF,AFMode);</div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;                    }</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;                }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;                    MEZZ_EXCEPTION(<a class="code" href="classMezzanine_1_1Exception.xhtml#a4ee7e60ac53783c4975240c57071d420a28c9fc403419230fd704065a7b1a37f4" title="When used a instance of InvalidVersionException is thrown. Thrown when a version is accessed/parsed/r...">Exception::INVALID_VERSION_EXCEPTION</a>,<span class="stringliteral">&quot;Incompatible XML Version for &quot;</span> + (<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a0ee3fd4d37eb7c85a4895d3c41d6ce6c" title="Get the name of the the XML tag the Renderable class will leave behind as its instances are serialize...">PhysicsProxy::GetSerializableName</a>() + <span class="stringliteral">&quot;Properties&quot;</span> ) + <span class="stringliteral">&quot;: Not Version 1.&quot;</span>);</div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;                }</div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;            }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;                MEZZ_EXCEPTION(<a class="code" href="classMezzanine_1_1Exception.xhtml#a4ee7e60ac53783c4975240c57071d420abba47926c68e20ed931e796d64cd1428" title="When used a instance of InstanceIdentityNotFoundException is thrown. Thrown when the requested identi...">Exception::II_IDENTITY_NOT_FOUND_EXCEPTION</a>,<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a0ee3fd4d37eb7c85a4895d3c41d6ce6c" title="Get the name of the the XML tag the Renderable class will leave behind as its instances are serialize...">PhysicsProxy::GetSerializableName</a>() + <span class="stringliteral">&quot;Properties&quot;</span> + <span class="stringliteral">&quot; was not found in the provided XML node, which was expected.&quot;</span>);</div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;            }</div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;        }</div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;</div>
<div class="line"><a name="l00785"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a01b8a2b4d6ca69bf65250e98b9ebc63f">  785</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a01b8a2b4d6ca69bf65250e98b9ebc63f" title="Take the data stored in an XML Node and overwrite the shape of this object with it.">PhysicsProxy::ProtoDeSerializeShape</a>(<span class="keyword">const</span> <a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">XML::Node</a>&amp; SelfRoot)</div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;        {</div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;            <a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml" title="A light-weight handle for manipulating attributes in DOM tree.">XML::Attribute</a> CurrAttrib;</div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;            <a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">XML::Node</a> ShapeNode = SelfRoot.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a9c5b7b5376c9444d3d1d0bfeb47e4dc4" title="Attempt to get a child Node with a given name.">GetChild</a>( <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a0ee3fd4d37eb7c85a4895d3c41d6ce6c" title="Get the name of the the XML tag the Renderable class will leave behind as its instances are serialize...">PhysicsProxy::GetSerializableName</a>() + <span class="stringliteral">&quot;Properties&quot;</span> );</div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;</div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;            <span class="keywordflow">if</span>( !ShapeNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a8c770f21644c937e1e5ca1fd9966651b" title="Is this storing anything at all?">Empty</a>() ) {</div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;                <span class="keywordflow">if</span>(ShapeNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a7257f2f9f8e08461260afae0d5062aa7" title="Attempt to get an Attribute on this Node with a given name.">GetAttribute</a>(<span class="stringliteral">&quot;Version&quot;</span>).<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#a433fef4f74eaa825755b53b1baea539a" title="Attempts to convert the value of the attribute to an int and returns the results.">AsInt</a>() == 1) {</div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;                    CurrAttrib = ShapeNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a7257f2f9f8e08461260afae0d5062aa7" title="Attempt to get an Attribute on this Node with a given name.">GetAttribute</a>(<span class="stringliteral">&quot;ProxyShape&quot;</span>);</div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;                    <span class="keywordflow">if</span>( !CurrAttrib.<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#a9f3ac1beb83562f6b2c155772b87dc05" title="Is this storing anything at all?">Empty</a>() ) {</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;                        <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml" title="This is the base class for all collision shapes.">CollisionShape</a>* Shape = <a class="code" href="classMezzanine_1_1Singleton.xhtml#a78fc425584913f0b2c615ec440871a67" title="Fetches a pointer to the singleton.">CollisionShapeManager::GetSingletonPtr</a>()-&gt;GetShape( CurrAttrib.<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#aeaf831643fd53fa7e645bf36b0a8ecec" title="Attempts to convert the value of the attribute to a String and returns the results.">AsString</a>() );</div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;                        this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a125686861d43b00ed835ef2f32362ece" title="Sets the collision shape to be used.">SetCollisionShape</a>( Shape );</div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;                    }</div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;                }</div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;            }</div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;        }</div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;</div>
<div class="line"><a name="l00801"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ade57416c69f8b5b1e82f7211b4244d32">  801</a></span>&#160;        <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ade57416c69f8b5b1e82f7211b4244d32" title="Gets the most derived serializable name of this WorldProxy. ">PhysicsProxy::GetDerivedSerializableName</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;<span class="keyword">            </span>{ <span class="keywordflow">return</span> <a class="code" href="classMezzanine_1_1WorldProxy.xhtml#ac23f8c347cceb75068161cdb7b99d9cf" title="Get the name of the the XML tag the Renderable class will leave behind as its instances are serialize...">PhysicsProxy::SerializableName</a>(); }</div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;</div>
<div class="line"><a name="l00804"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a0ee3fd4d37eb7c85a4895d3c41d6ce6c">  804</a></span>&#160;        <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a0ee3fd4d37eb7c85a4895d3c41d6ce6c" title="Get the name of the the XML tag the Renderable class will leave behind as its instances are serialize...">PhysicsProxy::GetSerializableName</a>()</div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;            { <span class="keywordflow">return</span> <span class="stringliteral">&quot;PhysicsProxy&quot;</span>; }</div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;<span class="comment">        ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;<span class="comment"></span>        <span class="comment">// Internal Methods</span></div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;</div>
<div class="line"><a name="l00810"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ad76871ef8897f722aefb4c3b7dd869e1">  810</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ad76871ef8897f722aefb4c3b7dd869e1" title="Sets the maximum distance to be considered for processing collisions with this object.">PhysicsProxy::_SetContactProcessingThreshold</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> Threshold)</div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;            { this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac409b95e62f39f23deebd9b6ba9f6c2d" title="Accessor for the internal physics object.">_GetBasePhysicsObject</a>()-&gt;setContactProcessingThreshold(Threshold); }</div>
<div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;</div>
<div class="line"><a name="l00813"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a343da8d5f5b73e4bbc018ffd07431377">  813</a></span>&#160;        <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> <a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a343da8d5f5b73e4bbc018ffd07431377" title="Gets the maximum distance to be considered for processing collisions with this object.">PhysicsProxy::_GetContactProcessingThreshold</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;<span class="keyword">            </span>{ <span class="keywordflow">return</span> this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac409b95e62f39f23deebd9b6ba9f6c2d" title="Accessor for the internal physics object.">_GetBasePhysicsObject</a>()-&gt;getContactProcessingThreshold(); }</div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;    }<span class="comment">// Physics</span></div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;}<span class="comment">// Mezzanine</span></div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;</div>
<div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;<span class="preprocessor">#endif</span></div>
</div><!-- fragment --></div><!-- contents -->
<hr class="footer"/><address class="footer"><small>
Generated on Fri Sep 13 2013 23:29:51 for MezzanineEngine by&#160;<a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1</small></address>
</body>
</html>
