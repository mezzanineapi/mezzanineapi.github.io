<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Mezzanine Namespace Reference</title>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="DoxyStyle.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script> 
</head>
<body onload='searchBox.OnSelectItem(0);'>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;" nowrap="nowrap">
   <div id="projectname"><a href="http://blacktoppstudios.com"><img src="logogreen100pxtall.png"/></a>MezzanineEngine&#160;<span id="projectnumber">September14,2013</span></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li class="current"><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="namespaces.xhtml"><span>Namespace&#160;List</span></a></li>
      <li><a href="namespacemembers.xhtml"><span>Namespace&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#nested-classes">Classes</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">Mezzanine Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>The bulk of the engine components go in this namspace.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespaceMezzanine_1_1Audio"><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1Audio.xhtml">Audio</a></td></tr>
<tr class="memdesc:namespaceMezzanine_1_1Audio"><td class="mdescLeft">&#160;</td><td class="mdescRight">This namespace is for all the classes belonging to the <a class="el" href="namespaceMezzanine_1_1Audio.xhtml" title="This namespace is for all the classes belonging to the Audio Subsystem.">Audio</a> Subsystem. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceMezzanine_1_1BinaryTools"><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1BinaryTools.xhtml">BinaryTools</a></td></tr>
<tr class="memdesc:namespaceMezzanine_1_1BinaryTools"><td class="mdescLeft">&#160;</td><td class="mdescRight">A grouping of utilities for working with binary data more easily. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceMezzanine_1_1crossplatform"><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1crossplatform.xhtml">crossplatform</a></td></tr>
<tr class="memdesc:namespaceMezzanine_1_1crossplatform"><td class="mdescLeft">&#160;</td><td class="mdescRight">All functionality that needs different implemenations per platform will go in here. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceMezzanine_1_1debug"><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1debug.xhtml">debug</a></td></tr>
<tr class="memdesc:namespaceMezzanine_1_1debug"><td class="mdescLeft">&#160;</td><td class="mdescRight">This namespace is for internal debugging tools. In general it shouldn't be used in game code. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceMezzanine_1_1Graphics"><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1Graphics.xhtml">Graphics</a></td></tr>
<tr class="memdesc:namespaceMezzanine_1_1Graphics"><td class="mdescLeft">&#160;</td><td class="mdescRight">This namespace is for all the classes belonging to the <a class="el" href="namespaceMezzanine_1_1Graphics.xhtml" title="This namespace is for all the classes belonging to the Graphics Subsystem.">Graphics</a> Subsystem. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceMezzanine_1_1Input"><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1Input.xhtml">Input</a></td></tr>
<tr class="memdesc:namespaceMezzanine_1_1Input"><td class="mdescLeft">&#160;</td><td class="mdescRight">This namespace is for all the classes belonging to the <a class="el" href="namespaceMezzanine_1_1Input.xhtml" title="This namespace is for all the classes belonging to the Input Subsystem.">Input</a> Subsystem. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceMezzanine_1_1internal"><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1internal.xhtml">internal</a></td></tr>
<tr class="memdesc:namespaceMezzanine_1_1internal"><td class="mdescLeft">&#160;</td><td class="mdescRight">This namespace is used for internal helper classes, and in general it should be ignored by game developers. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceMezzanine_1_1Physics"><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1Physics.xhtml">Physics</a></td></tr>
<tr class="memdesc:namespaceMezzanine_1_1Physics"><td class="mdescLeft">&#160;</td><td class="mdescRight">This namespace is for all the classes belonging to the <a class="el" href="namespaceMezzanine_1_1Physics.xhtml" title="This namespace is for all the classes belonging to the Physics Subsystem.">Physics</a> Subsystem. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceMezzanine_1_1Resource"><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1Resource.xhtml">Resource</a></td></tr>
<tr class="memdesc:namespaceMezzanine_1_1Resource"><td class="mdescLeft">&#160;</td><td class="mdescRight">This namespace is for all the classes belonging to the non-network I/O Subsystem. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceMezzanine_1_1Scripting"><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1Scripting.xhtml">Scripting</a></td></tr>
<tr class="memdesc:namespaceMezzanine_1_1Scripting"><td class="mdescLeft">&#160;</td><td class="mdescRight">This namespace is for all the classes belonging to the <a class="el" href="namespaceMezzanine_1_1Scripting.xhtml" title="This namespace is for all the classes belonging to the Scripting Subsystem.">Scripting</a> Subsystem. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceMezzanine_1_1UI"><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1UI.xhtml">UI</a></td></tr>
<tr class="memdesc:namespaceMezzanine_1_1UI"><td class="mdescLeft">&#160;</td><td class="mdescRight">This namespace is for all the classes belonging to the Graphical User Interface Subsystem. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceMezzanine_1_1XML"><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1XML.xhtml">XML</a></td></tr>
<tr class="memdesc:namespaceMezzanine_1_1XML"><td class="mdescLeft">&#160;</td><td class="mdescRight">All tools for working with <a class="el" href="namespaceMezzanine_1_1XML.xhtml" title="All tools for working with XML are located in this namespace.">XML</a> are located in this namespace. <br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ActorBase.xhtml">ActorBase</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is the base class from which all the actors inherit.  <a href="classMezzanine_1_1ActorBase.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ActorBasePhysicsSettings.xhtml">ActorBasePhysicsSettings</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a base helper class for configuring physics settings of an actor.  <a href="classMezzanine_1_1ActorBasePhysicsSettings.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ActorManager.xhtml">ActorManager</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A manager responsible for the storage and management of all actors that exist in a world.  <a href="classMezzanine_1_1ActorManager.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ActorRigid.xhtml">ActorRigid</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is the actor class for Rigid Objects.  <a href="classMezzanine_1_1ActorRigid.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ActorRigidDeSerializer.xhtml">ActorRigidDeSerializer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This creates Rigid body actors and inserts them into a given <a class="el" href="classMezzanine_1_1ActorManager.xhtml" title="A manager responsible for the storage and management of all actors that exist in a world...">ActorManager</a>.  <a href="classMezzanine_1_1ActorRigidDeSerializer.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ActorRigidPhysicsSettings.xhtml">ActorRigidPhysicsSettings</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a helper class for configuring physics settings of an <a class="el" href="classMezzanine_1_1ActorRigid.xhtml" title="This is the actor class for Rigid Objects.">ActorRigid</a>.  <a href="classMezzanine_1_1ActorRigidPhysicsSettings.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ActorSoft.xhtml">ActorSoft</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is the actor class for Soft Objects.  <a href="classMezzanine_1_1ActorSoft.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ActorSoftPhysicsSettings.xhtml">ActorSoftPhysicsSettings</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a helper class for configuring physics settings of an <a class="el" href="classMezzanine_1_1ActorSoft.xhtml" title="This is the actor class for Soft Objects.">ActorSoft</a>.  <a href="classMezzanine_1_1ActorSoftPhysicsSettings.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ActorUpdateWorkUnit.xhtml">ActorUpdateWorkUnit</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a Mezzanine::Threading::iWorkUnit for the updating of actors.  <a href="classMezzanine_1_1ActorUpdateWorkUnit.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1AlarmTimer.xhtml">AlarmTimer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a timer class that increments normally to a specified time.  <a href="classMezzanine_1_1AlarmTimer.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1AreaEffect.xhtml">AreaEffect</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This class is used to define area's in the world that have unique effects.  <a href="classMezzanine_1_1AreaEffect.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1AreaEffectManager.xhtml">AreaEffectManager</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A manager responsible for the storage and management of all areaeffects in use.  <a href="classMezzanine_1_1AreaEffectManager.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1AreaEffectUpdateWorkUnit.xhtml">AreaEffectUpdateWorkUnit</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a Mezzanine::Threading::iWorkUnit for the updating of AreaEffects.  <a href="classMezzanine_1_1AreaEffectUpdateWorkUnit.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ArithmeticException.xhtml">ArithmeticException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when Math has failed.  <a href="classMezzanine_1_1ArithmeticException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1AttachableBase.xhtml">AttachableBase</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This class is the base class for other attachable classes and is responsible for transform updates to attachables.  <a href="classMezzanine_1_1AttachableBase.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1AttachableChild.xhtml">AttachableChild</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This class is the base class for objects that can be attached to <a class="el" href="classMezzanine_1_1AttachableParent.xhtml" title="Base class for objects that can have attachables attached to them.">AttachableParent</a>.  <a href="classMezzanine_1_1AttachableChild.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1AttachableParent.xhtml">AttachableParent</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Base class for objects that can have attachables attached to them.  <a href="classMezzanine_1_1AttachableParent.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Camera.xhtml">Camera</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is the camera class.  <a href="classMezzanine_1_1Camera.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CameraController.xhtml">CameraController</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a simplified controller class for use with cameras.  <a href="classMezzanine_1_1CameraController.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CameraManager.xhtml">CameraManager</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is the manager class for all camera functions.  <a href="classMezzanine_1_1CameraManager.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ColourValue.xhtml">ColourValue</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a simple class for holding 4 reals representing the colour any give object or lightsource can have.  <a href="classMezzanine_1_1ColourValue.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CountedPtr.xhtml">CountedPtr</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A simple reference counting pointer.  <a href="classMezzanine_1_1CountedPtr.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CountedPtrCastImpl.xhtml">CountedPtrCastImpl</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is used as to determine how a <a class="el" href="classMezzanine_1_1CountedPtr.xhtml" title="A simple reference counting pointer.">CountedPtr</a> performs castin between pointer types internally.  <a href="classMezzanine_1_1CountedPtrCastImpl.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CountedPtrCastImpl_3_01OriginalPointer_00_01OriginalPointer_00_01CastNoneError_01_4.xhtml">CountedPtrCastImpl&lt; OriginalPointer, OriginalPointer, CastNoneError &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An implementation of the CountedPtrCast that always return the pointer passed reached via CastNoneError in the <a class="el" href="classMezzanine_1_1ReferenceCountTraits.xhtml" title="This is used to deduce at compile if a specific class has built-in reference counting or needs an ext...">ReferenceCountTraits</a> of the target class.  <a href="classMezzanine_1_1CountedPtrCastImpl_3_01OriginalPointer_00_01OriginalPointer_00_01CastNoneError_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CountedPtrCastImpl_3_01ReturnPointer_00_01OriginalPointer_00_01CastDynamic_01_4.xhtml">CountedPtrCastImpl&lt; ReturnPointer, OriginalPointer, CastDynamic &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An implementation of the CountedPtrCast that naively dynamic casts the passed pointer. Reached by putting CastDynamic in the <a class="el" href="classMezzanine_1_1ReferenceCountTraits.xhtml" title="This is used to deduce at compile if a specific class has built-in reference counting or needs an ext...">ReferenceCountTraits</a> of the target class.  <a href="classMezzanine_1_1CountedPtrCastImpl_3_01ReturnPointer_00_01OriginalPointer_00_01CastDynamic_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CountedPtrCastImpl_3_01ReturnPointer_00_01OriginalPointer_00_01CastImplicit_01_4.xhtml">CountedPtrCastImpl&lt; ReturnPointer, OriginalPointer, CastImplicit &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An implementation of the CountedPtrCast that casts the passed pointer. Reached by putting CastStatic in the <a class="el" href="classMezzanine_1_1ReferenceCountTraits.xhtml" title="This is used to deduce at compile if a specific class has built-in reference counting or needs an ext...">ReferenceCountTraits</a> of the target class.  <a href="classMezzanine_1_1CountedPtrCastImpl_3_01ReturnPointer_00_01OriginalPointer_00_01CastImplicit_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CountedPtrCastImpl_3_01ReturnPointer_00_01OriginalPointer_00_01CastNoneReturnZero_01_4.xhtml">CountedPtrCastImpl&lt; ReturnPointer, OriginalPointer, CastNoneReturnZero &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An implementation of the CountedPtrCast that always returns 0 cast to the original pointer type. Reached by putting CastNoneReturnZero in the <a class="el" href="classMezzanine_1_1ReferenceCountTraits.xhtml" title="This is used to deduce at compile if a specific class has built-in reference counting or needs an ext...">ReferenceCountTraits</a> of the target class.  <a href="classMezzanine_1_1CountedPtrCastImpl_3_01ReturnPointer_00_01OriginalPointer_00_01CastNoneReturnZero_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CountedPtrCastImpl_3_01ReturnPointer_00_01OriginalPointer_00_01CastStatic_01_4.xhtml">CountedPtrCastImpl&lt; ReturnPointer, OriginalPointer, CastStatic &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An implementation of the CountedPtrCast that naively static casts the passed pointer. Reached by putting CastStatic in the <a class="el" href="classMezzanine_1_1ReferenceCountTraits.xhtml" title="This is used to deduce at compile if a specific class has built-in reference counting or needs an ext...">ReferenceCountTraits</a> of the target class.  <a href="classMezzanine_1_1CountedPtrCastImpl_3_01ReturnPointer_00_01OriginalPointer_00_01CastStatic_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1DefaultActorManagerFactory.xhtml">DefaultActorManagerFactory</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A factory responsible for the creation and destruction of the default actormanager.  <a href="classMezzanine_1_1DefaultActorManagerFactory.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1DefaultAreaEffectManagerFactory.xhtml">DefaultAreaEffectManagerFactory</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A factory responsible for the creation and destruction of the default areaeffectmanager.  <a href="classMezzanine_1_1DefaultAreaEffectManagerFactory.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1DefaultCameraManagerFactory.xhtml">DefaultCameraManagerFactory</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A factory responsible for the creation and destruction of the default cameramanager.  <a href="classMezzanine_1_1DefaultCameraManagerFactory.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1DefaultEventManagerFactory.xhtml">DefaultEventManagerFactory</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A factory responsible for the creation and destruction of the default eventmanager.  <a href="classMezzanine_1_1DefaultEventManagerFactory.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1DefaultMeshManagerFactory.xhtml">DefaultMeshManagerFactory</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A factory responsible for the creation and destruction of the default meshmanager.  <a href="classMezzanine_1_1DefaultMeshManagerFactory.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1DefaultResourceManagerFactory.xhtml">DefaultResourceManagerFactory</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A factory responsible for the creation and destruction of the default resourcemanager.  <a href="classMezzanine_1_1DefaultResourceManagerFactory.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1DefaultSceneManagerFactory.xhtml">DefaultSceneManagerFactory</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A factory responsible for the creation and destruction of the default scenemanager.  <a href="classMezzanine_1_1DefaultSceneManagerFactory.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1DefaultTerrainManagerFactory.xhtml">DefaultTerrainManagerFactory</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A factory responsible for the creation and destruction of the default terrainmanager.  <a href="classMezzanine_1_1DefaultTerrainManagerFactory.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1DeSerializer.xhtml">DeSerializer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A tool for deserializing classes with specific issues deserializing them.  <a href="classMezzanine_1_1DeSerializer.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1DirectoryException.xhtml">DirectoryException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when there is an unknown issue with a file.  <a href="classMezzanine_1_1DirectoryException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1DirectoryNotFoundException.xhtml">DirectoryNotFoundException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when a directory was expected to be there, but was not.  <a href="classMezzanine_1_1DirectoryNotFoundException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1DirectoryPermissionException.xhtml">DirectoryPermissionException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when permission is denied to a directory.  <a href="classMezzanine_1_1DirectoryPermissionException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1DirectoryReadException.xhtml">DirectoryReadException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when a directory could be read and it wasn't a permission issue.  <a href="classMezzanine_1_1DirectoryReadException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1DirectoryWriteException.xhtml">DirectoryWriteException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when a directory could be written to and it wasn't a permission issue.  <a href="classMezzanine_1_1DirectoryWriteException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1EndNodeItem.xhtml">EndNodeItem</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Entity.xhtml">Entity</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This class is useful for representing graphical bodies without a physics representation.  <a href="classMezzanine_1_1Entity.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Entresol.xhtml">Entresol</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is the main entry point for the entire library.  <a href="classMezzanine_1_1Entresol.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1EventBase.xhtml">EventBase</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">The base class for all events.  <a href="classMezzanine_1_1EventBase.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1EventGameWindow.xhtml">EventGameWindow</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convey the message that Something happened to a game window.  <a href="classMezzanine_1_1EventGameWindow.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1EventGameWindowData.xhtml">EventGameWindowData</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">used to keep private in one place that is actually private.  <a href="classMezzanine_1_1EventGameWindowData.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1EventManager.xhtml">EventManager</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a container for Events and facilitates the transfer of data.  <a href="classMezzanine_1_1EventManager.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1EventPumpWorkUnit.xhtml">EventPumpWorkUnit</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Every frame the OS must be queried for changes to the state, this does that querying on behalf of an eventmanager.  <a href="classMezzanine_1_1EventPumpWorkUnit.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1EventQuit.xhtml">EventQuit</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is intended to convey the message that quitting needs to happen.  <a href="classMezzanine_1_1EventQuit.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1EventUserInput.xhtml">EventUserInput</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a container for MetaCodes that is used in the <a class="el" href="classMezzanine_1_1EventManager.xhtml" title="This is a container for Events and facilitates the transfer of data.">EventManager</a>.  <a href="classMezzanine_1_1EventUserInput.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Exception.xhtml">Exception</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is the exception thrown by most <a class="el" href="namespaceMezzanine.xhtml" title="The bulk of the engine components go in this namspace.">Mezzanine</a> system that can throw exceptions.  <a href="classMezzanine_1_1Exception.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory.xhtml">ExceptionFactory</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Template class that serves as the base for exception factories.  <a href="structMezzanine_1_1ExceptionFactory.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01ArithmeticException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; ArithmeticException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1ArithmeticException.xhtml" title="Thrown when Math has failed.">ArithmeticException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01ArithmeticException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01DirectoryException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; DirectoryException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1DirectoryException.xhtml" title="Thrown when there is an unknown issue with a file.">DirectoryException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01DirectoryException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01DirectoryNotFoundException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; DirectoryNotFoundException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1DirectoryNotFoundException.xhtml" title="Thrown when a directory was expected to be there, but was not.">DirectoryNotFoundException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01DirectoryNotFoundException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01DirectoryPermissionException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; DirectoryPermissionException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1DirectoryPermissionException.xhtml" title="Thrown when permission is denied to a directory.">DirectoryPermissionException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01DirectoryPermissionException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01DirectoryReadException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; DirectoryReadException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1DirectoryReadException.xhtml" title="Thrown when a directory could be read and it wasn&#39;t a permission issue.">DirectoryReadException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01DirectoryReadException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01DirectoryWriteException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; DirectoryWriteException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1DirectoryWriteException.xhtml" title="Thrown when a directory could be written to and it wasn&#39;t a permission issue.">DirectoryWriteException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01DirectoryWriteException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01FileException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; FileException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1FileException.xhtml" title="Thrown when there is an unknown issue with a file.">FileException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01FileException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01FileNotFoundException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; FileNotFoundException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1FileNotFoundException.xhtml" title="Thrown when a file was expected to be there, but was not.">FileNotFoundException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01FileNotFoundException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01FilePermissionException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; FilePermissionException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1FilePermissionException.xhtml" title="Thrown when permission was denied to a file.">FilePermissionException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01FilePermissionException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01FileReadException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; FileReadException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1FileReadException.xhtml" title="Thrown when a file could not be read and permissions seem to not be an issue (Filesystem/hardware iss...">FileReadException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01FileReadException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01FileWriteException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; FileWriteException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1FileWriteException.xhtml" title="Thrown when a file could not be written and perimssions seem not to be an issue.">FileWriteException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01FileWriteException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01InstanceIdentityDuplicateException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; InstanceIdentityDuplicateException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1InstanceIdentityDuplicateException.xhtml" title="Thrown when duplicates of teh same identity string exist.">InstanceIdentityDuplicateException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01InstanceIdentityDuplicateException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01InstanceIdentityException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; InstanceIdentityException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1InstanceIdentityException.xhtml" title="Thrown when an unknown error with using an Identifier and it is invalid.">InstanceIdentityException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01InstanceIdentityException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01InstanceIdentityInvalidException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; InstanceIdentityInvalidException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1InstanceIdentityInvalidException.xhtml" title="Thrown when the identity string wasn&#39;t valid at all.">InstanceIdentityInvalidException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01InstanceIdentityInvalidException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01InstanceIdentityNotFoundException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; InstanceIdentityNotFoundException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1InstanceIdentityNotFoundException.xhtml" title="Thrown when the requested identity could not be found.">InstanceIdentityNotFoundException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01InstanceIdentityNotFoundException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01InternalException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; InternalException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1InternalException.xhtml" title="Thrown when an unknown internal error occurred.">InternalException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01InternalException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01InvalidAssignment_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; InvalidAssignment::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1InvalidAssignment.xhtml" title="Then when a complex class is assigned to itself or other invalid assignments occur.">InvalidAssignment</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01InvalidAssignment_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01InvalidStateException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; InvalidStateException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1InvalidStateException.xhtml" title="Thrown when the available information should have worked but failed for unknown reasons.">InvalidStateException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01InvalidStateException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01InvalidVersionException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; InvalidVersionException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1InvalidVersionException.xhtml" title="Thrown when a version is accessed/parsed/required and it cannot work correctly or is missing...">InvalidVersionException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01InvalidVersionException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01IOException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; IOException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1IOException.xhtml" title="Thrown when there was an issue with IO but very little was known about it.">IOException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01IOException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01IOReadException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; IOReadException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1IOReadException.xhtml" title="Thrown when a read is happening but something has prevented the underlying code from knowing what was...">IOReadException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01IOReadException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01IOWriteException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; IOWriteException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1IOWriteException.xhtml" title="Thrown when a write is happening but something has prevented the underlying code from knowing what wa...">IOWriteException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01IOWriteException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01MemoryManagementException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; MemoryManagementException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1MemoryManagementException.xhtml" title="Thrown when an unknown memory management exception occurs.">MemoryManagementException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01MemoryManagementException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01MemoryOutOfBoundsException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; MemoryOutOfBoundsException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1MemoryOutOfBoundsException.xhtml" title="Thrown when attempted to access something that really should note be accessed.">MemoryOutOfBoundsException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01MemoryOutOfBoundsException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01NetworkException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; NetworkException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1NetworkException.xhtml" title="Thrown when something unknown causes network IO to fail.">NetworkException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01NetworkException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01NetworkNotFoundException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; NetworkNotFoundException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1NetworkNotFoundException.xhtml" title="Thrown when no network connection is available.">NetworkNotFoundException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01NetworkNotFoundException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01NetworkPermissionException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; NetworkPermissionException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1NetworkPermissionException.xhtml" title="Thrown when permision was denied to a network interface or network resource.">NetworkPermissionException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01NetworkPermissionException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01NetworkReadException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; NetworkReadException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1NetworkReadException.xhtml" title="Thrown when data could not be read from the network (downloads).">NetworkReadException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01NetworkReadException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01NetworkURLException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; NetworkURLException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1NetworkURLException.xhtml" title="Thrown when an address is invalid or could not be found.">NetworkURLException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01NetworkURLException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01NetworkWriteException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; NetworkWriteException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1NetworkWriteException.xhtml" title="Thrown when data could not be read from the network (iloads).">NetworkWriteException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01NetworkWriteException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01NotImplementedException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; NotImplementedException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1NotImplementedException.xhtml" title="Thrown when we just have not coded a thing yet, but we knew what the API should look like...">NotImplementedException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01NotImplementedException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01OutOfMemoryException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; OutOfMemoryException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1OutOfMemoryException.xhtml" title="Thrown when A memory allocation was attempted and failed.">OutOfMemoryException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01OutOfMemoryException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01ParametersCastException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; ParametersCastException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1ParametersCastException.xhtml" title="Thrown when a pointer parameter is checked at runtime and cannot be cast as expected.">ParametersCastException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01ParametersCastException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01ParametersException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; ParametersException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1ParametersException.xhtml" title="Thrown when parameters are checked at runtime and found invalid.">ParametersException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01ParametersException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01ParametersRangeException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; ParametersRangeException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1ParametersRangeException.xhtml" title="Thrown when a passed parameter is checked at runtime and not in the expected range.">ParametersRangeException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01ParametersRangeException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01RenderingAPIException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; RenderingAPIException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1RenderingAPIException.xhtml" title="Thrown when the graphics card/DirectX/OpenGL fail.">RenderingAPIException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01RenderingAPIException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01RuntimeAssertionException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; RuntimeAssertionException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1RuntimeAssertionException.xhtml" title="Thrown when a rutime assertion could have been thrown.">RuntimeAssertionException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01RuntimeAssertionException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01ScriptException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; ScriptException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1ScriptException.xhtml" title="Thrown when an unknown error happens with a script.">ScriptException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01ScriptException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01ScriptLuaErrErrException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; ScriptLuaErrErrException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1ScriptLuaErrErrException.xhtml" title="Thrown when Lua has an error handling an error.">ScriptLuaErrErrException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01ScriptLuaErrErrException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01ScriptLuaException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; ScriptLuaException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1ScriptLuaException.xhtml" title="Thrown when an unknown error happens in a Lua script.">ScriptLuaException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01ScriptLuaException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01ScriptLuaRuntimeException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; ScriptLuaRuntimeException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1ScriptLuaRuntimeException.xhtml" title="Thrown when a Lua script has a runtime error.">ScriptLuaRuntimeException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01ScriptLuaRuntimeException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01ScriptLuaYieldException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; ScriptLuaYieldException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1ScriptLuaYieldException.xhtml" title="Thrown when Lua returns a yield and it should not have.">ScriptLuaYieldException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01ScriptLuaYieldException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01SyntaxErrorException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; SyntaxErrorException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1SyntaxErrorException.xhtml" title="Thrown when some kind of syntax exception.">SyntaxErrorException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01SyntaxErrorException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01SyntaxErrorLuaException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; SyntaxErrorLuaException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1SyntaxErrorLuaException.xhtml" title="Thrown when lua code in incorrect.">SyntaxErrorLuaException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01SyntaxErrorLuaException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01SyntaxErrorXMLException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; SyntaxErrorXMLException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1SyntaxErrorXMLException.xhtml" title="Thrown when and XML document is being parsed but is invalid.">SyntaxErrorXMLException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01SyntaxErrorXMLException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1ExceptionFactory_3_01SyntaxErrorXPathException_1_1ExceptionCode_01_4.xhtml">ExceptionFactory&lt; SyntaxErrorXPathException::ExceptionCode &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A template metaprogramming construct used to ensure that all required <a class="el" href="classMezzanine_1_1SyntaxErrorXPathException.xhtml" title="Thrown when an XPath query is being parsed but is invalid.">SyntaxErrorXPathException</a> can be created at compile time if the compiler is clever.  <a href="structMezzanine_1_1ExceptionFactory_3_01SyntaxErrorXPathException_1_1ExceptionCode_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ExtendedTimer.xhtml">ExtendedTimer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An enhanced timer class that can store and track many units of time.  <a href="classMezzanine_1_1ExtendedTimer.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1FieldOfForce.xhtml">FieldOfForce</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is field that applies force in a direction, and doesn't tamper with gravity.  <a href="classMezzanine_1_1FieldOfForce.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1FileException.xhtml">FileException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when there is an unknown issue with a file.  <a href="classMezzanine_1_1FileException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1FileNotFoundException.xhtml">FileNotFoundException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when a file was expected to be there, but was not.  <a href="classMezzanine_1_1FileNotFoundException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1FilePermissionException.xhtml">FilePermissionException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when permission was denied to a file.  <a href="classMezzanine_1_1FilePermissionException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1FileReadException.xhtml">FileReadException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when a file could not be read and permissions seem to not be an issue (Filesystem/hardware issue?)  <a href="classMezzanine_1_1FileReadException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1FileWriteException.xhtml">FileWriteException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when a file could not be written and perimssions seem not to be an issue.  <a href="classMezzanine_1_1FileWriteException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1GoalTimer.xhtml">GoalTimer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is the base class for timers intended to run only until they reach a specific goal.  <a href="classMezzanine_1_1GoalTimer.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1GravityField.xhtml">GravityField</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a gravity field implementation of the <a class="el" href="classMezzanine_1_1AreaEffect.xhtml" title="This class is used to define area&#39;s in the world that have unique effects.">AreaEffect</a> class.  <a href="classMezzanine_1_1GravityField.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1GravityWell.xhtml">GravityWell</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a gravity well implementation of the <a class="el" href="classMezzanine_1_1AreaEffect.xhtml" title="This class is used to define area&#39;s in the world that have unique effects.">AreaEffect</a> class.  <a href="classMezzanine_1_1GravityWell.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1InstanceIdentityDuplicateException.xhtml">InstanceIdentityDuplicateException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when duplicates of teh same identity string exist.  <a href="classMezzanine_1_1InstanceIdentityDuplicateException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1InstanceIdentityException.xhtml">InstanceIdentityException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when an unknown error with using an Identifier and it is invalid.  <a href="classMezzanine_1_1InstanceIdentityException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1InstanceIdentityInvalidException.xhtml">InstanceIdentityInvalidException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when the identity string wasn't valid at all.  <a href="classMezzanine_1_1InstanceIdentityInvalidException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1InstanceIdentityNotFoundException.xhtml">InstanceIdentityNotFoundException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when the requested identity could not be found.  <a href="classMezzanine_1_1InstanceIdentityNotFoundException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1InternalException.xhtml">InternalException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when an unknown internal error occurred.  <a href="classMezzanine_1_1InternalException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1IntrusiveRefCount.xhtml">IntrusiveRefCount</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A sample class that implements a minimal intrusive reference counting scheme.  <a href="classMezzanine_1_1IntrusiveRefCount.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1InvalidAssignment.xhtml">InvalidAssignment</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Then when a complex class is assigned to itself or other invalid assignments occur.  <a href="classMezzanine_1_1InvalidAssignment.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1InvalidStateException.xhtml">InvalidStateException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when the available information should have worked but failed for unknown reasons.  <a href="classMezzanine_1_1InvalidStateException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1InvalidVersionException.xhtml">InvalidVersionException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when a version is accessed/parsed/required and it cannot work correctly or is missing.  <a href="classMezzanine_1_1InvalidVersionException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1IOException.xhtml">IOException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when there was an issue with IO but very little was known about it.  <a href="classMezzanine_1_1IOException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1IOReadException.xhtml">IOReadException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when a read is happening but something has prevented the underlying code from knowing what was reading.  <a href="classMezzanine_1_1IOReadException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1IOWriteException.xhtml">IOWriteException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when a write is happening but something has prevented the underlying code from knowing what was writing.  <a href="classMezzanine_1_1IOWriteException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Light.xhtml">Light</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This class is the class used for dynamic lighting within the scene.  <a href="classMezzanine_1_1Light.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1LineGroup.xhtml">LineGroup</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a group of consectutive line segments to be rendered together.  <a href="classMezzanine_1_1LineGroup.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml">ManagerBase</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is the base class from which all the <a class="el" href="classMezzanine_1_1Entresol.xhtml" title="This is the main entry point for the entire library.">Entresol</a> and <a class="el" href="classMezzanine_1_1World.xhtml" title="This class represents a world for objects to interact within.">World</a> Managers inherit.  <a href="classMezzanine_1_1ManagerBase.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerFactory.xhtml">ManagerFactory</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a base class for factories that construct the managers the engine uses.  <a href="classMezzanine_1_1ManagerFactory.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1MathTool.xhtml">MathTool</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This provides a number of generic math related utilities.  <a href="classMezzanine_1_1MathTool.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Matrix3x3.xhtml">Matrix3x3</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a 3x3 Matrix class used for representing rotations and scaling in an object.  <a href="classMezzanine_1_1Matrix3x3.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Matrix4x4.xhtml">Matrix4x4</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1MemoryManagementException.xhtml">MemoryManagementException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when an unknown memory management exception occurs.  <a href="classMezzanine_1_1MemoryManagementException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1MemoryOutOfBoundsException.xhtml">MemoryOutOfBoundsException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when attempted to access something that really should note be accessed.  <a href="classMezzanine_1_1MemoryOutOfBoundsException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1MeshManager.xhtml">MeshManager</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This manager handles the storage, generation, and query of of <a class="el" href="namespaceMezzanine_1_1Graphics.xhtml" title="This namespace is for all the classes belonging to the Graphics Subsystem.">Graphics</a> Meshes.  <a href="classMezzanine_1_1MeshManager.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1MeshTerrain.xhtml">MeshTerrain</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1NetworkException.xhtml">NetworkException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when something unknown causes network IO to fail.  <a href="classMezzanine_1_1NetworkException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1NetworkNotFoundException.xhtml">NetworkNotFoundException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when no network connection is available.  <a href="classMezzanine_1_1NetworkNotFoundException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1NetworkPermissionException.xhtml">NetworkPermissionException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when permision was denied to a network interface or network resource.  <a href="classMezzanine_1_1NetworkPermissionException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1NetworkReadException.xhtml">NetworkReadException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when data could not be read from the network (downloads).  <a href="classMezzanine_1_1NetworkReadException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1NetworkURLException.xhtml">NetworkURLException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when an address is invalid or could not be found.  <a href="classMezzanine_1_1NetworkURLException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1NetworkWriteException.xhtml">NetworkWriteException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when data could not be read from the network (iloads).  <a href="classMezzanine_1_1NetworkWriteException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Node.xhtml">Node</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1NodeItem.xhtml">NodeItem</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1NodeItemPtrCompare.xhtml">NodeItemPtrCompare</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1NonStaticWorldObject.xhtml">NonStaticWorldObject</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a small extention of the <a class="el" href="classMezzanine_1_1WorldObject.xhtml" title="This is the base class from which classes that are insertable into the physical world.">WorldObject</a> class that adds features common to non-static objects.  <a href="classMezzanine_1_1NonStaticWorldObject.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1NonTriggerPhysicsSettings.xhtml">NonTriggerPhysicsSettings</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is an extension of the basic <a class="el" href="classMezzanine_1_1WorldObjectPhysicsSettings.xhtml" title="This is a base helper class for configuring physics settings of a world object.">WorldObjectPhysicsSettings</a> class for non-trigger objects(I.E not AreaEffects).  <a href="classMezzanine_1_1NonTriggerPhysicsSettings.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1NotImplementedException.xhtml">NotImplementedException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when we just have not coded a thing yet, but we knew what the API should look like.  <a href="classMezzanine_1_1NotImplementedException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ObjectPair.xhtml">ObjectPair</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is an interface class for pairs of world objects.  <a href="classMezzanine_1_1ObjectPair.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ObjectSettingFile.xhtml">ObjectSettingFile</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This class represents a file to be saved containing one or more OhjectSettingGroup's.  <a href="classMezzanine_1_1ObjectSettingFile.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ObjectSettingGroup.xhtml">ObjectSettingGroup</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A class that store's a collection of SettingSets that can be applied together.  <a href="classMezzanine_1_1ObjectSettingGroup.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ObjectSettingSet.xhtml">ObjectSettingSet</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A class that store's a named set of settings for an object.  <a href="classMezzanine_1_1ObjectSettingSet.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ObjectSettingSetContainer.xhtml">ObjectSettingSetContainer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A base class for other classes that store <a class="el" href="classMezzanine_1_1ObjectSettingSet.xhtml" title="A class that store&#39;s a named set of settings for an object.">ObjectSettingSet</a>'s.  <a href="classMezzanine_1_1ObjectSettingSetContainer.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ObjectSettingsHandler.xhtml">ObjectSettingsHandler</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An abstract class for other classes that manage groups of settings.  <a href="classMezzanine_1_1ObjectSettingsHandler.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1OutOfMemoryException.xhtml">OutOfMemoryException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when A memory allocation was attempted and failed.  <a href="classMezzanine_1_1OutOfMemoryException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ParametersCastException.xhtml">ParametersCastException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when a pointer parameter is checked at runtime and cannot be cast as expected.  <a href="classMezzanine_1_1ParametersCastException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ParametersException.xhtml">ParametersException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when parameters are checked at runtime and found invalid.  <a href="classMezzanine_1_1ParametersException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ParametersRangeException.xhtml">ParametersRangeException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when a passed parameter is checked at runtime and not in the expected range.  <a href="classMezzanine_1_1ParametersRangeException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ParticleAffector.xhtml">ParticleAffector</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This class defines how particles of a given particle effect behave during their lifetime.  <a href="classMezzanine_1_1ParticleAffector.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ParticleEffect.xhtml">ParticleEffect</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This class is responsible for creating visual particle effects, such as rain, smoke, sparks, and explosions.  <a href="classMezzanine_1_1ParticleEffect.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ParticleEmitter.xhtml">ParticleEmitter</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This class defines how particles of a given particle effect spawn.  <a href="classMezzanine_1_1ParticleEmitter.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Plane.xhtml">Plane</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is used to represent a flat infinite slice of the game world.  <a href="classMezzanine_1_1Plane.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Quaternion.xhtml">Quaternion</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is used to store information about rotation in 3d space.  <a href="classMezzanine_1_1Quaternion.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Ray.xhtml">Ray</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is used to indicate a line with one end.  <a href="classMezzanine_1_1Ray.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1RayQueryTool.xhtml">RayQueryTool</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This provides a number of optional tools for working with a <a class="el" href="classMezzanine_1_1World.xhtml" title="This class represents a world for objects to interact within.">Mezzanine::World</a>.  <a href="classMezzanine_1_1RayQueryTool.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ReferenceCount.xhtml">ReferenceCount</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This exists once per object managed by a group of shared pointer to track items in memory.  <a href="classMezzanine_1_1ReferenceCount.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ReferenceCountTraits.xhtml">ReferenceCountTraits</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is used to deduce at compile if a specific class has built-in reference counting or needs an external reference count.  <a href="classMezzanine_1_1ReferenceCountTraits.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ReferenceCountTraits_3_01IntrusiveRefCount_01_4.xhtml">ReferenceCountTraits&lt; IntrusiveRefCount &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An Example <a class="el" href="classMezzanine_1_1ReferenceCountTraits.xhtml" title="This is used to deduce at compile if a specific class has built-in reference counting or needs an ext...">ReferenceCountTraits</a> implmentation.  <a href="classMezzanine_1_1ReferenceCountTraits_3_01IntrusiveRefCount_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ReferenceCountTraits_3_01Scripting_1_1iScript_01_4.xhtml">ReferenceCountTraits&lt; Scripting::iScript &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Marks IScript for internal reference counting if a <a class="el" href="classMezzanine_1_1CountedPtr.xhtml" title="A simple reference counting pointer.">CountedPtr</a> checks.  <a href="classMezzanine_1_1ReferenceCountTraits_3_01Scripting_1_1iScript_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ReferenceCountTraits_3_01Scripting_1_1iScriptArgument_01_4.xhtml">ReferenceCountTraits&lt; Scripting::iScriptArgument &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Marks iScriptArgument for internal reference counting if a <a class="el" href="classMezzanine_1_1CountedPtr.xhtml" title="A simple reference counting pointer.">CountedPtr</a> checks.  <a href="classMezzanine_1_1ReferenceCountTraits_3_01Scripting_1_1iScriptArgument_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ReferenceCountTraits_3_01Scripting_1_1iScriptCompilable_01_4.xhtml">ReferenceCountTraits&lt; Scripting::iScriptCompilable &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Marks iScriptCompilable for internal reference counting if a <a class="el" href="classMezzanine_1_1CountedPtr.xhtml" title="A simple reference counting pointer.">CountedPtr</a> checks.  <a href="classMezzanine_1_1ReferenceCountTraits_3_01Scripting_1_1iScriptCompilable_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ReferenceCountTraits_3_01Scripting_1_1iScriptMultipleReturn_01_4.xhtml">ReferenceCountTraits&lt; Scripting::iScriptMultipleReturn &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Marks iScriptMultipleReturn for internal reference counting if a <a class="el" href="classMezzanine_1_1CountedPtr.xhtml" title="A simple reference counting pointer.">CountedPtr</a> checks.  <a href="classMezzanine_1_1ReferenceCountTraits_3_01Scripting_1_1iScriptMultipleReturn_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ReferenceCountTraits_3_01Scripting_1_1ScriptArgumentGeneric_3_01Integer_01_4_01_4.xhtml">ReferenceCountTraits&lt; Scripting::ScriptArgumentGeneric&lt; Integer &gt; &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Marks ScriptArgumentGeneric&lt;Integer&gt; for internal reference counting if a <a class="el" href="classMezzanine_1_1CountedPtr.xhtml" title="A simple reference counting pointer.">CountedPtr</a> checks.  <a href="classMezzanine_1_1ReferenceCountTraits_3_01Scripting_1_1ScriptArgumentGeneric_3_01Integer_01_4_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ReferenceCountTraits_3_01Scripting_1_1ScriptArgumentGeneric_3_01Real_01_4_01_4.xhtml">ReferenceCountTraits&lt; Scripting::ScriptArgumentGeneric&lt; Real &gt; &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Marks ScriptArgumentGeneric&lt;Real&gt; for internal reference counting if a <a class="el" href="classMezzanine_1_1CountedPtr.xhtml" title="A simple reference counting pointer.">CountedPtr</a> checks.  <a href="classMezzanine_1_1ReferenceCountTraits_3_01Scripting_1_1ScriptArgumentGeneric_3_01Real_01_4_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ReferenceCountTraits_3_01Scripting_1_1ScriptArgumentGeneric_3_01String_01_4_01_4.xhtml">ReferenceCountTraits&lt; Scripting::ScriptArgumentGeneric&lt; String &gt; &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Marks ScriptArgumentGeneric&lt;String&gt; for internal reference counting if a <a class="el" href="classMezzanine_1_1CountedPtr.xhtml" title="A simple reference counting pointer.">CountedPtr</a> checks.  <a href="classMezzanine_1_1ReferenceCountTraits_3_01Scripting_1_1ScriptArgumentGeneric_3_01String_01_4_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ReferenceCountTraits_3_01Scripting_1_1ScriptArgumentGeneric_3_01Whole_01_4_01_4.xhtml">ReferenceCountTraits&lt; Scripting::ScriptArgumentGeneric&lt; Whole &gt; &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Marks ScriptArgumentGeneric&lt;Whole&gt; for internal reference counting if a <a class="el" href="classMezzanine_1_1CountedPtr.xhtml" title="A simple reference counting pointer.">CountedPtr</a> checks.  <a href="classMezzanine_1_1ReferenceCountTraits_3_01Scripting_1_1ScriptArgumentGeneric_3_01Whole_01_4_01_4.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1RenderingAPIException.xhtml">RenderingAPIException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when the graphics card/DirectX/OpenGL fail.  <a href="classMezzanine_1_1RenderingAPIException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ResourceInputStream.xhtml">ResourceInputStream</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A stream from a file, can read from zip files as well.  <a href="classMezzanine_1_1ResourceInputStream.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ResourceManager.xhtml">ResourceManager</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is the manager responsible for the loading and unloading of files.  <a href="classMezzanine_1_1ResourceManager.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1RuntimeAssertionException.xhtml">RuntimeAssertionException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when a rutime assertion could have been thrown.  <a href="classMezzanine_1_1RuntimeAssertionException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml">SceneManager</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This class contains utilities and functions to allow the manipulation of the Graphical scene, rather then the physics inside, or the object inside.  <a href="classMezzanine_1_1SceneManager.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ScriptException.xhtml">ScriptException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when an unknown error happens with a script.  <a href="classMezzanine_1_1ScriptException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ScriptLuaErrErrException.xhtml">ScriptLuaErrErrException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when Lua has an error handling an error.  <a href="classMezzanine_1_1ScriptLuaErrErrException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ScriptLuaException.xhtml">ScriptLuaException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when an unknown error happens in a Lua script.  <a href="classMezzanine_1_1ScriptLuaException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ScriptLuaRuntimeException.xhtml">ScriptLuaRuntimeException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when a Lua script has a runtime error.  <a href="classMezzanine_1_1ScriptLuaRuntimeException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ScriptLuaYieldException.xhtml">ScriptLuaYieldException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when Lua returns a yield and it should not have.  <a href="classMezzanine_1_1ScriptLuaYieldException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Serializer.xhtml">Serializer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A tool for serializing classes with specific issues serializing.  <a href="classMezzanine_1_1Serializer.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SetItems.xhtml">SetItems</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Container representing each node in the <a class="el" href="classMezzanine_1_1Trie.xhtml" title="Trie main class.">Trie</a>.  <a href="classMezzanine_1_1SetItems.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Singleton.xhtml">Singleton</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a convenient base class intended to be used with classes that need to be singletons.  <a href="classMezzanine_1_1Singleton.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1StickyConstraintConstructionInfo.xhtml">StickyConstraintConstructionInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Simple struct for holding information on how sticky constraints should be constructed.  <a href="structMezzanine_1_1StickyConstraintConstructionInfo.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1StickyData.xhtml">StickyData</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a basic class for storing the data related to the sticky behavior available to actorrigid's.  <a href="structMezzanine_1_1StickyData.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1StopWatchTimer.xhtml">StopWatchTimer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a timer class for counting down to a specified time.  <a href="classMezzanine_1_1StopWatchTimer.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SymbolToIndexMapper.xhtml">SymbolToIndexMapper</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SyntaxErrorException.xhtml">SyntaxErrorException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when some kind of syntax exception.  <a href="classMezzanine_1_1SyntaxErrorException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SyntaxErrorLuaException.xhtml">SyntaxErrorLuaException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when lua code in incorrect.  <a href="classMezzanine_1_1SyntaxErrorLuaException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SyntaxErrorXMLException.xhtml">SyntaxErrorXMLException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when and <a class="el" href="namespaceMezzanine_1_1XML.xhtml" title="All tools for working with XML are located in this namespace.">XML</a> document is being parsed but is invalid.  <a href="classMezzanine_1_1SyntaxErrorXMLException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SyntaxErrorXPathException.xhtml">SyntaxErrorXPathException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown when an XPath query is being parsed but is invalid.  <a href="classMezzanine_1_1SyntaxErrorXPathException.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1TerrainBase.xhtml">TerrainBase</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is the base class from which all the terrains inherit.  <a href="classMezzanine_1_1TerrainBase.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1TerrainManager.xhtml">TerrainManager</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is manager for terrains and their functions.  <a href="classMezzanine_1_1TerrainManager.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1TestAE.xhtml">TestAE</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a dummy class to test if the AE field works. Details will be output to the log.  <a href="classMezzanine_1_1TestAE.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1Time.xhtml">Time</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A container for the metrics of time relevant for the timer class.  <a href="structMezzanine_1_1Time.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Timer.xhtml">Timer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A base timer class for the different timers.  <a href="classMezzanine_1_1Timer.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Track.xhtml">Track</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This class represents a series of points as a line in 3D space.  <a href="classMezzanine_1_1Track.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1TrackingNodeUpdateWorkUnit.xhtml">TrackingNodeUpdateWorkUnit</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a Mezzanine::Threading::iWorkUnit for the updating of tracking world nodes in the world.  <a href="classMezzanine_1_1TrackingNodeUpdateWorkUnit.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Transform.xhtml">Transform</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stores information about relative location and rotation in 3d space.  <a href="classMezzanine_1_1Transform.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1TransformableChildObject.xhtml">TransformableChildObject</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is an interface for all child 3D objects that can have their full transforms manipulated.  <a href="classMezzanine_1_1TransformableChildObject.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1TransformableObject.xhtml">TransformableObject</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is an interface for all 3D objects that can have their full transforms manipulated.  <a href="classMezzanine_1_1TransformableObject.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Trie.xhtml">Trie</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classMezzanine_1_1Trie.xhtml" title="Trie main class.">Trie</a> main class.  <a href="classMezzanine_1_1Trie.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Vector2.xhtml">Vector2</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is used to represent a point on a 2 dimentional area, such as a screen.  <a href="classMezzanine_1_1Vector2.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is used to represent a point in space, or a vector through space.  <a href="classMezzanine_1_1Vector3.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Vector3WActor.xhtml">Vector3WActor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This class is used to store or transfer a position relative to an Actor.  <a href="classMezzanine_1_1Vector3WActor.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1VectorItems.xhtml">VectorItems</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Container representing each node in the <a class="el" href="classMezzanine_1_1Trie.xhtml" title="Trie main class.">Trie</a>.  <a href="classMezzanine_1_1VectorItems.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1WindowSettings.xhtml">WindowSettings</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This stores all the basic configuration options a game window supports.  <a href="structMezzanine_1_1WindowSettings.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1World.xhtml">World</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This class represents a world for objects to interact within.  <a href="classMezzanine_1_1World.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1WorldManager.xhtml">WorldManager</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is the base class for all managers that belong to a single world instance.  <a href="classMezzanine_1_1WorldManager.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1WorldNode.xhtml">WorldNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a helper class which non-physics objects, such as lights, cameras, ribbon trails, and particle effects may be attached to for enhanced effects.  <a href="classMezzanine_1_1WorldNode.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1WorldObject.xhtml">WorldObject</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is the base class from which classes that are insertable into the physical world.  <a href="classMezzanine_1_1WorldObject.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1WorldObjectGraphicsSettings.xhtml">WorldObjectGraphicsSettings</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a helper class for configuring graphics settings of a <a class="el" href="classMezzanine_1_1World.xhtml" title="This class represents a world for objects to interact within.">World</a> Object.  <a href="classMezzanine_1_1WorldObjectGraphicsSettings.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1WorldObjectPhysicsSettings.xhtml">WorldObjectPhysicsSettings</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a base helper class for configuring physics settings of a world object.  <a href="classMezzanine_1_1WorldObjectPhysicsSettings.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1WorldProxy.xhtml">WorldProxy</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is the base class for proxy objects belonging to the various 3D subsystems.  <a href="classMezzanine_1_1WorldProxy.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1WorldTrigger.xhtml">WorldTrigger</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is an abstract class for creating in-game triggers.  <a href="classMezzanine_1_1WorldTrigger.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:a942580f9d14a57c4a192270eb78f7d57"><td class="memItemLeft" align="right" valign="top">typedef bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#a942580f9d14a57c4a192270eb78f7d57">Bool</a></td></tr>
<tr class="memdesc:a942580f9d14a57c4a192270eb78f7d57"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generally acts a single bit, true or false.  <a href="#a942580f9d14a57c4a192270eb78f7d57">More...</a><br/></td></tr>
<tr class="separator:a942580f9d14a57c4a192270eb78f7d57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4f5efed51a1f6fc1799c821c3daf4b7"><td class="memItemLeft" align="right" valign="top">typedef char&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#ab4f5efed51a1f6fc1799c821c3daf4b7">Char8</a></td></tr>
<tr class="memdesc:ab4f5efed51a1f6fc1799c821c3daf4b7"><td class="mdescLeft">&#160;</td><td class="mdescRight">A datatype to represent one character.  <a href="#ab4f5efed51a1f6fc1799c821c3daf4b7">More...</a><br/></td></tr>
<tr class="separator:ab4f5efed51a1f6fc1799c821c3daf4b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae902bf79e3864684cac39532ca874d7d"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ae902bf79e3864684cac39532ca874d7d"></a>
typedef <br class="typebreak"/>
MetaCodeContainer::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><b>ConstMetaCodeIterator</b></td></tr>
<tr class="separator:ae902bf79e3864684cac39532ca874d7d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63cd699ac54b73953f35ec9cfc05e506"><td class="memItemLeft" align="right" valign="top">typedef const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a></td></tr>
<tr class="memdesc:a63cd699ac54b73953f35ec9cfc05e506"><td class="mdescLeft">&#160;</td><td class="mdescRight">A Datatype used to a series of imutable characters.  <a href="#a63cd699ac54b73953f35ec9cfc05e506">More...</a><br/></td></tr>
<tr class="separator:a63cd699ac54b73953f35ec9cfc05e506"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a07cdc0ed7dd61212948bc2fcb2b1c129"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a07cdc0ed7dd61212948bc2fcb2b1c129"></a>
typedef intptr_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#a07cdc0ed7dd61212948bc2fcb2b1c129">ConvertiblePointer</a></td></tr>
<tr class="memdesc:a07cdc0ed7dd61212948bc2fcb2b1c129"><td class="mdescLeft">&#160;</td><td class="mdescRight">A type that any pointer can be converted to and back from, and insures after the conversion back it will be identical. <br/></td></tr>
<tr class="separator:a07cdc0ed7dd61212948bc2fcb2b1c129"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb602bffcbc8f1b381b2f529e9e364f6"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="adb602bffcbc8f1b381b2f529e9e364f6"></a>
typedef int16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#adb602bffcbc8f1b381b2f529e9e364f6">Int16</a></td></tr>
<tr class="memdesc:adb602bffcbc8f1b381b2f529e9e364f6"><td class="mdescLeft">&#160;</td><td class="mdescRight">An 16-bit integer. <br/></td></tr>
<tr class="separator:adb602bffcbc8f1b381b2f529e9e364f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a590a2f3eb4a187e1b25209e546e540e1"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a590a2f3eb4a187e1b25209e546e540e1"></a>
typedef int32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#a590a2f3eb4a187e1b25209e546e540e1">Int32</a></td></tr>
<tr class="memdesc:a590a2f3eb4a187e1b25209e546e540e1"><td class="mdescLeft">&#160;</td><td class="mdescRight">An 32-bit integer. <br/></td></tr>
<tr class="separator:a590a2f3eb4a187e1b25209e546e540e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab203dfc8311caab7cc86ee5a0bf962ed"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ab203dfc8311caab7cc86ee5a0bf962ed"></a>
typedef int64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#ab203dfc8311caab7cc86ee5a0bf962ed">Int64</a></td></tr>
<tr class="memdesc:ab203dfc8311caab7cc86ee5a0bf962ed"><td class="mdescLeft">&#160;</td><td class="mdescRight">An 64-bit integer. <br/></td></tr>
<tr class="separator:ab203dfc8311caab7cc86ee5a0bf962ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acbb048ee99aa07566d5a6eb33f5a2c2d"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="acbb048ee99aa07566d5a6eb33f5a2c2d"></a>
typedef int8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#acbb048ee99aa07566d5a6eb33f5a2c2d">Int8</a></td></tr>
<tr class="memdesc:acbb048ee99aa07566d5a6eb33f5a2c2d"><td class="mdescLeft">&#160;</td><td class="mdescRight">An 8-bit integer. <br/></td></tr>
<tr class="separator:acbb048ee99aa07566d5a6eb33f5a2c2d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac3576e52af3c62d13dde94829e0c5465"><td class="memItemLeft" align="right" valign="top">typedef int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#ac3576e52af3c62d13dde94829e0c5465">Integer</a></td></tr>
<tr class="memdesc:ac3576e52af3c62d13dde94829e0c5465"><td class="mdescLeft">&#160;</td><td class="mdescRight">A datatype used to represent any integer close to.  <a href="#ac3576e52af3c62d13dde94829e0c5465">More...</a><br/></td></tr>
<tr class="separator:ac3576e52af3c62d13dde94829e0c5465"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0e305210456ef0132dc20c06aa292dd"><td class="memItemLeft" align="right" valign="top">typedef std::stringstream&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#ac0e305210456ef0132dc20c06aa292dd">Logger</a></td></tr>
<tr class="memdesc:ac0e305210456ef0132dc20c06aa292dd"><td class="mdescLeft">&#160;</td><td class="mdescRight">In case we ever replace the stringstream with another class, this will allow us to swap it out.  <a href="#ac0e305210456ef0132dc20c06aa292dd">More...</a><br/></td></tr>
<tr class="separator:ac0e305210456ef0132dc20c06aa292dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7ab1b85229be184e16d96c505143f9b"><td class="memItemLeft" align="right" valign="top">typedef long long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#ad7ab1b85229be184e16d96c505143f9b">MaxInt</a></td></tr>
<tr class="memdesc:ad7ab1b85229be184e16d96c505143f9b"><td class="mdescLeft">&#160;</td><td class="mdescRight">A large integer type suitable for compile time math and long term microsecond time keeping.  <a href="#ad7ab1b85229be184e16d96c505143f9b">More...</a><br/></td></tr>
<tr class="separator:ad7ab1b85229be184e16d96c505143f9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4dc93a10c9a838de5ed1bf250141d473"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a4dc93a10c9a838de5ed1bf250141d473"></a>
typedef std::vector<br class="typebreak"/>
&lt; <a class="el" href="classMezzanine_1_1Input_1_1MetaCode.xhtml">Input::MetaCode</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>MetaCodeContainer</b></td></tr>
<tr class="separator:a4dc93a10c9a838de5ed1bf250141d473"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0dc003b7b4c92ffa30f2cc8b4fdaf7e8"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a0dc003b7b4c92ffa30f2cc8b4fdaf7e8"></a>
typedef MetaCodeContainer::iterator&#160;</td><td class="memItemRight" valign="bottom"><b>MetaCodeIterator</b></td></tr>
<tr class="separator:a0dc003b7b4c92ffa30f2cc8b4fdaf7e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d2262d71676053580c263a6a19dd3a2"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a1d2262d71676053580c263a6a19dd3a2"></a>
typedef std::pair&lt; <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a>, <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#a1d2262d71676053580c263a6a19dd3a2">NameValuePair</a></td></tr>
<tr class="memdesc:a1d2262d71676053580c263a6a19dd3a2"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a pair for the generic storage of a value and it's associated name. <br/></td></tr>
<tr class="separator:a1d2262d71676053580c263a6a19dd3a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac9f30d4ba179aab9013e0c8fbf55bd28"><td class="memItemLeft" align="right" valign="top">typedef std::list&lt; <a class="el" href="namespaceMezzanine.xhtml#a1d2262d71676053580c263a6a19dd3a2">NameValuePair</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#ac9f30d4ba179aab9013e0c8fbf55bd28">NameValuePairList</a></td></tr>
<tr class="memdesc:ac9f30d4ba179aab9013e0c8fbf55bd28"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a datatype mostly used for describing settings or parameters that can't be declared in advance.  <a href="#ac9f30d4ba179aab9013e0c8fbf55bd28">More...</a><br/></td></tr>
<tr class="separator:ac9f30d4ba179aab9013e0c8fbf55bd28"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a171daeff3f8f6577a810baf6bb746626"><td class="memItemLeft" align="right" valign="top">typedef std::map&lt; <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a>, <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#a171daeff3f8f6577a810baf6bb746626">NameValuePairMap</a></td></tr>
<tr class="memdesc:a171daeff3f8f6577a810baf6bb746626"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a datatype mostly used for describing settings or parameters that can't be declared in advance.  <a href="#a171daeff3f8f6577a810baf6bb746626">More...</a><br/></td></tr>
<tr class="separator:a171daeff3f8f6577a810baf6bb746626"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8d4c0ab783af89a250b0225b75753e5"><td class="memItemLeft" align="right" valign="top">typedef SDL_Event&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#ae8d4c0ab783af89a250b0225b75753e5">RawEvent</a></td></tr>
<tr class="memdesc:ae8d4c0ab783af89a250b0225b75753e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is an internal datatype use to communicate with the User input Subsystem.  <a href="#ae8d4c0ab783af89a250b0225b75753e5">More...</a><br/></td></tr>
<tr class="separator:ae8d4c0ab783af89a250b0225b75753e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a726731b1a7df72bf3583e4a97282c6f6"><td class="memItemLeft" align="right" valign="top">typedef float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a></td></tr>
<tr class="memdesc:a726731b1a7df72bf3583e4a97282c6f6"><td class="mdescLeft">&#160;</td><td class="mdescRight">A Datatype used to represent a real floating point number.  <a href="#a726731b1a7df72bf3583e4a97282c6f6">More...</a><br/></td></tr>
<tr class="separator:a726731b1a7df72bf3583e4a97282c6f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac29bbb8cf80a5fe4cfced68bfe448046"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ac29bbb8cf80a5fe4cfced68bfe448046"></a>
typedef <br class="typebreak"/>
<a class="el" href="classMezzanine_1_1Physics_1_1Generic6DofConstraint.xhtml">Physics::Generic6DofConstraint</a>&#160;</td><td class="memItemRight" valign="bottom"><b>StickyConstraint</b></td></tr>
<tr class="separator:ac29bbb8cf80a5fe4cfced68bfe448046"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf9fcc130e6ebf08e3d8491aebcf1c86"><td class="memItemLeft" align="right" valign="top">typedef std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a></td></tr>
<tr class="memdesc:acf9fcc130e6ebf08e3d8491aebcf1c86"><td class="mdescLeft">&#160;</td><td class="mdescRight">A datatype used to a series of characters.  <a href="#acf9fcc130e6ebf08e3d8491aebcf1c86">More...</a><br/></td></tr>
<tr class="separator:acf9fcc130e6ebf08e3d8491aebcf1c86"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1055975ce37fe9d65089bb2db3d2952b"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a1055975ce37fe9d65089bb2db3d2952b"></a>
typedef std::set&lt; <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#a1055975ce37fe9d65089bb2db3d2952b">StringSet</a></td></tr>
<tr class="memdesc:a1055975ce37fe9d65089bb2db3d2952b"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a simple datatype for a set container of strings. <br/></td></tr>
<tr class="separator:a1055975ce37fe9d65089bb2db3d2952b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae5375d2a6e7c5ee59a4459fd735042ac"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ae5375d2a6e7c5ee59a4459fd735042ac"></a>
typedef std::stringstream&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#ae5375d2a6e7c5ee59a4459fd735042ac">StringStream</a></td></tr>
<tr class="memdesc:ae5375d2a6e7c5ee59a4459fd735042ac"><td class="mdescLeft">&#160;</td><td class="mdescRight">A Datatype used for streaming operations with strings. <br/></td></tr>
<tr class="separator:ae5375d2a6e7c5ee59a4459fd735042ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b3665ebc21b3444e1d7858d460475f6"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a9b3665ebc21b3444e1d7858d460475f6"></a>
typedef std::vector&lt; <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#a9b3665ebc21b3444e1d7858d460475f6">StringVector</a></td></tr>
<tr class="memdesc:a9b3665ebc21b3444e1d7858d460475f6"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a simple datatype for a vector container of strings. <br/></td></tr>
<tr class="separator:a9b3665ebc21b3444e1d7858d460475f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ad5bd2c880d4bbb29d1487ca0102c22"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="namespaceMezzanine.xhtml#abea3b8e8e9b03d2547b2800284ba682d">UInt32</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#a1ad5bd2c880d4bbb29d1487ca0102c22">TimeMarker</a></td></tr>
<tr class="memdesc:a1ad5bd2c880d4bbb29d1487ca0102c22"><td class="mdescLeft">&#160;</td><td class="mdescRight">A datatype used to indicate a specific point in time, or a timestamp.  <a href="#a1ad5bd2c880d4bbb29d1487ca0102c22">More...</a><br/></td></tr>
<tr class="separator:a1ad5bd2c880d4bbb29d1487ca0102c22"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b6c09063432c7ddd87011c88306c767"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a1b6c09063432c7ddd87011c88306c767"></a>
typedef uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#a1b6c09063432c7ddd87011c88306c767">UInt16</a></td></tr>
<tr class="memdesc:a1b6c09063432c7ddd87011c88306c767"><td class="mdescLeft">&#160;</td><td class="mdescRight">An 16-bit unsigned integer. <br/></td></tr>
<tr class="separator:a1b6c09063432c7ddd87011c88306c767"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abea3b8e8e9b03d2547b2800284ba682d"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="abea3b8e8e9b03d2547b2800284ba682d"></a>
typedef uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#abea3b8e8e9b03d2547b2800284ba682d">UInt32</a></td></tr>
<tr class="memdesc:abea3b8e8e9b03d2547b2800284ba682d"><td class="mdescLeft">&#160;</td><td class="mdescRight">An 32-bit unsigned integer. <br/></td></tr>
<tr class="separator:abea3b8e8e9b03d2547b2800284ba682d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac690bcdbbe92a684875c5e8b16a33097"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ac690bcdbbe92a684875c5e8b16a33097"></a>
typedef uint64_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#ac690bcdbbe92a684875c5e8b16a33097">UInt64</a></td></tr>
<tr class="memdesc:ac690bcdbbe92a684875c5e8b16a33097"><td class="mdescLeft">&#160;</td><td class="mdescRight">An 64-bit unsigned integer. <br/></td></tr>
<tr class="separator:ac690bcdbbe92a684875c5e8b16a33097"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5f38583d9025e05fa33d6e32e97b457"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aa5f38583d9025e05fa33d6e32e97b457"></a>
typedef uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#aa5f38583d9025e05fa33d6e32e97b457">UInt8</a></td></tr>
<tr class="memdesc:aa5f38583d9025e05fa33d6e32e97b457"><td class="mdescLeft">&#160;</td><td class="mdescRight">An 8-bit unsigned integer. <br/></td></tr>
<tr class="separator:aa5f38583d9025e05fa33d6e32e97b457"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adcbb6ce6d1eb4379d109e51171e2e493"><td class="memItemLeft" align="right" valign="top">typedef unsigned long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a></td></tr>
<tr class="memdesc:adcbb6ce6d1eb4379d109e51171e2e493"><td class="mdescLeft">&#160;</td><td class="mdescRight">Whole is an unsigned integer, it will be at least 32bits in size.  <a href="#adcbb6ce6d1eb4379d109e51171e2e493">More...</a><br/></td></tr>
<tr class="separator:adcbb6ce6d1eb4379d109e51171e2e493"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08b3adb0d2632e4f6a454fdf3cf5efda"><td class="memItemLeft" align="right" valign="top">typedef std::wstring&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#a08b3adb0d2632e4f6a454fdf3cf5efda">WideString</a></td></tr>
<tr class="memdesc:a08b3adb0d2632e4f6a454fdf3cf5efda"><td class="mdescLeft">&#160;</td><td class="mdescRight">A wide version of the String typedef.  <a href="#a08b3adb0d2632e4f6a454fdf3cf5efda">More...</a><br/></td></tr>
<tr class="separator:a08b3adb0d2632e4f6a454fdf3cf5efda"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:a25d7f893350196fa99e164f78df3538b"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#a25d7f893350196fa99e164f78df3538b">ArchiveType</a> { <a class="el" href="namespaceMezzanine.xhtml#a25d7f893350196fa99e164f78df3538bae0f6ba7e60a408f888d1c616ca20e266">AT_FileSystem</a> = 0, 
<a class="el" href="namespaceMezzanine.xhtml#a25d7f893350196fa99e164f78df3538ba862f05e0ae2e48bb4a0ef951fd5a7cba">AT_Zip</a> = 1, 
<a class="el" href="namespaceMezzanine.xhtml#a25d7f893350196fa99e164f78df3538ba5e0cba92dbb56959caf59ddea6b1184f">AT_Invalid</a> = 32768
 }</td></tr>
<tr class="memdesc:a25d7f893350196fa99e164f78df3538b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Used to indicate what kind of resources the Entrosol should look for.  <a href="namespaceMezzanine.xhtml#a25d7f893350196fa99e164f78df3538b">More...</a><br/></td></tr>
<tr class="separator:a25d7f893350196fa99e164f78df3538b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d10a79e11a2031df10af540eede12fa"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#a2d10a79e11a2031df10af540eede12fa">AttenuationStyle</a> { <a class="el" href="namespaceMezzanine.xhtml#a2d10a79e11a2031df10af540eede12faa548ff9c1d108b12ea6323d39c41856f5">Att_None</a>, 
<a class="el" href="namespaceMezzanine.xhtml#a2d10a79e11a2031df10af540eede12faaaecc4b0547a61e5b2abd5401182c9470">Att_Linear</a>, 
<a class="el" href="namespaceMezzanine.xhtml#a2d10a79e11a2031df10af540eede12faa7f0c2854461a843af7eb21c036375e83">Att_Quadratic</a>
 }</td></tr>
<tr class="memdesc:a2d10a79e11a2031df10af540eede12fa"><td class="mdescLeft">&#160;</td><td class="mdescRight">These values represent the kind of attenuation applied to the field strength over a distance.  <a href="namespaceMezzanine.xhtml#a2d10a79e11a2031df10af540eede12fa">More...</a><br/></td></tr>
<tr class="separator:a2d10a79e11a2031df10af540eede12fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad937b4d169586b963a9545c39fe66739"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#ad937b4d169586b963a9545c39fe66739">CountedPointerCastingState</a> { <br/>
&#160;&#160;<a class="el" href="namespaceMezzanine.xhtml#ad937b4d169586b963a9545c39fe66739a80b6e8497f1239b63fb0bac739f5618f">CastNoneError</a> = -2, 
<a class="el" href="namespaceMezzanine.xhtml#ad937b4d169586b963a9545c39fe66739ae348e547d2f989d5704dca631120c733">CastNoneReturnZero</a> = -1, 
<a class="el" href="namespaceMezzanine.xhtml#ad937b4d169586b963a9545c39fe66739ae59dfba69bca041768bad858c2d34151">CastImplicit</a> = 1, 
<a class="el" href="namespaceMezzanine.xhtml#ad937b4d169586b963a9545c39fe66739a823a0503378eda9a9d1a1916a4d1e881">CastStatic</a> = 2, 
<br/>
&#160;&#160;<a class="el" href="namespaceMezzanine.xhtml#ad937b4d169586b963a9545c39fe66739ab052c77358611ba65ad3a013cb430867">CastDynamic</a> = 3
<br/>
 }</td></tr>
<tr class="memdesc:ad937b4d169586b963a9545c39fe66739"><td class="mdescLeft">&#160;</td><td class="mdescRight">CountedPointer casting implementation states.  <a href="namespaceMezzanine.xhtml#ad937b4d169586b963a9545c39fe66739">More...</a><br/></td></tr>
<tr class="separator:ad937b4d169586b963a9545c39fe66739"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8892173bd6aaf7d0e34a07b2b30aad33"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#a8892173bd6aaf7d0e34a07b2b30aad33">OrientationMode</a> { <br/>
&#160;&#160;<b>OM_Degree_0</b> = 0, 
<b>OM_Degree_90</b> = 1, 
<b>OM_Degree_180</b> = 2, 
<b>OM_Degree_270</b> = 3, 
<br/>
&#160;&#160;<b>OM_Portrait</b> = OM_Degree_0, 
<b>OM_LandscapeRight</b> = OM_Degree_90, 
<b>OM_LandscapeLeft</b> = OM_Degree_270
<br/>
 }</td></tr>
<tr class="memdesc:a8892173bd6aaf7d0e34a07b2b30aad33"><td class="mdescLeft">&#160;</td><td class="mdescRight">Simple enum for communicating the orientation the UI and Camera have relative to the world it is rendering.  <a href="namespaceMezzanine.xhtml#a8892173bd6aaf7d0e34a07b2b30aad33">More...</a><br/></td></tr>
<tr class="separator:a8892173bd6aaf7d0e34a07b2b30aad33"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84bd521b90ded70d55bbc6ae3ec9723f"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#a84bd521b90ded70d55bbc6ae3ec9723f">PauseLevel</a> { <br/>
&#160;&#160;<b>PL_Unpaused</b> = 0, 
<b>PL_PausePhysics</b> = 1, 
<b>PL_PauseParticles</b> = 2, 
<b>PL_PauseAnimations</b> = 4, 
<br/>
&#160;&#160;<b>PL_PauseAll</b> = PL_PausePhysics | PL_PauseParticles | PL_PauseAnimations
<br/>
 }</td></tr>
<tr class="memdesc:a84bd521b90ded70d55bbc6ae3ec9723f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Used by the world class to describe the extent of pausing a world. <br/></td></tr>
<tr class="separator:a84bd521b90ded70d55bbc6ae3ec9723f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab41a00a8c6a47b576dc987ec34e16ba1"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#ab41a00a8c6a47b576dc987ec34e16ba1">StandardAxis</a> { <a class="el" href="namespaceMezzanine.xhtml#ab41a00a8c6a47b576dc987ec34e16ba1aa96a3c4582e394fe76d3288fdfee9107">Axis_Invalid</a> = -1, 
<a class="el" href="namespaceMezzanine.xhtml#ab41a00a8c6a47b576dc987ec34e16ba1a823c8f182393aef96f017c7279d49126">Axis_X</a> = 0, 
<a class="el" href="namespaceMezzanine.xhtml#ab41a00a8c6a47b576dc987ec34e16ba1a935c7afe0104697553cf85e9214fb3fb">Axis_Y</a> = 1, 
<a class="el" href="namespaceMezzanine.xhtml#ab41a00a8c6a47b576dc987ec34e16ba1a6af6621383cc7da1fe11a86ba6de37c0">Axis_Z</a> = 2
 }</td></tr>
<tr class="memdesc:ab41a00a8c6a47b576dc987ec34e16ba1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Used to identify different Axis in a 3d coordinate system.  <a href="namespaceMezzanine.xhtml#ab41a00a8c6a47b576dc987ec34e16ba1">More...</a><br/></td></tr>
<tr class="separator:ab41a00a8c6a47b576dc987ec34e16ba1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a027bc22606ddd5097339a5c07f9564a8"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#a027bc22606ddd5097339a5c07f9564a8">TrackType</a> { <b>TT_Simple</b> = 1, 
<b>TT_Spline</b> = 2, 
<b>TT_Bezier</b> = 3
 }</td></tr>
<tr class="memdesc:a027bc22606ddd5097339a5c07f9564a8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Used by Track classes to define the type of curves the track has. <br/></td></tr>
<tr class="separator:a027bc22606ddd5097339a5c07f9564a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad81c74de3529f1e643bd145173924ed3"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#ad81c74de3529f1e643bd145173924ed3">TransformSpace</a> { <a class="el" href="namespaceMezzanine.xhtml#ad81c74de3529f1e643bd145173924ed3aa1986039b3e4c80c8564c8916e68e61c">TS_Local</a> = 0, 
<a class="el" href="namespaceMezzanine.xhtml#ad81c74de3529f1e643bd145173924ed3a352c41c07844c77508ce36b43a30b553">TS_Parent</a> = 1, 
<a class="el" href="namespaceMezzanine.xhtml#ad81c74de3529f1e643bd145173924ed3aeb8fde3835a59be182f10353d961882d">TS_World</a> = 2
 }</td></tr>
<tr class="memdesc:ad81c74de3529f1e643bd145173924ed3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Used to define what frame of reference is to be used when positioning or rotating objects.  <a href="namespaceMezzanine.xhtml#ad81c74de3529f1e643bd145173924ed3">More...</a><br/></td></tr>
<tr class="separator:ad81c74de3529f1e643bd145173924ed3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8cd04f706f4998be62f454b7119c718"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#ae8cd04f706f4998be62f454b7119c718">WorldAndSceneObjectType</a> { <br/>
&#160;&#160;<b>WSO_ActorFirst</b> = 1, 
<b>WSO_ActorRigid</b> = 1, 
<b>WSO_ActorSoft</b> = 2, 
<b>WSO_ActorCharacter</b> = 4, 
<br/>
&#160;&#160;<b>WSO_ActorUnknown</b> = 8, 
<b>WSO_ActorLast</b> = 8, 
<b>WSO_TerrainFirst</b> = 16, 
<b>WSO_MeshTerrain</b> = 16, 
<br/>
&#160;&#160;<b>WSO_HeightfieldTerrain</b> = 32, 
<b>WSO_VectorFieldTerrain</b> = 64, 
<b>WSO_VoxelTerrain</b> = 128, 
<b>WSO_MarchingCubeTerrain</b> = 256, 
<br/>
&#160;&#160;<b>WSO_UnknownTerrain</b> = 512, 
<b>WSO_TerrainLast</b> = 512, 
<b>WSO_AEFirst</b> = 1024, 
<b>WSO_AEGravityField</b> = 1024, 
<br/>
&#160;&#160;<b>WSO_AEGravityWell</b> = 2048, 
<b>WSO_AEFieldOfForce</b> = 4069, 
<b>WSO_AEPlaceHolder1</b> = 8192, 
<b>WSO_AEPlaceHolder2</b> = 16384, 
<br/>
&#160;&#160;<b>WSO_AEUnknown</b> = 32768, 
<b>WSO_AELast</b> = 32768, 
<b>WSO_Camera</b> = 65536, 
<b>WSO_Entity</b> = 131072, 
<br/>
&#160;&#160;<b>WSO_Light</b> = 262144, 
<b>WSO_ParticleEffect</b> = 524288, 
<b>WSO_WorldNode</b> = 1048576
<br/>
 }</td></tr>
<tr class="memdesc:ae8cd04f706f4998be62f454b7119c718"><td class="mdescLeft">&#160;</td><td class="mdescRight">Used by various classes to help identify what class an object is.  <a href="namespaceMezzanine.xhtml#ae8cd04f706f4998be62f454b7119c718">More...</a><br/></td></tr>
<tr class="separator:ae8cd04f706f4998be62f454b7119c718"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a36fefd8e3d822274f02c7633b0ef5072"><td class="memTemplParams" colspan="2">template&lt;typename To , typename From &gt; </td></tr>
<tr class="memitem:a36fefd8e3d822274f02c7633b0ef5072"><td class="memTemplItemLeft" align="right" valign="top">To&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#a36fefd8e3d822274f02c7633b0ef5072">ConvertTo</a> (const From &amp;Datum)</td></tr>
<tr class="memdesc:a36fefd8e3d822274f02c7633b0ef5072"><td class="mdescLeft">&#160;</td><td class="mdescRight">Catch all Lexigraphical Conversion.  <a href="#a36fefd8e3d822274f02c7633b0ef5072">More...</a><br/></td></tr>
<tr class="separator:a36fefd8e3d822274f02c7633b0ef5072"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4224173a1ac42674b1ff813d72a1666"><td class="memTemplParams" colspan="2">template&lt;typename ReturnType , typename OtherPointerTargetType &gt; </td></tr>
<tr class="memitem:ab4224173a1ac42674b1ff813d72a1666"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1CountedPtr.xhtml">CountedPtr</a>&lt; ReturnType &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#ab4224173a1ac42674b1ff813d72a1666">CountedPtrCast</a> (<a class="el" href="classMezzanine_1_1CountedPtr.xhtml">CountedPtr</a>&lt; OtherPointerTargetType &gt; &amp;Original)</td></tr>
<tr class="memdesc:ab4224173a1ac42674b1ff813d72a1666"><td class="mdescLeft">&#160;</td><td class="mdescRight">A compile time cast that uses only the implicit conversion of the underlying raw pointers.  <a href="#ab4224173a1ac42674b1ff813d72a1666">More...</a><br/></td></tr>
<tr class="separator:ab4224173a1ac42674b1ff813d72a1666"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d26cc4afa9fedd9c998091d2d960784"><td class="memTemplParams" colspan="2">template&lt;typename ReturnType , typename OtherPointerTargetType &gt; </td></tr>
<tr class="memitem:a5d26cc4afa9fedd9c998091d2d960784"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1CountedPtr.xhtml">CountedPtr</a>&lt; ReturnType &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#a5d26cc4afa9fedd9c998091d2d960784">CountedPtrDynamicCast</a> (<a class="el" href="classMezzanine_1_1CountedPtr.xhtml">CountedPtr</a>&lt; OtherPointerTargetType &gt; &amp;Original)</td></tr>
<tr class="memdesc:a5d26cc4afa9fedd9c998091d2d960784"><td class="mdescLeft">&#160;</td><td class="mdescRight">A Runtime cast that uses dynamic casting conversion of the underlying raw pointers but only works on internally reference count types.  <a href="#a5d26cc4afa9fedd9c998091d2d960784">More...</a><br/></td></tr>
<tr class="separator:a5d26cc4afa9fedd9c998091d2d960784"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4900c81f1a95d2da5d6309936b57b663"><td class="memTemplParams" colspan="2">template&lt;typename Pointer &gt; </td></tr>
<tr class="memitem:a4900c81f1a95d2da5d6309936b57b663"><td class="memTemplItemLeft" align="right" valign="top">Pointer *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#a4900c81f1a95d2da5d6309936b57b663">CountedPtrInternalCast</a> (Pointer *Original)</td></tr>
<tr class="memdesc:a4900c81f1a95d2da5d6309936b57b663"><td class="mdescLeft">&#160;</td><td class="mdescRight">Used internally by CounterPtr to abstract away casts in the case where the return type would match the input type.  <a href="#a4900c81f1a95d2da5d6309936b57b663">More...</a><br/></td></tr>
<tr class="separator:a4900c81f1a95d2da5d6309936b57b663"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a81cb2e3c87ff45317e47ac082e60ad32"><td class="memTemplParams" colspan="2">template&lt;typename ReturnPointer , typename OriginalPointer &gt; </td></tr>
<tr class="memitem:a81cb2e3c87ff45317e47ac082e60ad32"><td class="memTemplItemLeft" align="right" valign="top">ReturnPointer *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#a81cb2e3c87ff45317e47ac082e60ad32">CountedPtrInternalCast</a> (const OriginalPointer *Original)</td></tr>
<tr class="memdesc:a81cb2e3c87ff45317e47ac082e60ad32"><td class="mdescLeft">&#160;</td><td class="mdescRight">Used internally by CounterPtr to abstract away casts in the case where the return type would <em>NOT</em> match the input type.  <a href="#a81cb2e3c87ff45317e47ac082e60ad32">More...</a><br/></td></tr>
<tr class="separator:a81cb2e3c87ff45317e47ac082e60ad32"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abca8f4d958804ca1c77b3d7cd41b2108"><td class="memTemplParams" colspan="2">template&lt;typename ReturnType , typename OtherPointerTargetType &gt; </td></tr>
<tr class="memitem:abca8f4d958804ca1c77b3d7cd41b2108"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1CountedPtr.xhtml">CountedPtr</a>&lt; ReturnType &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#abca8f4d958804ca1c77b3d7cd41b2108">CountedPtrStaticCast</a> (<a class="el" href="classMezzanine_1_1CountedPtr.xhtml">CountedPtr</a>&lt; OtherPointerTargetType &gt; &amp;Original)</td></tr>
<tr class="memdesc:abca8f4d958804ca1c77b3d7cd41b2108"><td class="mdescLeft">&#160;</td><td class="mdescRight">A compile time cast that uses static casting conversion of the underlying raw pointers but only works on internally reference count types.  <a href="#abca8f4d958804ca1c77b3d7cd41b2108">More...</a><br/></td></tr>
<tr class="separator:abca8f4d958804ca1c77b3d7cd41b2108"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8989ea81ccd1ad6d59a11921f0239a4"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:ad8989ea81ccd1ad6d59a11921f0239a4"><td class="memTemplItemLeft" align="right" valign="top">std::istream &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#ad8989ea81ccd1ad6d59a11921f0239a4">DeSerialize</a> (std::istream &amp;Stream, T &amp;Converted)</td></tr>
<tr class="memdesc:ad8989ea81ccd1ad6d59a11921f0239a4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Deserialize the next xml tag in the stream into a specific in memory class instance.  <a href="#ad8989ea81ccd1ad6d59a11921f0239a4">More...</a><br/></td></tr>
<tr class="separator:ad8989ea81ccd1ad6d59a11921f0239a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec75a8a3369287cb02f331c62b32df73"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#aec75a8a3369287cb02f331c62b32df73">DeSerializeError</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;FailedTo, const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;ClassName, bool SOrD=false)</td></tr>
<tr class="memdesc:aec75a8a3369287cb02f331c62b32df73"><td class="mdescLeft">&#160;</td><td class="mdescRight">Simply does some string concatenation, then throws an <a class="el" href="classMezzanine_1_1Exception.xhtml" title="This is the exception thrown by most Mezzanine system that can throw exceptions.">Exception</a>.  <a href="#aec75a8a3369287cb02f331c62b32df73">More...</a><br/></td></tr>
<tr class="separator:aec75a8a3369287cb02f331c62b32df73"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f11f2ef7129480d902dc4995c3c8633"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a2f11f2ef7129480d902dc4995c3c8633"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>PrintHello</b> ()</td></tr>
<tr class="separator:a2f11f2ef7129480d902dc4995c3c8633"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9015c5e668e14b857a27888c56934148"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:a9015c5e668e14b857a27888c56934148"><td class="memTemplItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#a9015c5e668e14b857a27888c56934148">Serialize</a> (std::ostream &amp;Stream, const T &amp;Converted, const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Indent=<a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a>(&quot;&quot;))</td></tr>
<tr class="memdesc:a9015c5e668e14b857a27888c56934148"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert any class that supports serialization or has a serializer to a string of chars in a stream.  <a href="#a9015c5e668e14b857a27888c56934148">More...</a><br/></td></tr>
<tr class="separator:a9015c5e668e14b857a27888c56934148"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab061665515c8e8a8b09ee54d93612da1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#ab061665515c8e8a8b09ee54d93612da1">SerializeError</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;FailedTo, const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;ClassName, bool SOrD=true)</td></tr>
<tr class="memdesc:ab061665515c8e8a8b09ee54d93612da1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Simply does some string concatenation, then throws an <a class="el" href="classMezzanine_1_1Exception.xhtml" title="This is the exception thrown by most Mezzanine system that can throw exceptions.">Exception</a>.  <a href="#ab061665515c8e8a8b09ee54d93612da1">More...</a><br/></td></tr>
<tr class="separator:ab061665515c8e8a8b09ee54d93612da1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a519df380398999cb532245118b9cb6a2"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:a519df380398999cb532245118b9cb6a2"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#a519df380398999cb532245118b9cb6a2">SloppyProtoSerialize</a> (const T &amp;Converted, <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml">XML::Node</a> &amp;CurrentRoot)</td></tr>
<tr class="memdesc:a519df380398999cb532245118b9cb6a2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Used to interface with a previous version of the serialization code.  <a href="#a519df380398999cb532245118b9cb6a2">More...</a><br/></td></tr>
<tr class="separator:a519df380398999cb532245118b9cb6a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a66fcabfab5bb18e6a5455b19bf5d6e22"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:a66fcabfab5bb18e6a5455b19bf5d6e22"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="namespaceMezzanine.xhtml#a942580f9d14a57c4a192270eb78f7d57">Bool</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#a66fcabfab5bb18e6a5455b19bf5d6e22">ToBool</a> (const T &amp;Datum)</td></tr>
<tr class="memdesc:a66fcabfab5bb18e6a5455b19bf5d6e22"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts whatever to a Bool as long as the proper streaming operators are available for it.  <a href="#a66fcabfab5bb18e6a5455b19bf5d6e22">More...</a><br/></td></tr>
<tr class="separator:a66fcabfab5bb18e6a5455b19bf5d6e22"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e76f45ddaf80d540c5672f08a665ed4"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:a4e76f45ddaf80d540c5672f08a665ed4"><td class="memTemplItemLeft" align="right" valign="top">double&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#a4e76f45ddaf80d540c5672f08a665ed4">Todouble</a> (const T &amp;Datum)</td></tr>
<tr class="memdesc:a4e76f45ddaf80d540c5672f08a665ed4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts whatever to a double as long as the proper streaming operators are available for it.  <a href="#a4e76f45ddaf80d540c5672f08a665ed4">More...</a><br/></td></tr>
<tr class="separator:a4e76f45ddaf80d540c5672f08a665ed4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a64a8e48486b9fb3caa8454cda5ab3049"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:a64a8e48486b9fb3caa8454cda5ab3049"><td class="memTemplItemLeft" align="right" valign="top">float&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#a64a8e48486b9fb3caa8454cda5ab3049">Tofloat</a> (const T &amp;Datum)</td></tr>
<tr class="memdesc:a64a8e48486b9fb3caa8454cda5ab3049"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts whatever to a float as long as the proper streaming operators are available for it.  <a href="#a64a8e48486b9fb3caa8454cda5ab3049">More...</a><br/></td></tr>
<tr class="separator:a64a8e48486b9fb3caa8454cda5ab3049"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99ca5eae5b40d789f4ca7ddd3501a1f0"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:a99ca5eae5b40d789f4ca7ddd3501a1f0"><td class="memTemplItemLeft" align="right" valign="top">int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#a99ca5eae5b40d789f4ca7ddd3501a1f0">Toint</a> (const T &amp;Datum)</td></tr>
<tr class="memdesc:a99ca5eae5b40d789f4ca7ddd3501a1f0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts whatever to an int as long as the proper streaming operators are available for it.  <a href="#a99ca5eae5b40d789f4ca7ddd3501a1f0">More...</a><br/></td></tr>
<tr class="separator:a99ca5eae5b40d789f4ca7ddd3501a1f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e13864ce278eef7ac4cdae9db669cc9"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:a2e13864ce278eef7ac4cdae9db669cc9"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="namespaceMezzanine.xhtml#ac3576e52af3c62d13dde94829e0c5465">Integer</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#a2e13864ce278eef7ac4cdae9db669cc9">ToInteger</a> (const T &amp;Datum)</td></tr>
<tr class="memdesc:a2e13864ce278eef7ac4cdae9db669cc9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts whatever to an Integer as long as the proper streaming operators are available for it.  <a href="#a2e13864ce278eef7ac4cdae9db669cc9">More...</a><br/></td></tr>
<tr class="separator:a2e13864ce278eef7ac4cdae9db669cc9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b9d460e8d3b2403eb27647018283969"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:a4b9d460e8d3b2403eb27647018283969"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#a4b9d460e8d3b2403eb27647018283969">ToReal</a> (const T &amp;Datum)</td></tr>
<tr class="memdesc:a4b9d460e8d3b2403eb27647018283969"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts whatever to a Real as long as the proper streaming operators are available for it.  <a href="#a4b9d460e8d3b2403eb27647018283969">More...</a><br/></td></tr>
<tr class="separator:a4b9d460e8d3b2403eb27647018283969"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8a13d6e385b9d270cbf37377b97e8a9"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:ae8a13d6e385b9d270cbf37377b97e8a9"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#ae8a13d6e385b9d270cbf37377b97e8a9">ToString</a> (const T &amp;Datum)</td></tr>
<tr class="memdesc:ae8a13d6e385b9d270cbf37377b97e8a9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts whatever to a String as long as a streaming operator is available for it.  <a href="#ae8a13d6e385b9d270cbf37377b97e8a9">More...</a><br/></td></tr>
<tr class="separator:ae8a13d6e385b9d270cbf37377b97e8a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af589d9aee6cc9ed07c0dcc85b3495a13"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:af589d9aee6cc9ed07c0dcc85b3495a13"><td class="memTemplItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#af589d9aee6cc9ed07c0dcc85b3495a13">Tounsignedint</a> (const T &amp;Datum)</td></tr>
<tr class="memdesc:af589d9aee6cc9ed07c0dcc85b3495a13"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts whatever to an unsigned int as long as the proper streaming operators are available for it.  <a href="#af589d9aee6cc9ed07c0dcc85b3495a13">More...</a><br/></td></tr>
<tr class="separator:af589d9aee6cc9ed07c0dcc85b3495a13"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad558d586f0c8b6a9b8eee3e43010619d"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:ad558d586f0c8b6a9b8eee3e43010619d"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml#ad558d586f0c8b6a9b8eee3e43010619d">ToWhole</a> (const T &amp;Datum)</td></tr>
<tr class="memdesc:ad558d586f0c8b6a9b8eee3e43010619d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts whatever to a Whole as long as the proper streaming operators are available for it.  <a href="#ad558d586f0c8b6a9b8eee3e43010619d">More...</a><br/></td></tr>
<tr class="separator:ad558d586f0c8b6a9b8eee3e43010619d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>The bulk of the engine components go in this namspace. </p>
<p>This is where imporant classes like <a class="el" href="classMezzanine_1_1World.xhtml" title="This class represents a world for objects to interact within.">World</a>, GraphicsManager, and The eventmanager reside. For more detailed usage information please refer to individual class documentation or the <a class="el" href="index.xhtml">Mezzanine</a> main page.</p>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000070">Todo:</a></b></dt><dd>This exists because somewhere in our chain of includes we have "winnt.h" (on windows) defining "KEY_EXECUTE", which causes the compile to fail at the line declaring "KEY_EXECUTE". I am reasonably certain this only exists when &lt;Ogre.h&gt; is included above this file in the include chain. </dd></dl>
</div><h2 class="groupheader">Typedef Documentation</h2>
<a class="anchor" id="a942580f9d14a57c4a192270eb78f7d57"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine.xhtml#a942580f9d14a57c4a192270eb78f7d57">Mezzanine::Bool</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Generally acts a single bit, true or false. </p>
<p>Normally just a bool, but on some platform alignment matters more than size, so this could be as large as one cpu word in size. </p>

<p>Definition at line <a class="el" href="datatypes_8h_source.xhtml#l00178">178</a> of file <a class="el" href="datatypes_8h_source.xhtml">datatypes.h</a>.</p>

</div>
</div>
<a class="anchor" id="ab4f5efed51a1f6fc1799c821c3daf4b7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine.xhtml#ab4f5efed51a1f6fc1799c821c3daf4b7">Mezzanine::Char8</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A datatype to represent one character. </p>
<p>This should be a char if String is an std::string. </p>

<p>Definition at line <a class="el" href="datatypes_8h_source.xhtml#l00173">173</a> of file <a class="el" href="datatypes_8h_source.xhtml">datatypes.h</a>.</p>

</div>
</div>
<a class="anchor" id="a63cd699ac54b73953f35ec9cfc05e506"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">Mezzanine::ConstString</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A Datatype used to a series of imutable characters. </p>
<p>This is a typedef to const String, but could change. </p>

<p>Definition at line <a class="el" href="datatypes_8h_source.xhtml#l00168">168</a> of file <a class="el" href="datatypes_8h_source.xhtml">datatypes.h</a>.</p>

</div>
</div>
<a class="anchor" id="ac3576e52af3c62d13dde94829e0c5465"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine.xhtml#ac3576e52af3c62d13dde94829e0c5465">Mezzanine::Integer</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A datatype used to represent any integer close to. </p>
<p>This is a typedef to int, but could int16 or smaller to improve performance in some situtations, In general it will be the most efficient signed type for math. </p>

<p>Definition at line <a class="el" href="datatypes_8h_source.xhtml#l00152">152</a> of file <a class="el" href="datatypes_8h_source.xhtml">datatypes.h</a>.</p>

</div>
</div>
<a class="anchor" id="ac0e305210456ef0132dc20c06aa292dd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::stringstream <a class="el" href="namespaceMezzanine.xhtml#ac0e305210456ef0132dc20c06aa292dd">Mezzanine::Logger</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>In case we ever replace the stringstream with another class, this will allow us to swap it out. </p>
<p>This will always support &lt;&lt;, str() but may lose support for formatting functions like std::hex. </p>

<p>Definition at line <a class="el" href="datatypes_8h_source.xhtml#l00186">186</a> of file <a class="el" href="datatypes_8h_source.xhtml">datatypes.h</a>.</p>

</div>
</div>
<a class="anchor" id="ad7ab1b85229be184e16d96c505143f9b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef long long <a class="el" href="namespaceMezzanine.xhtml#ad7ab1b85229be184e16d96c505143f9b">Mezzanine::MaxInt</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A large integer type suitable for compile time math and long term microsecond time keeping. </p>
<p>For reference when this is a 64 bit integer, it can store a number between −9,223,372,036,854,775,808 and 9,223,372,036,854,775,807. In seconds that is approximately 292,277,000,000 years and the universe is only 14,600,000,000 years old. So this is good for any time between 20x the age of the universe before and after the beginning of any chosen epoch. Even if used to track nanoseconds it should be good for 292 years. </p>

<p>Definition at line <a class="el" href="datatypes_8h_source.xhtml#l00196">196</a> of file <a class="el" href="datatypes_8h_source.xhtml">datatypes.h</a>.</p>

</div>
</div>
<a class="anchor" id="ac9f30d4ba179aab9013e0c8fbf55bd28"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine.xhtml#ac9f30d4ba179aab9013e0c8fbf55bd28">Mezzanine::NameValuePairList</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This is a datatype mostly used for describing settings or parameters that can't be declared in advance. </p>
<p>This datatype uses the std::list container for it's storage. </p>

<p>Definition at line <a class="el" href="datatypes_8h_source.xhtml#l00216">216</a> of file <a class="el" href="datatypes_8h_source.xhtml">datatypes.h</a>.</p>

</div>
</div>
<a class="anchor" id="a171daeff3f8f6577a810baf6bb746626"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine.xhtml#a171daeff3f8f6577a810baf6bb746626">Mezzanine::NameValuePairMap</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This is a datatype mostly used for describing settings or parameters that can't be declared in advance. </p>
<p>This datatype uses the std::map container for it's storage. </p>

<p>Definition at line <a class="el" href="datatypes_8h_source.xhtml#l00221">221</a> of file <a class="el" href="datatypes_8h_source.xhtml">datatypes.h</a>.</p>

</div>
</div>
<a class="anchor" id="ae8d4c0ab783af89a250b0225b75753e5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine.xhtml#ae8d4c0ab783af89a250b0225b75753e5">Mezzanine::RawEvent</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This is an internal datatype use to communicate with the User input Subsystem. </p>
<p>This is a typedef to SDL_Event. See the SDL Documentation for more details. </p>

<p>Definition at line <a class="el" href="datatypes_8h_source.xhtml#l00235">235</a> of file <a class="el" href="datatypes_8h_source.xhtml">datatypes.h</a>.</p>

</div>
</div>
<a class="anchor" id="a726731b1a7df72bf3583e4a97282c6f6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Mezzanine::Real</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A Datatype used to represent a real floating point number. </p>
<p>This Datatype is currently a typedef to a float, This is to match our compilations of <a class="el" href="namespaceOgre.xhtml">Ogre</a> (rendering subsystem ogre::Real), and Bullet (physics subsystem, btScalar). With a recompilation of all the subsystems and this there is no theoretical reason why this could not be changed to a double, or even something more extreme like a GMP datatype. Most likely this switch would require atleast some troubleshooting. </p>

<p>Definition at line <a class="el" href="datatypes_8h_source.xhtml#l00141">141</a> of file <a class="el" href="datatypes_8h_source.xhtml">datatypes.h</a>.</p>

</div>
</div>
<a class="anchor" id="acf9fcc130e6ebf08e3d8491aebcf1c86"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">Mezzanine::String</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A datatype used to a series of characters. </p>
<p>This is a typedef to std::string, but could change particularly if UTF16 or UTF32 support is desired. If this is changed, The Character typedef should be adjusted accordingly. </p>

<p>Definition at line <a class="el" href="datatypes_8h_source.xhtml#l00158">158</a> of file <a class="el" href="datatypes_8h_source.xhtml">datatypes.h</a>.</p>

</div>
</div>
<a class="anchor" id="a1ad5bd2c880d4bbb29d1487ca0102c22"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine.xhtml#a1ad5bd2c880d4bbb29d1487ca0102c22">Mezzanine::TimeMarker</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A datatype used to indicate a specific point in time, or a timestamp. </p>
<p>This is made into it's own datatype in case we want to tweak the possible size for a timestamp. </p>

<p>Definition at line <a class="el" href="datatypes_8h_source.xhtml#l00203">203</a> of file <a class="el" href="datatypes_8h_source.xhtml">datatypes.h</a>.</p>

</div>
</div>
<a class="anchor" id="adcbb6ce6d1eb4379d109e51171e2e493"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Mezzanine::Whole</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Whole is an unsigned integer, it will be at least 32bits in size. </p>
<p>This is a typedef to unsigned Long. but could be smaller in some situations. In general it will be the most efficient unsigned type for math. </p>

<p>Definition at line <a class="el" href="datatypes_8h_source.xhtml#l00147">147</a> of file <a class="el" href="datatypes_8h_source.xhtml">datatypes.h</a>.</p>

</div>
</div>
<a class="anchor" id="a08b3adb0d2632e4f6a454fdf3cf5efda"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine.xhtml#a08b3adb0d2632e4f6a454fdf3cf5efda">Mezzanine::WideString</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A wide version of the String typedef. </p>
<p>Wide strings are seldom used, but often come in handy when dealing with Unicode strings. </p>

<p>Definition at line <a class="el" href="datatypes_8h_source.xhtml#l00163">163</a> of file <a class="el" href="datatypes_8h_source.xhtml">datatypes.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a class="anchor" id="a25d7f893350196fa99e164f78df3538b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespaceMezzanine.xhtml#a25d7f893350196fa99e164f78df3538b">Mezzanine::ArchiveType</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Used to indicate what kind of resources the Entrosol should look for. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><em><a class="anchor" id="a25d7f893350196fa99e164f78df3538bae0f6ba7e60a408f888d1c616ca20e266"></a>AT_FileSystem</em>&nbsp;</td><td class="fielddoc">
<p>Look for raw files. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a25d7f893350196fa99e164f78df3538ba862f05e0ae2e48bb4a0ef951fd5a7cba"></a>AT_Zip</em>&nbsp;</td><td class="fielddoc">
<p>Look for stuff in zip files even if the extension is not '.zip'. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a25d7f893350196fa99e164f78df3538ba5e0cba92dbb56959caf59ddea6b1184f"></a>AT_Invalid</em>&nbsp;</td><td class="fielddoc">
<p>Indicates this valid was messed up unrecoverably, most likely by a bug. </p>
</td></tr>
</table>

<p>Definition at line <a class="el" href="enumerations_8h_source.xhtml#l00053">53</a> of file <a class="el" href="enumerations_8h_source.xhtml">enumerations.h</a>.</p>

</div>
</div>
<a class="anchor" id="a2d10a79e11a2031df10af540eede12fa"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespaceMezzanine.xhtml#a2d10a79e11a2031df10af540eede12fa">Mezzanine::AttenuationStyle</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>These values represent the kind of attenuation applied to the field strength over a distance. </p>
<p>None is the default, where the force is constant in all area's of the field. Linear is where the force applied drops by the attenuation value times the distance (strength - (attenuation amount * distance to AE center)). Quadratic is where the force applied drops by the attenuation value times the distance squared (strength - (attenuation amount * distance to AE center * distance to AE center)). </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><em><a class="anchor" id="a2d10a79e11a2031df10af540eede12faa548ff9c1d108b12ea6323d39c41856f5"></a>Att_None</em>&nbsp;</td><td class="fielddoc">
<p>No Attentuation, Equal strength through. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a2d10a79e11a2031df10af540eede12faaaecc4b0547a61e5b2abd5401182c9470"></a>Att_Linear</em>&nbsp;</td><td class="fielddoc">
<p>Linear attentuation, Strength weaker farther from center. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="a2d10a79e11a2031df10af540eede12faa7f0c2854461a843af7eb21c036375e83"></a>Att_Quadratic</em>&nbsp;</td><td class="fielddoc">
<p>Quadratic/Exponential Attentuation, similar to real gravity, it tapers of more the further from the center you get. </p>
</td></tr>
</table>

<p>Definition at line <a class="el" href="enumerations_8h_source.xhtml#l00068">68</a> of file <a class="el" href="enumerations_8h_source.xhtml">enumerations.h</a>.</p>

</div>
</div>
<a class="anchor" id="ad937b4d169586b963a9545c39fe66739"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespaceMezzanine.xhtml#ad937b4d169586b963a9545c39fe66739">Mezzanine::CountedPointerCastingState</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>CountedPointer casting implementation states. </p>
<p>The CountedPtrCast uses some template metaprogramming to include the correct cast at compile time in the <a class="el" href="classMezzanine_1_1CountedPtr.xhtml" title="A simple reference counting pointer.">CountedPtr</a>. In some situations it is difficult to cast from one kind of pointer to another even when it is conceptually sound to do so. For example, when virtual inheritance is used downcasting can be difficult even when a pointer was just returned from one member of an object into another member of that object but from a member function whose interface specified a more base return type. While possible to work around this normally, imagine the same situation if some of the types involved were templates. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><em><a class="anchor" id="ad937b4d169586b963a9545c39fe66739a80b6e8497f1239b63fb0bac739f5618f"></a>CastNoneError</em>&nbsp;</td><td class="fielddoc">
<p>No Casting, any cast attempt results in a compilation Error. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="ad937b4d169586b963a9545c39fe66739ae348e547d2f989d5704dca631120c733"></a>CastNoneReturnZero</em>&nbsp;</td><td class="fielddoc">
<p>No Casting, 0 is returned. Useful when types are unknown and dynamic casts are already used and checked. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="ad937b4d169586b963a9545c39fe66739ae59dfba69bca041768bad858c2d34151"></a>CastImplicit</em>&nbsp;</td><td class="fielddoc">
<p>Does no casting, but keeps types distinct. This should allow implicit casts to more base types, and disallow casts to derived types. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="ad937b4d169586b963a9545c39fe66739a823a0503378eda9a9d1a1916a4d1e881"></a>CastStatic</em>&nbsp;</td><td class="fielddoc">
<p>A static cast from the pointer as provided with no attempt to calls functions on the pointer target, this is default for externally reference counted pointers. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="ad937b4d169586b963a9545c39fe66739ab052c77358611ba65ad3a013cb430867"></a>CastDynamic</em>&nbsp;</td><td class="fielddoc">
<p>A dynamic cast from the pointer as provided with no attempt to calls functions on the pointer target, this is default for externally reference counted pointers. </p>
</td></tr>
</table>

<p>Definition at line <a class="el" href="smartptr_8h_source.xhtml#l00060">60</a> of file <a class="el" href="smartptr_8h_source.xhtml">smartptr.h</a>.</p>

</div>
</div>
<a class="anchor" id="a8892173bd6aaf7d0e34a07b2b30aad33"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespaceMezzanine.xhtml#a8892173bd6aaf7d0e34a07b2b30aad33">Mezzanine::OrientationMode</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Simple enum for communicating the orientation the <a class="el" href="namespaceMezzanine_1_1UI.xhtml" title="This namespace is for all the classes belonging to the Graphical User Interface Subsystem.">UI</a> and <a class="el" href="classMezzanine_1_1Camera.xhtml" title="This is the camera class.">Camera</a> have relative to the world it is rendering. </p>
<p>This enum is used by the <a class="el" href="namespaceMezzanine_1_1UI.xhtml" title="This namespace is for all the classes belonging to the Graphical User Interface Subsystem.">UI</a> and graphics sub-systems for when a change in orientation is detected. Under normal circumstances this kind of thing should only occur in mobile devices such as SmartPhones and Tablets. However this can be forced on other devices/platforms. </p>

<p>Definition at line <a class="el" href="enumerations_8h_source.xhtml#l00079">79</a> of file <a class="el" href="enumerations_8h_source.xhtml">enumerations.h</a>.</p>

</div>
</div>
<a class="anchor" id="ab41a00a8c6a47b576dc987ec34e16ba1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespaceMezzanine.xhtml#ab41a00a8c6a47b576dc987ec34e16ba1">Mezzanine::StandardAxis</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Used to identify different Axis in a 3d coordinate system. </p>
<dl class="section note"><dt>Note</dt><dd>These are compatible with the linear Axis on many constraints, but not the rotational axis. </dd></dl>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><em><a class="anchor" id="ab41a00a8c6a47b576dc987ec34e16ba1aa96a3c4582e394fe76d3288fdfee9107"></a>Axis_Invalid</em>&nbsp;</td><td class="fielddoc">
<p>Not an axis, Don't pass this into functions or operator[] functions, it is intended as a. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="ab41a00a8c6a47b576dc987ec34e16ba1a823c8f182393aef96f017c7279d49126"></a>Axis_X</em>&nbsp;</td><td class="fielddoc">
<p>X axis. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="ab41a00a8c6a47b576dc987ec34e16ba1a935c7afe0104697553cf85e9214fb3fb"></a>Axis_Y</em>&nbsp;</td><td class="fielddoc">
<p>Y axis. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="ab41a00a8c6a47b576dc987ec34e16ba1a6af6621383cc7da1fe11a86ba6de37c0"></a>Axis_Z</em>&nbsp;</td><td class="fielddoc">
<p>Z axis. </p>
</td></tr>
</table>

<p>Definition at line <a class="el" href="enumerations_8h_source.xhtml#l00107">107</a> of file <a class="el" href="enumerations_8h_source.xhtml">enumerations.h</a>.</p>

</div>
</div>
<a class="anchor" id="ad81c74de3529f1e643bd145173924ed3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespaceMezzanine.xhtml#ad81c74de3529f1e643bd145173924ed3">Mezzanine::TransformSpace</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Used to define what frame of reference is to be used when positioning or rotating objects. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><em><a class="anchor" id="ad81c74de3529f1e643bd145173924ed3aa1986039b3e4c80c8564c8916e68e61c"></a>TS_Local</em>&nbsp;</td><td class="fielddoc">
<p>Local space, aka the object in questions world position is used as origin. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="ad81c74de3529f1e643bd145173924ed3a352c41c07844c77508ce36b43a30b553"></a>TS_Parent</em>&nbsp;</td><td class="fielddoc">
<p>Mostly reserved for rotations, means a rotation to occur around the parent instead of self. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="ad81c74de3529f1e643bd145173924ed3aeb8fde3835a59be182f10353d961882d"></a>TS_World</em>&nbsp;</td><td class="fielddoc">
<p><a class="el" href="classMezzanine_1_1World.xhtml" title="This class represents a world for objects to interact within.">World</a> space. </p>
</td></tr>
</table>

<p>Definition at line <a class="el" href="enumerations_8h_source.xhtml#l00126">126</a> of file <a class="el" href="enumerations_8h_source.xhtml">enumerations.h</a>.</p>

</div>
</div>
<a class="anchor" id="ae8cd04f706f4998be62f454b7119c718"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespaceMezzanine.xhtml#ae8cd04f706f4998be62f454b7119c718">Mezzanine::WorldAndSceneObjectType</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Used by various classes to help identify what class an object is. </p>
<p>This enum can be used to express any object which could be considered "insertable" into the game world. </p>

<p>Definition at line <a class="el" href="enumerations_8h_source.xhtml#l00136">136</a> of file <a class="el" href="enumerations_8h_source.xhtml">enumerations.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="a36fefd8e3d822274f02c7633b0ef5072"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename To , typename From &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">To Mezzanine::ConvertTo </td>
          <td>(</td>
          <td class="paramtype">const From &amp;&#160;</td>
          <td class="paramname"><em>Datum</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Catch all Lexigraphical Conversion. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Datum</td><td>A value of any type that will be converted. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The value as if 'read' into the target type. </dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000009">Todo:</a></b></dt><dd>Overload ConvertTo for ToString Conversions. </dd></dl>

<p>Definition at line <a class="el" href="datatypes_8h_source.xhtml#l00246">246</a> of file <a class="el" href="datatypes_8h_source.xhtml">datatypes.h</a>.</p>

</div>
</div>
<a class="anchor" id="ab4224173a1ac42674b1ff813d72a1666"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ReturnType , typename OtherPointerTargetType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1CountedPtr.xhtml">CountedPtr</a>&lt; ReturnType &gt; Mezzanine::CountedPtrCast </td>
          <td>(</td>
          <td class="paramtype">CountedPtr&lt; OtherPointerTargetType &gt; &amp;&#160;</td>
          <td class="paramname"><em>Original</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A compile time cast that uses only the implicit conversion of the underlying raw pointers. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ReturnType</td><td>The type to be returned, must be specified </td></tr>
    <tr><td class="paramname">OtherPointerTargetType</td><td>The type of the provided pointer, this can be infered and should not be provided. </td></tr>
    <tr><td class="paramname">Original</td><td>The pointer to convert. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Either a pointer of the desired or a compilation error </dd></dl>

<p>Definition at line <a class="el" href="smartptr_8h_source.xhtml#l00652">652</a> of file <a class="el" href="smartptr_8h_source.xhtml">smartptr.h</a>.</p>

</div>
</div>
<a class="anchor" id="a5d26cc4afa9fedd9c998091d2d960784"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ReturnType , typename OtherPointerTargetType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1CountedPtr.xhtml">CountedPtr</a>&lt; ReturnType &gt; Mezzanine::CountedPtrDynamicCast </td>
          <td>(</td>
          <td class="paramtype">CountedPtr&lt; OtherPointerTargetType &gt; &amp;&#160;</td>
          <td class="paramname"><em>Original</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A Runtime cast that uses dynamic casting conversion of the underlying raw pointers but only works on internally reference count types. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ReturnType</td><td>The type to be returned, must be specified </td></tr>
    <tr><td class="paramname">OtherPointerTargetType</td><td>The type of the provided pointer, this can be infered and should not be provided. </td></tr>
    <tr><td class="paramname">Original</td><td>The pointer to convert. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Either a pointer of the desired or a 0 if casting is not possible. </dd></dl>

<p>Definition at line <a class="el" href="smartptr_8h_source.xhtml#l00670">670</a> of file <a class="el" href="smartptr_8h_source.xhtml">smartptr.h</a>.</p>

</div>
</div>
<a class="anchor" id="a4900c81f1a95d2da5d6309936b57b663"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Pointer &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">Pointer * Mezzanine::CountedPtrInternalCast </td>
          <td>(</td>
          <td class="paramtype">Pointer *&#160;</td>
          <td class="paramname"><em>Original</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Used internally by CounterPtr to abstract away casts in the case where the return type would match the input type. </p>
<p>This enforces the logic that cast should only be performed inside the <a class="el" href="classMezzanine_1_1CountedPtr.xhtml" title="A simple reference counting pointer.">CountedPtr</a> when a cast is required. This also has the advantage of not performing meaningless extra casts if a runtime cast is used, so it coudl enhance performance. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Pointer</td><td>The only type of pointers involved. </td></tr>
    <tr><td class="paramname">Original</td><td>The pointer that needs to be checked to see if it should be cast and this compilation case does not require it. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The value passed in Original. </dd></dl>

<p>Definition at line <a class="el" href="smartptr_8h_source.xhtml#l00643">643</a> of file <a class="el" href="smartptr_8h_source.xhtml">smartptr.h</a>.</p>

</div>
</div>
<a class="anchor" id="a81cb2e3c87ff45317e47ac082e60ad32"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ReturnPointer , typename OriginalPointer &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">ReturnPointer * Mezzanine::CountedPtrInternalCast </td>
          <td>(</td>
          <td class="paramtype">const OriginalPointer *&#160;</td>
          <td class="paramname"><em>Original</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Used internally by CounterPtr to abstract away casts in the case where the return type would <em>NOT</em> match the input type. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ReturnPointer</td><td>The type of the pointer to target after using the Casting Strategy described in the classes <a class="el" href="classMezzanine_1_1ReferenceCountTraits.xhtml" title="This is used to deduce at compile if a specific class has built-in reference counting or needs an ext...">ReferenceCountTraits</a>. </td></tr>
    <tr><td class="paramname">OriginalPointer</td><td>The type of the pointer prior to casting. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd>The function argument Original is of type const OriginalPointer. When search for possible matching functions an template a compiler prioritizes functions that are off by just a CV qualifier ahead of those that it would need to implicitly cast to call. So if the to pointer types match exactly this will not be called. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Original</td><td>The Pointer to cast which must be exactly of the type OriginalPointer(Which might be inferable). </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A pointer of the type ReturnPointer after the desired casting strategy has been used. </dd></dl>

<p>Definition at line <a class="el" href="smartptr_8h_source.xhtml#l00620">620</a> of file <a class="el" href="smartptr_8h_source.xhtml">smartptr.h</a>.</p>

</div>
</div>
<a class="anchor" id="abca8f4d958804ca1c77b3d7cd41b2108"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ReturnType , typename OtherPointerTargetType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1CountedPtr.xhtml">CountedPtr</a>&lt; ReturnType &gt; Mezzanine::CountedPtrStaticCast </td>
          <td>(</td>
          <td class="paramtype">CountedPtr&lt; OtherPointerTargetType &gt; &amp;&#160;</td>
          <td class="paramname"><em>Original</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A compile time cast that uses static casting conversion of the underlying raw pointers but only works on internally reference count types. </p>
<p>Static casting can access internals also.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ReturnType</td><td>The type to be returned, must be specified </td></tr>
    <tr><td class="paramname">OtherPointerTargetType</td><td>The type of the provided pointer, this can be infered and should not be provided. </td></tr>
    <tr><td class="paramname">Original</td><td>The pointer to convert. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Either a pointer of the desired or a compilation error </dd></dl>

<p>Definition at line <a class="el" href="smartptr_8h_source.xhtml#l00661">661</a> of file <a class="el" href="smartptr_8h_source.xhtml">smartptr.h</a>.</p>

</div>
</div>
<a class="anchor" id="ad8989ea81ccd1ad6d59a11921f0239a4"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::istream&amp; Mezzanine::DeSerialize </td>
          <td>(</td>
          <td class="paramtype">std::istream &amp;&#160;</td>
          <td class="paramname"><em>Stream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T &amp;&#160;</td>
          <td class="paramname"><em>Converted</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Deserialize the next xml tag in the stream into a specific in memory class instance. </p>
<p>"void ProtoDeSerialize(const XML::Node&amp;)" and "static String SerializableName() const" must be implemented on the class instance that is passed in for this to work </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Stream</td><td>The istream to extract the required data from </td></tr>
    <tr><td class="paramname">Converted</td><td>The Class member that is deserialized. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>This returns the istream that provided the serialized data. </dd></dl>

<p>Definition at line <a class="el" href="serialization_8h_source.xhtml#l00432">432</a> of file <a class="el" href="serialization_8h_source.xhtml">serialization.h</a>.</p>

</div>
</div>
<a class="anchor" id="aec75a8a3369287cb02f331c62b32df73"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::DeSerializeError </td>
          <td>(</td>
          <td class="paramtype">const String &amp;&#160;</td>
          <td class="paramname"><em>FailedTo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const String &amp;&#160;</td>
          <td class="paramname"><em>ClassName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>SOrD</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Simply does some string concatenation, then throws an <a class="el" href="classMezzanine_1_1Exception.xhtml" title="This is the exception thrown by most Mezzanine system that can throw exceptions.">Exception</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">FailedTo</td><td>What failed to happed for example "create testnode" or "acquire a mutex" </td></tr>
    <tr><td class="paramname">ClassName</td><td>The name of the class throw the exception </td></tr>
    <tr><td class="paramname">SOrD</td><td>Defaults to false, and if true uses the word "Serialization", otherwise uses the word "DeSerialization" </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">A</td><td><a class="el" href="classMezzanine_1_1Exception.xhtml" title="This is the exception thrown by most Mezzanine system that can throw exceptions.">Mezzanine::Exception</a> with the message "Could not {FailedTo} during {ClassName} [De]Serialization."</td></tr>
  </table>
  </dd>
</dl>
<p>This just calls <a class="el" href="namespaceMezzanine.xhtml#ab061665515c8e8a8b09ee54d93612da1" title="Simply does some string concatenation, then throws an Exception.">SerializeError()</a> with the third parameter false. This exists solely to make code A little more readable. </p>

<p>Definition at line <a class="el" href="serialization_8cpp_source.xhtml#l00053">53</a> of file <a class="el" href="serialization_8cpp_source.xhtml">serialization.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a9015c5e668e14b857a27888c56934148"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">std::ostream&amp; Mezzanine::Serialize </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>Stream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>Converted</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const String &amp;&#160;</td>
          <td class="paramname"><em>Indent</em> = <code>String(&quot;&quot;)</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert any class that supports serialization or has a serializer to a string of chars in a stream. </p>
<p>Any Class will work with this template as long as it implements the method "XML::Node ProtoSerialize(XML::Document&amp;) const" </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Stream</td><td>The ostream to put the serializable into. </td></tr>
    <tr><td class="paramname">Converted</td><td>The item to be serialized, which must have a "XML::Node ProtoSerialize(XML::Node&amp; CurrentRoot) const" method. </td></tr>
    <tr><td class="paramname">Indent</td><td>Defaults to nothing but can be set to "\t" to get normal </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A the stream that was passed and now contains the serialized object. </dd></dl>

<p>Definition at line <a class="el" href="serialization_8h_source.xhtml#l00416">416</a> of file <a class="el" href="serialization_8h_source.xhtml">serialization.h</a>.</p>

</div>
</div>
<a class="anchor" id="ab061665515c8e8a8b09ee54d93612da1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::SerializeError </td>
          <td>(</td>
          <td class="paramtype">const String &amp;&#160;</td>
          <td class="paramname"><em>FailedTo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const String &amp;&#160;</td>
          <td class="paramname"><em>ClassName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>SOrD</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Simply does some string concatenation, then throws an <a class="el" href="classMezzanine_1_1Exception.xhtml" title="This is the exception thrown by most Mezzanine system that can throw exceptions.">Exception</a>. </p>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000042">Todo:</a></b></dt><dd>This may not be an appropriate type of exception to throw here, should evaluate if a new exception is needed at some point. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">FailedTo</td><td>What failed to happed for example "create testnode" or "acquire a mutex" </td></tr>
    <tr><td class="paramname">ClassName</td><td>The name of the class throw the exception </td></tr>
    <tr><td class="paramname">SOrD</td><td>Defaults to true, and if true uses the word "Serialization", otherwise uses the word "DeSerialization" </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">A</td><td><a class="el" href="classMezzanine_1_1Exception.xhtml" title="This is the exception thrown by most Mezzanine system that can throw exceptions.">Mezzanine::Exception</a> with the message "Could not {FailedTo} during {ClassName} [De]Serialization.""Could not {FailedTo} during {ClassName} [De]Serialization." </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="serialization_8cpp_source.xhtml#l00049">49</a> of file <a class="el" href="serialization_8cpp_source.xhtml">serialization.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a519df380398999cb532245118b9cb6a2"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::SloppyProtoSerialize </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>Converted</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">XML::Node &amp;&#160;</td>
          <td class="paramname"><em>CurrentRoot</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Used to interface with a previous version of the serialization code. </p>
<p>The older serialization was implemented entirely in streaming operators. This uses those, however inneficient to get the <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">XML::Node</a> that the current serialization solution is centered around. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Converted</td><td>The class implementing older serialization code. </td></tr>
    <tr><td class="paramname">CurrentRoot</td><td>The place in the xml hiearchy to append the items to be sloppily ProtoSerialized. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="serialization_8h_source.xhtml#l00449">449</a> of file <a class="el" href="serialization_8h_source.xhtml">serialization.h</a>.</p>

</div>
</div>
<a class="anchor" id="a66fcabfab5bb18e6a5455b19bf5d6e22"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine.xhtml#a942580f9d14a57c4a192270eb78f7d57">Bool</a> Mezzanine::ToBool </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>Datum</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Converts whatever to a Bool as long as the proper streaming operators are available for it. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Datum</td><td>The whatever to be converted </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A Bool with the converted data </dd></dl>

<p>Definition at line <a class="el" href="datatypes_8h_source.xhtml#l00303">303</a> of file <a class="el" href="datatypes_8h_source.xhtml">datatypes.h</a>.</p>

</div>
</div>
<a class="anchor" id="a4e76f45ddaf80d540c5672f08a665ed4"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">double Mezzanine::Todouble </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>Datum</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Converts whatever to a double as long as the proper streaming operators are available for it. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Datum</td><td>The whatever to be converted. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A double with the converted data.</dd></dl>
<p>This exists for interacting with other libraies, in situations where changing the Typedefs could break things. </p>

<p>Definition at line <a class="el" href="datatypes_8h_source.xhtml#l00318">318</a> of file <a class="el" href="datatypes_8h_source.xhtml">datatypes.h</a>.</p>

</div>
</div>
<a class="anchor" id="a64a8e48486b9fb3caa8454cda5ab3049"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">float Mezzanine::Tofloat </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>Datum</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Converts whatever to a float as long as the proper streaming operators are available for it. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Datum</td><td>The whatever to be converted </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A float with the converted data</dd></dl>
<p>This exists for interacting with other libraies, in situations where changing the Real Typedef could break things. </p>

<p>Definition at line <a class="el" href="datatypes_8h_source.xhtml#l00311">311</a> of file <a class="el" href="datatypes_8h_source.xhtml">datatypes.h</a>.</p>

</div>
</div>
<a class="anchor" id="a99ca5eae5b40d789f4ca7ddd3501a1f0"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">int Mezzanine::Toint </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>Datum</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Converts whatever to an int as long as the proper streaming operators are available for it. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Datum</td><td>The whatever to be converted. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An int with the converted data.</dd></dl>
<p>This exists for interacting with other libraies, in situations where changing the Integer Typedef could break things. </p>

<p>Definition at line <a class="el" href="datatypes_8h_source.xhtml#l00283">283</a> of file <a class="el" href="datatypes_8h_source.xhtml">datatypes.h</a>.</p>

</div>
</div>
<a class="anchor" id="a2e13864ce278eef7ac4cdae9db669cc9"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine.xhtml#ac3576e52af3c62d13dde94829e0c5465">Integer</a> Mezzanine::ToInteger </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>Datum</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Converts whatever to an Integer as long as the proper streaming operators are available for it. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Datum</td><td>The whatever to be converted. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An Integer with the converted data. </dd></dl>

<p>Definition at line <a class="el" href="datatypes_8h_source.xhtml#l00275">275</a> of file <a class="el" href="datatypes_8h_source.xhtml">datatypes.h</a>.</p>

</div>
</div>
<a class="anchor" id="a4b9d460e8d3b2403eb27647018283969"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Mezzanine::ToReal </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>Datum</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Converts whatever to a Real as long as the proper streaming operators are available for it. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Datum</td><td>The whatever to be converted. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A Real with the converted data. </dd></dl>

<p>Definition at line <a class="el" href="datatypes_8h_source.xhtml#l00297">297</a> of file <a class="el" href="datatypes_8h_source.xhtml">datatypes.h</a>.</p>

</div>
</div>
<a class="anchor" id="ae8a13d6e385b9d270cbf37377b97e8a9"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> Mezzanine::ToString </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>Datum</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Converts whatever to a String as long as a streaming operator is available for it. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Datum</td><td>The whatever to be converted. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A String with the converted data. </dd></dl>

<p>Definition at line <a class="el" href="datatypes_8h_source.xhtml#l00258">258</a> of file <a class="el" href="datatypes_8h_source.xhtml">datatypes.h</a>.</p>

</div>
</div>
<a class="anchor" id="af589d9aee6cc9ed07c0dcc85b3495a13"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">unsigned int Mezzanine::Tounsignedint </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>Datum</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Converts whatever to an unsigned int as long as the proper streaming operators are available for it. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Datum</td><td>The whatever to be converted. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>An unsigned int with the converted data.</dd></dl>
<p>This exists for interacting with other libraies, in situations where changing the Integer Typedef could break things. </p>

<p>Definition at line <a class="el" href="datatypes_8h_source.xhtml#l00291">291</a> of file <a class="el" href="datatypes_8h_source.xhtml">datatypes.h</a>.</p>

</div>
</div>
<a class="anchor" id="ad558d586f0c8b6a9b8eee3e43010619d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> Mezzanine::ToWhole </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>Datum</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Converts whatever to a Whole as long as the proper streaming operators are available for it. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Datum</td><td>The whatever to be converted. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A Whole with the converted data. </dd></dl>

<p>Definition at line <a class="el" href="datatypes_8h_source.xhtml#l00269">269</a> of file <a class="el" href="datatypes_8h_source.xhtml">datatypes.h</a>.</p>

</div>
</div>
</div><!-- contents -->
<hr class="footer"/><address class="footer"><small>
Generated on Sat Sep 14 2013 01:00:18 for MezzanineEngine by&#160;<a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1</small></address>
</body>
</html>
