<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Todo List</title>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="DoxyStyle.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script> 
</head>
<body onload='searchBox.OnSelectItem(0);'>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;" nowrap="nowrap">
   <div id="projectname"><a href="http://blacktoppstudios.com"><img src="logogreen100pxtall.png"/></a>MezzanineEngine&#160;<span id="projectnumber">September14,2013</span></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li class="current"><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">Todo List </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><dl class="reflist">
<dt><a class="anchor" id="_todo000092"></a>File <a class="el" href="datastream_8h.xhtml">datastream.h</a>  </dt>
<dd>Investigate how required these stream implementations are  </dd>
<dt><a class="anchor" id="_todo000016"></a>page <a class="el" href="index.xhtml">Mezzanine</a>  </dt>
<dd>Fill out the Simple Data Types with all the enumerations. </dd>
<dt><a class="anchor" id="_todo000070"></a>Namespace <a class="el" href="namespaceMezzanine.xhtml">Mezzanine</a>  </dt>
<dd>This exists because somewhere in our chain of includes we have "winnt.h" (on windows) defining "KEY_EXECUTE", which causes the compile to fail at the line declaring "KEY_EXECUTE". I am reasonably certain this only exists when &lt;Ogre.h&gt; is included above this file in the include chain.  </dd>
<dt><a class="anchor" id="_todo000001"></a>Member <a class="el" href="classMezzanine_1_1ActorManager.xhtml#af01011777296ba4f2768b6d41500923d">Mezzanine::ActorManager::ActorManager</a>  (XML::Node &amp;XMLNode)</dt>
<dd>This class currently doesn't initialize anything from XML, if that changes this constructor needs to be expanded.  </dd>
<dt><a class="anchor" id="_todo000003"></a>Member <a class="el" href="classMezzanine_1_1ActorRigid.xhtml#a0290af701cc57b7bf2d8085e04841faf">Mezzanine::ActorRigid::_NotifyCollisionState</a>  (Physics::Collision *Col, const Physics::Collision::CollisionState &amp;State)</dt>
<dd>Update this to be workable with other objects that have rigid bodies internally, and maybe soft bodies.  </dd>
<dt><a class="anchor" id="_todo000004"></a>Member <a class="el" href="classMezzanine_1_1ActorRigidDeSerializer.xhtml#a43aa00f112ec13168a8369183099099f">Mezzanine::ActorRigidDeSerializer::ProtoDeSerialize</a>  (const XML::Node &amp;OneNode)</dt>
<dd>TODO: Why is gravity done here, can it be done elsewhere? Apparently the addind to the world removed what is deserialized here and this should how be used if it is different from the default  </dd>
<dt><a class="anchor" id="_todo000002"></a>Member <a class="el" href="classMezzanine_1_1ActorRigidPhysicsSettings.xhtml#a56d106b78dfa0ea5415c7928491e4fa7">Mezzanine::ActorRigidPhysicsSettings::~ActorRigidPhysicsSettings</a>  ()</dt>
<dd>Occasionally a SIGTRAP occurs here without any breakpoint set while debugging. Needs to be fixed. on Linux it is a SIGSEGV.  </dd>
<dt><a class="anchor" id="_todo000005"></a>Member <a class="el" href="classMezzanine_1_1AreaEffectManager.xhtml#a3145cbcc1dc2a5f1b8357aabbd018af9">Mezzanine::AreaEffectManager::AreaEffectManager</a>  (XML::Node &amp;XMLNode)</dt>
<dd>This class currently doesn't initialize anything from XML, if that changes this constructor needs to be expanded.  </dd>
<dt><a class="anchor" id="_todo000006"></a>Class <a class="el" href="classMezzanine_1_1Camera.xhtml">Mezzanine::Camera</a>  </dt>
<dd>Fix all the extra occurences of the word Camera in Function names on the camera.  </dd>
<dt><a class="anchor" id="_todo000007"></a>Member <a class="el" href="classMezzanine_1_1CameraManager.xhtml#a426dd240a72299e1b5f6e69ca2859542">Mezzanine::CameraManager::CameraManager</a>  (XML::Node &amp;XMLNode)</dt>
<dd>This class currently doesn't initialize anything from XML, if that changes this constructor needs to be expanded.  </dd>
<dt><a class="anchor" id="_todo000009"></a>Member <a class="el" href="namespaceMezzanine.xhtml#a36fefd8e3d822274f02c7633b0ef5072">Mezzanine::ConvertTo</a>  (const From &amp;Datum)</dt>
<dd>Overload ConvertTo for ToString Conversions.  </dd>
<dt><a class="anchor" id="_todo000043"></a>Member <a class="el" href="classMezzanine_1_1CountedPtrCastImpl.xhtml#a3601c78b166b525098e8a2b2c95f3f93">Mezzanine::CountedPtrCastImpl&lt; ReturnPointer, OriginalPointer, CountedPointerCastingState &gt;::Cast</a>  (OriginalPointer)</dt>
<dd>make this conditionally fail to compile.  </dd>
<dt><a class="anchor" id="_todo000019"></a>Member <a class="el" href="classMezzanine_1_1DefaultEventManagerFactory.xhtml#a3c35239092245b4b582033e5b45a7d79">Mezzanine::DefaultEventManagerFactory::CreateManager</a>  (NameValuePairList &amp;Params)</dt>
<dd>Add something to log a warning that the manager exists and was requested to be constructed when we have a logging manager set up.  </dd>
<dt><a class="anchor" id="_todo000020"></a>Member <a class="el" href="classMezzanine_1_1DefaultEventManagerFactory.xhtml#a592440bd81d0a2012828523833dd0e10">Mezzanine::DefaultEventManagerFactory::CreateManager</a>  (XML::Node &amp;XMLNode)</dt>
<dd>Add something to log a warning that the manager exists and was requested to be constructed when we have a logging manager set up.  </dd>
<dt><a class="anchor" id="_todo000027"></a>Member <a class="el" href="classMezzanine_1_1DefaultMeshManagerFactory.xhtml#a2c0397aa59f15dc5b770aadd0b8e35ed">Mezzanine::DefaultMeshManagerFactory::CreateManager</a>  (NameValuePairList &amp;Params)</dt>
<dd>Add something to log a warning that the manager exists and was requested to be constructed when we have a logging manager set up.  </dd>
<dt><a class="anchor" id="_todo000028"></a>Member <a class="el" href="classMezzanine_1_1DefaultMeshManagerFactory.xhtml#a4fa87a9778190048f7cc18066be58b43">Mezzanine::DefaultMeshManagerFactory::CreateManager</a>  (XML::Node &amp;XMLNode)</dt>
<dd>Add something to log a warning that the manager exists and was requested to be constructed when we have a logging manager set up.  </dd>
<dt><a class="anchor" id="_todo000039"></a>Member <a class="el" href="classMezzanine_1_1DefaultResourceManagerFactory.xhtml#a6016da8ab7d3ce53ac6b584c13cca98e">Mezzanine::DefaultResourceManagerFactory::CreateManager</a>  (NameValuePairList &amp;Params)</dt>
<dd>Add something to log a warning that the manager exists and was requested to be constructed when we have a logging manager set up.  </dd>
<dt><a class="anchor" id="_todo000040"></a>Member <a class="el" href="classMezzanine_1_1DefaultResourceManagerFactory.xhtml#af60851cccb93c107139fe0dcac3556d2">Mezzanine::DefaultResourceManagerFactory::CreateManager</a>  (XML::Node &amp;XMLNode)</dt>
<dd>Add something to log a warning that the manager exists and was requested to be constructed when we have a logging manager set up.  </dd>
<dt><a class="anchor" id="_todo000017"></a>Member <a class="el" href="classMezzanine_1_1EventManager.xhtml#a95ce9d2d865b0d8d9468448969b0ade2">Mezzanine::EventManager::EventManager</a>  ()</dt>
<dd>TODO: Make the EventManager completely thread safe. IF this is completely thread safe, we can spawn numerous individual thread each accessing this and and the performance gain would almost scale directly with cpu core count increases. Look at boost scoped_lock  </dd>
<dt><a class="anchor" id="_todo000018"></a>Member <a class="el" href="classMezzanine_1_1EventManager.xhtml#abf3650bfe862473ed2418dddbd83eec3">Mezzanine::EventManager::EventManager</a>  (XML::Node &amp;XMLNode)</dt>
<dd>This class currently doesn't initialize anything from XML, if that changes this constructor needs to be expanded.  </dd>
<dt><a class="anchor" id="_todo000066"></a>Member <a class="el" href="classMezzanine_1_1Graphics_1_1DefaultGraphicsManagerFactory.xhtml#a31f12b6e81d3ad45eb6299e8458e984c">Mezzanine::Graphics::DefaultGraphicsManagerFactory::CreateManager</a>  (NameValuePairList &amp;Params)</dt>
<dd>Add something to log a warning that the manager exists and was requested to be constructed when we have a logging manager set up.  </dd>
<dt><a class="anchor" id="_todo000067"></a>Member <a class="el" href="classMezzanine_1_1Graphics_1_1DefaultGraphicsManagerFactory.xhtml#a273b04ccafe2591e0ac58ab46906ac07">Mezzanine::Graphics::DefaultGraphicsManagerFactory::CreateManager</a>  (XML::Node &amp;XMLNode)</dt>
<dd>Add something to log a warning that the manager exists and was requested to be constructed when we have a logging manager set up.  </dd>
<dt><a class="anchor" id="_todo000061"></a>Member <a class="el" href="classMezzanine_1_1Graphics_1_1GraphicsManager.xhtml#aca1efa8a51b780e44a753f4fb7b1911f">Mezzanine::Graphics::GraphicsManager::AppendCurrentSettings</a>  (XML::Node &amp;SettingsRootNode)</dt>
<dd>Currently the maximized setting does nothing in the gamewindow. If it gets implemented, so does this.  </dd>
<dt><a class="anchor" id="_todo000062"></a>Member <a class="el" href="classMezzanine_1_1Graphics_1_1GraphicsManager.xhtml#a22c797a93cecdbd7feb953a9d8c03fad">Mezzanine::Graphics::GraphicsManager::ApplySettingGroupImpl</a>  (ObjectSettingGroup *Group)</dt>
<dd>May want to make some other data member so that people can accurately get what is set now, instead of what will be set.  </dd>
<dt><a class="anchor" id="_todo000065"></a>Member <a class="el" href="classMezzanine_1_1Graphics_1_1GraphicsManager.xhtml#af85f5e9cbd1a3208c9ceeb32ace075aa">Mezzanine::Graphics::GraphicsManager::Deinitialize</a>  ()</dt>
<dd>Here is where we should be shutting down the rendersystem, but <a class="el" href="namespaceOgre.xhtml">Ogre</a> in it's poorly coded ways wasn't designed for that unless you are also deleting Ogre::Root. Take it up with them if you don't like it. (tell me where the thread is when you do, I'll join in) Related: <a href="http://www.ogre3d.org/forums/viewtopic.php?f=4&t=77036&sid=a7ce7512032eb851d50da083795198f3">http://www.ogre3d.org/forums/viewtopic.php?f=4&amp;t=77036&amp;sid=a7ce7512032eb851d50da083795198f3</a>  </dd>
<dt><a class="anchor" id="_todo000063"></a>Member <a class="el" href="classMezzanine_1_1Graphics_1_1GraphicsManager.xhtml#ac84e19f672c0334c5f3b758cd51ea140">Mezzanine::Graphics::GraphicsManager::GetRenderSystemName</a>  (const Graphics::RenderSystem &amp;RenderSys)</dt>
<dd>This will likely have to change when other OGL systems are implemented  </dd>
<dt><a class="anchor" id="_todo000064"></a>Member <a class="el" href="classMezzanine_1_1Graphics_1_1GraphicsManager.xhtml#ac1d34f5a574eede57801f46ba90f5b85">Mezzanine::Graphics::GraphicsManager::GetShortenedRenderSystemName</a>  (const Graphics::RenderSystem &amp;RenderSys)</dt>
<dd>This will likely have to change when other OGL systems are implemented  </dd>
<dt><a class="anchor" id="_todo000060"></a>Member <a class="el" href="classMezzanine_1_1Graphics_1_1GraphicsManager.xhtml#a70c482c5a946b737087fa4069f669e99">Mezzanine::Graphics::GraphicsManager::GraphicsManager</a>  (XML::Node &amp;XMLNode)</dt>
<dd>This is currently necessary because a render window of some kind needs to exist for the loading of resources that occurs later in world construction (when this is constructed by the world, which this assumes. If possible this should be removed, to keep construction more flexible.  </dd>
<dt><a class="anchor" id="_todo000069"></a>Member <a class="el" href="classMezzanine_1_1Graphics_1_1Skeleton.xhtml#a4b655223652a21a68ee8f537bb2f624f">Mezzanine::Graphics::Skeleton::GetName</a>  () const </dt>
<dd><p class="startdd">Implement these </p>
<p class="enddd">Implement these  </p>
</dd>
<dt><a class="anchor" id="_todo000074"></a>Member <a class="el" href="namespaceMezzanine_1_1Input.xhtml#aaf09ac800f709ce06c0f2707afe2a1b8">Mezzanine::Input::ControllerCodeCompare</a>  (const MetaCode &amp;First, const MetaCode &amp;Second)</dt>
<dd>When our support for Multitouch devices expands this may need to be expanded as well.  </dd>
<dt><a class="anchor" id="_todo000071"></a>Member <a class="el" href="classMezzanine_1_1Input_1_1DefaultInputManagerFactory.xhtml#a4dfe81b718127fc68956f78bbd09af8a">Mezzanine::Input::DefaultInputManagerFactory::CreateManager</a>  (NameValuePairList &amp;Params)</dt>
<dd>Add something to log a warning that the manager exists and was requested to be constructed when we have a logging manager set up.  </dd>
<dt><a class="anchor" id="_todo000072"></a>Member <a class="el" href="classMezzanine_1_1Input_1_1DefaultInputManagerFactory.xhtml#abe1db93801d36f88b0f221dc872a4513">Mezzanine::Input::DefaultInputManagerFactory::CreateManager</a>  (XML::Node &amp;XMLNode)</dt>
<dd>Add something to log a warning that the manager exists and was requested to be constructed when we have a logging manager set up.  </dd>
<dt><a class="anchor" id="_todo000073"></a>Class <a class="el" href="classMezzanine_1_1Input_1_1Keyboard.xhtml">Mezzanine::Input::Keyboard</a>  </dt>
<dd>SDL mentions a ModState for keys. May want to implement that.  </dd>
<dt><a class="anchor" id="_todo000077"></a>Member <a class="el" href="classMezzanine_1_1Input_1_1Mouse.xhtml#a9670ee239edfc2451161572b7fc349c8">Mezzanine::Input::Mouse::GetMouseCursor</a>  ()</dt>
<dd>Implement this.  </dd>
<dt><a class="anchor" id="_todo000075"></a>Member <a class="el" href="classMezzanine_1_1Input_1_1Mouse.xhtml#a636b26138143c59b4f73d0f8ffc193f5">Mezzanine::Input::Mouse::UpdateImpl</a>  (const MetaCodeContainer &amp;DeltaCodes, MetaCodeContainer &amp;GeneratedCodes)</dt>
<dd><p class="startdd">Getting the mouse focus doesn't do what I originally thought it would. When a mouse leaves a window, the focus isn't set to NULL as expected. If you have only one window, then it just stays pointing to that window. If you have two then it will stay on the first window until you mouse over the second, even if there is a space between the windows. This should be updated somehow so that we can set "HoveredWindow" to NULL when none of our windows are being hovered. </p>
<p class="enddd">This code isn't as graceful as I am sure it can be made.  </p>
</dd>
<dt><a class="anchor" id="_todo000078"></a>Member <a class="el" href="classMezzanine_1_1Input_1_1Mouse.xhtml#a0e2d295e14c16f0182802100e3934fb2">Mezzanine::Input::Mouse::WarpCursorToPosition</a>  (Graphics::GameWindow *Win, const Vector2 &amp;Position)</dt>
<dd>Implement this.  </dd>
<dt><a class="anchor" id="_todo000022"></a>Member <a class="el" href="classMezzanine_1_1LineGroup.xhtml#afbc11e001ce594846b926c7dab7ceafd">Mezzanine::LineGroup::LineGroup</a>  ()</dt>
<dd>TODO: This class really should support rotation, the underlying implementation does.  </dd>
<dt><a class="anchor" id="_todo000023"></a>Member <a class="el" href="classMezzanine_1_1Matrix3x3.xhtml#ac759aa60d4dc6dee040b6741b6d44392">Mezzanine::Matrix3x3::Transpose</a>  () const </dt>
<dd>I'm not gonna lie, I have no idea what the hell the Transpose of a 3x3 Matrix is or what it is used for...this doc could use a touchup. In fact most of the doc's on this class could use a review.  </dd>
<dt><a class="anchor" id="_todo000024"></a>Member <a class="el" href="classMezzanine_1_1Matrix4x4.xhtml#a1330573388a3070bc747bad97d93d3e9">Mezzanine::Matrix4x4::Transpose</a>  () const </dt>
<dd>I'm not gonna lie, I have no idea what the hell the Transpose of a 4x4 Matrix is or what it is used for...this doc could use a touchup. In fact most of the doc's on this class could use a review.  </dd>
<dt><a class="anchor" id="_todo000026"></a>Member <a class="el" href="classMezzanine_1_1MeshManager.xhtml#aa95df6921ad121eeea7ab073d1d1e5a7">Mezzanine::MeshManager::CreateCylinderMesh</a>  (const String &amp;MeshName, const String &amp;MaterialName, const Vector3 &amp;HalfExtents, const Vector3 &amp;AxisOrientation, const Whole &amp;CircleRes=16, const Whole &amp;Segments=1)</dt>
<dd>These if/elses aren't really a long term solution as they won't work for any more then 1 segment. This needs to be addressed.  </dd>
<dt><a class="anchor" id="_todo000025"></a>Member <a class="el" href="classMezzanine_1_1MeshManager.xhtml#a830f36f16d0ea53e3bb41d8bdc86076e">Mezzanine::MeshManager::MeshManager</a>  (XML::Node &amp;XMLNode)</dt>
<dd>This class currently doesn't initialize anything from XML, if that changes this constructor needs to be expanded.  </dd>
<dt><a class="anchor" id="_todo000029"></a>Member <a class="el" href="classMezzanine_1_1ObjectSettingsHandler.xhtml#a449d13d7cae00ebf4499d5e58d22eadb">Mezzanine::ObjectSettingsHandler::LoadSettingsFromFile</a>  (const String &amp;FileName, const String &amp;Path)</dt>
<dd>Replace this stack allocated stream for one initialized from the Resource Manager, after the system is ready.  </dd>
<dt><a class="anchor" id="_todo000030"></a>Member <a class="el" href="classMezzanine_1_1ObjectSettingsHandler.xhtml#a4dfe2e9ee9c26b7c44ffcd9c253b8fa7">Mezzanine::ObjectSettingsHandler::SaveSettingsToFile</a>  (StringVector &amp;GroupNames, const String &amp;FileName, const String &amp;Path)</dt>
<dd>Replace this stack allocated stream for one initialized from the Resource Manager, after the system is ready.  </dd>
<dt><a class="anchor" id="_todo000083"></a>Member <a class="el" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a57cdf6ed99dd3a976973abded18990e6">Mezzanine::Physics::CollisionShapeManager::CollisionShapeManager</a>  (XML::Node &amp;XMLNode)</dt>
<dd>This class currently doesn't initialize anything from XML, if that changes this constructor needs to be expanded.  </dd>
<dt><a class="anchor" id="_todo000084"></a>Member <a class="el" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a98f31067c4d9733b4c4a8ab2ece1ebc8">Mezzanine::Physics::CollisionShapeManager::LoadAllShapesFromXMLFile</a>  (const String &amp;FileName, const String &amp;Group)</dt>
<dd>Replace this stack allocated stream for one initialized from the Resource Manager, after the system is ready.  </dd>
<dt><a class="anchor" id="_todo000085"></a>Member <a class="el" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#acc8ab5cadd841828a484e32a2ee0db67">Mezzanine::Physics::CollisionShapeManager::SaveAllStoredShapesToXMLFile</a>  (const String &amp;FileName)</dt>
<dd>Replace this stack allocated stream for one initialized from the Resource Manager, after the system is ready.  </dd>
<dt><a class="anchor" id="_todo000086"></a>Member <a class="el" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ab6c6d8f552ab0b914966b460daed29eb">Mezzanine::Physics::CollisionShapeManager::SaveShapesToXMLFile</a>  (const String &amp;FileName, ShapeVector &amp;ShapesToSave)</dt>
<dd>Replace this stack allocated stream for one initialized from the Resource Manager, after the system is ready.  </dd>
<dt><a class="anchor" id="_todo000080"></a>Member <a class="el" href="namespaceMezzanine_1_1Physics.xhtml#afb85cceec4e3de0b49346ce9fbcf87bc">Mezzanine::Physics::CreateShape</a>  (XML::Node OneNode)</dt>
<dd><p class="startdd">Complete CreateShape function once DynamicMeshCollisionShape can be deserialized </p>
<p>Complete CreateShape function once ActorSoftCollisionShape can be deserialized </p>
<p>Complete CreateShape function once StaticMeshCollisionShape can be deserialized </p>
<p>Complete CreateShape function once ActorSoftCollisionShape can be deserialized </p>
<p>Complete CreateShape function once StaticMeshCollisionShape can be deserialized </p>
<p>Complete CreateShape function once ActorSoftCollisionShape can be deserialized </p>
<p class="enddd">Complete CreateShape function once StaticMeshCollisionShape can be deserialized  </p>
</dd>
<dt><a class="anchor" id="_todo000087"></a>Member <a class="el" href="classMezzanine_1_1Physics_1_1DefaultCollisionShapeManagerFactory.xhtml#a0b8df91fed21132b3c37bf771855c5ad">Mezzanine::Physics::DefaultCollisionShapeManagerFactory::CreateManager</a>  (NameValuePairList &amp;Params)</dt>
<dd>Add something to log a warning that the manager exists and was requested to be constructed when we have a logging manager set up.  </dd>
<dt><a class="anchor" id="_todo000088"></a>Member <a class="el" href="classMezzanine_1_1Physics_1_1DefaultCollisionShapeManagerFactory.xhtml#a95f072ff72214db0db15dac212829be4">Mezzanine::Physics::DefaultCollisionShapeManagerFactory::CreateManager</a>  (XML::Node &amp;XMLNode)</dt>
<dd>Add something to log a warning that the manager exists and was requested to be constructed when we have a logging manager set up.  </dd>
<dt><a class="anchor" id="_todo000089"></a>Member <a class="el" href="classMezzanine_1_1Physics_1_1PhysicsManager.xhtml#aee045803bd3c252246329acbdf60123c">Mezzanine::Physics::PhysicsManager::ProcessAllCollisions</a>  ()</dt>
<dd>This is an absurd round-about way to get the data we need, and bullet will probably have to be extended to change this so it's actually good.  </dd>
<dt><a class="anchor" id="_todo000090"></a>Member <a class="el" href="classMezzanine_1_1Physics_1_1Point2PointConstraint.xhtml#a8601b6b3b20a3ad2aa48548f093b41ae">Mezzanine::Physics::Point2PointConstraint::SetTAU</a>  (Real TAU)</dt>
<dd>Research this more carefully  </dd>
<dt><a class="anchor" id="_todo000091"></a>Member <a class="el" href="classMezzanine_1_1Physics_1_1StaticMeshCollisionShape.xhtml#ad1f24506c288b57bdd110481a1d47705">Mezzanine::Physics::StaticMeshCollisionShape::StaticMeshCollisionShape</a>  (const String &amp;Name, btBvhTriangleMeshShape *BulletShape)</dt>
<dd>May need to create a btScaledBvhTriangleMeshShape for scaling this shape appropriately.  </dd>
<dt><a class="anchor" id="_todo000031"></a>Member <a class="el" href="classMezzanine_1_1Ray.xhtml#a7164d929caf75bcebceed9149e9a3540">Mezzanine::Ray::GetNormal</a>  () const </dt>
<dd>discuss the merits throwing an error here.  </dd>
<dt><a class="anchor" id="_todo000032"></a>Member <a class="el" href="classMezzanine_1_1RayQueryTool.xhtml#a9ded1647755a523d3dbda297a0e73eba">Mezzanine::RayQueryTool::GetFirstActorOnRayByAABB</a>  (Ray ActorRay, Whole ObjectFlags)</dt>
<dd><p class="startdd">TODO: The function WorldQueryTool::GetFirstActorOnRayByAABB does not return an valid offset. This needs to be calculated somehow. </p>
<p>TODO: The function WorldQueryTool::GetFirstActorOnRayByAABB has not been tested and needs to be tested </p>
<p class="enddd">TODO: The function WorldQueryTool::GetFirstActorOnRayByAABB does not take other obstructions into account  </p>
</dd>
<dt><a class="anchor" id="_todo000093"></a>Member <a class="el" href="classMezzanine_1_1Resource_1_1TextSettingsFile.xhtml#a5ffb86d6822701880e1dc47b4f37a637">Mezzanine::Resource::TextSettingsFile::Load</a>  (const String &amp;Filename, const String &amp;Group, const String &amp;Separators=" \t:=", bool TrimWhitespace=true)</dt>
<dd>Once the resource system has been updated to be independant of <a class="el" href="namespaceOgre.xhtml">Ogre</a>'s, this function needs to be updated to access our methods instead of theirs.  </dd>
<dt><a class="anchor" id="_todo000037"></a>Member <a class="el" href="classMezzanine_1_1ResourceManager.xhtml#a7a4c08e364f0ea468c911d6228d8c08f">Mezzanine::ResourceManager::CreateDataStream</a>  (const String &amp;AssetName, const String &amp;AssetGroup, void *Buffer, const UInt32 BufferSize)</dt>
<dd>Once we have our own AssetGroup implementation we need to implement this.  </dd>
<dt><a class="anchor" id="_todo000038"></a>Member <a class="el" href="classMezzanine_1_1ResourceManager.xhtml#aee575de144fe2ac87df4e06f54cb3b92">Mezzanine::ResourceManager::DestroyAssetGroup</a>  (const String &amp;GroupName)</dt>
<dd>This is a bit of a hack, but needs to be here until we can upgrade our resource system.  </dd>
<dt><a class="anchor" id="_todo000036"></a>Member <a class="el" href="classMezzanine_1_1ResourceManager.xhtml#a0d02d9b4059ebd6987a1be5118b54efa">Mezzanine::ResourceManager::OpenAssetStream</a>  (const String &amp;AssetName, const String &amp;AssetGroup)</dt>
<dd>This entire method is a bit of a hack. When the resource system gets refactored it should go through our archives or whatever equivalent. Since we currently have to put up with <a class="el" href="namespaceOgre.xhtml">Ogre</a>'s system, we'll use it for now as a hack.  </dd>
<dt><a class="anchor" id="_todo000035"></a>Member <a class="el" href="classMezzanine_1_1ResourceManager.xhtml#a23c46c4660e85d0e38f8e61ed12fde3c">Mezzanine::ResourceManager::ResourceManager</a>  (XML::Node &amp;XMLNode)</dt>
<dd>This class currently doesn't initialize anything from XML, if that changes this constructor needs to be expanded.  </dd>
<dt><a class="anchor" id="_todo000041"></a>Member <a class="el" href="classMezzanine_1_1ResourceManager.xhtml#a7312c017bcb079f3e78400c27224370b">Mezzanine::ResourceManager::Which</a>  (String ExecutableName)</dt>
<dd>Add support for extension handling on windows. "cmd" should find "cmd.exe" in system32, but currently "cmd.exe" needs to be searched  </dd>
<dt><a class="anchor" id="_todo000095"></a>Class <a class="el" href="classMezzanine_1_1Scripting_1_1iScriptArgument.xhtml">Mezzanine::Scripting::iScriptArgument</a>  </dt>
<dd>Define operators for the iScriptArgument at least for assignment  </dd>
<dt><a class="anchor" id="_todo000094"></a>Class <a class="el" href="classMezzanine_1_1Scripting_1_1iScriptCompilable.xhtml">Mezzanine::Scripting::iScriptCompilable</a>  </dt>
<dd><p class="startdd">Add sample code of safe cast in ScriptCompilable, becuase that is kinda wierd. </p>
<p class="enddd">Put the Virtual inheritance back into the this class  </p>
</dd>
<dt><a class="anchor" id="_todo000042"></a>Member <a class="el" href="namespaceMezzanine.xhtml#ab061665515c8e8a8b09ee54d93612da1">Mezzanine::SerializeError</a>  (const String &amp;FailedTo, const String &amp;ClassName, bool SOrD=true)</dt>
<dd>This may not be an appropriate type of exception to throw here, should evaluate if a new exception is needed at some point.  </dd>
<dt><a class="anchor" id="_todo000046"></a>Member <a class="el" href="classMezzanine_1_1TerrainManager.xhtml#ae940f33a369e54c2322de4202d236eb2">Mezzanine::TerrainManager::RemoveAllTerrains</a>  ()</dt>
<dd>When adding more types of terrains, it should be remembered that code should be added to clear the extra vectors.  </dd>
<dt><a class="anchor" id="_todo000045"></a>Member <a class="el" href="classMezzanine_1_1TerrainManager.xhtml#a48caf07a7cb678b42c3eb15b1e2b01d6">Mezzanine::TerrainManager::TerrainManager</a>  (XML::Node &amp;XMLNode)</dt>
<dd>This class currently doesn't initialize anything from XML, if that changes this constructor needs to be expanded.  </dd>
<dt><a class="anchor" id="_todo000048"></a>Member <a class="el" href="classMezzanine_1_1Trie.xhtml#ac4619367a402a232f481b1d641086c55">Mezzanine::Trie&lt; T, V, Cmp, Items &gt;::erase</a>  (const std::vector&lt; T &gt; &amp;key)</dt>
<dd>Currently this uses a hack that isn't safe for all types and circumstances. This should be changed to use "data()" function member new to C++11 when we make that dive.  </dd>
<dt><a class="anchor" id="_todo000055"></a>Member <a class="el" href="classMezzanine_1_1Trie.xhtml#af62d2af1cdba67c2548559dfbc3eb3d3">Mezzanine::Trie&lt; T, V, Cmp, Items &gt;::find</a>  (const std::vector&lt; T &gt; &amp;key)</dt>
<dd>Currently this uses a hack that isn't safe for all types and circumstances. This should be changed to use "data()" function member new to C++11 when we make that dive.  </dd>
<dt><a class="anchor" id="_todo000050"></a>Member <a class="el" href="classMezzanine_1_1Trie.xhtml#aafcbfec88414be1df315332eca91f37e">Mezzanine::Trie&lt; T, V, Cmp, Items &gt;::get</a>  (const std::vector&lt; T &gt; &amp;key)</dt>
<dd>Currently this uses a hack that isn't safe for all types and circumstances. This should be changed to use "data()" function member new to C++11 when we make that dive.  </dd>
<dt><a class="anchor" id="_todo000049"></a>Member <a class="el" href="classMezzanine_1_1Trie.xhtml#a38579433efd18197dc1ecd561e7f980e">Mezzanine::Trie&lt; T, V, Cmp, Items &gt;::get</a>  (const std::vector&lt; T &gt; &amp;key) const </dt>
<dd>Currently this uses a hack that isn't safe for all types and circumstances. This should be changed to use "data()" function member new to C++11 when we make that dive.  </dd>
<dt><a class="anchor" id="_todo000052"></a>Member <a class="el" href="classMezzanine_1_1Trie.xhtml#a9a8eac01bdeb5aeab9db1cf5b31a72c1">Mezzanine::Trie&lt; T, V, Cmp, Items &gt;::hasKey</a>  (const std::vector&lt; T &gt; &amp;key) const </dt>
<dd>Currently this uses a hack that isn't safe for all types and circumstances. This should be changed to use "data()" function member new to C++11 when we make that dive.  </dd>
<dt><a class="anchor" id="_todo000047"></a>Member <a class="el" href="classMezzanine_1_1Trie.xhtml#ac026d0ba7f978e5c5255c31fd7dd5c2f">Mezzanine::Trie&lt; T, V, Cmp, Items &gt;::insert</a>  (const std::vector&lt; T &gt; &amp;key, V const &amp;value)</dt>
<dd>Currently this uses a hack that isn't safe for all types and circumstances. This should be changed to use "data()" function member new to C++11 when we make that dive.  </dd>
<dt><a class="anchor" id="_todo000051"></a>Member <a class="el" href="classMezzanine_1_1Trie.xhtml#a4404d2030747b2306e9c4d5ed8c2ee58">Mezzanine::Trie&lt; T, V, Cmp, Items &gt;::operator[]</a>  (const std::vector&lt; T &gt; &amp;key)</dt>
<dd>Currently this uses a hack that isn't safe for all types and circumstances. This should be changed to use "data()" function member new to C++11 when we make that dive.  </dd>
<dt><a class="anchor" id="_todo000054"></a>Member <a class="el" href="classMezzanine_1_1Trie.xhtml#a08587b6f74482be1e92f606ba855f68b">Mezzanine::Trie&lt; T, V, Cmp, Items &gt;::startsWith</a>  (const std::vector&lt; T &gt; &amp;prefix) const </dt>
<dd>Currently this uses a hack that isn't safe for all types and circumstances. This should be changed to use "data()" function member new to C++11 when we make that dive.  </dd>
<dt><a class="anchor" id="_todo000053"></a>Member <a class="el" href="classMezzanine_1_1Trie.xhtml#a5ea9bc7c2670c440cc5195d37595e93e">Mezzanine::Trie&lt; T, V, Cmp, Items &gt;::startsWith</a>  (const std::vector&lt; T &gt; &amp;prefix)</dt>
<dd>Currently this uses a hack that isn't safe for all types and circumstances. This should be changed to use "data()" function member new to C++11 when we make that dive.  </dd>
<dt><a class="anchor" id="_todo000096"></a>Member <a class="el" href="classMezzanine_1_1UI_1_1Activatable.xhtml#a49a4cbc1a6a53892baf081a57592b8e0">Mezzanine::UI::Activatable::BindActivationKeyOrButton</a>  (const Input::InputCode &amp;Code)</dt>
<dd>Throw an error?  </dd>
<dt><a class="anchor" id="_todo000098"></a>Member <a class="el" href="classMezzanine_1_1UI_1_1Caption.xhtml#abe41befd65e977a1bb300427d0dd5936">Mezzanine::UI::Caption::SetGlyphIndex</a>  (const Whole &amp;GlyphIndex, const String &amp;Atlas)</dt>
<dd>Throw an error?  </dd>
<dt><a class="anchor" id="_todo000097"></a>Member <a class="el" href="classMezzanine_1_1UI_1_1Caption.xhtml#a2cc9da9ae1e10cd5829117f0d473186a">Mezzanine::UI::Caption::SetGlyphIndex</a>  (const Whole &amp;GlyphIndex)</dt>
<dd>Throw an error?  </dd>
<dt><a class="anchor" id="_todo000107"></a>Member <a class="el" href="classMezzanine_1_1UI_1_1DefaultUIManagerFactory.xhtml#a17527dc1834b023c5b608cefdec0f1c1">Mezzanine::UI::DefaultUIManagerFactory::CreateManager</a>  (XML::Node &amp;XMLNode)</dt>
<dd>Add something to log a warning that the manager exists and was requested to be constructed when we have a logging manager set up.  </dd>
<dt><a class="anchor" id="_todo000106"></a>Member <a class="el" href="classMezzanine_1_1UI_1_1DefaultUIManagerFactory.xhtml#a006f821c28805b4379675cd301166102">Mezzanine::UI::DefaultUIManagerFactory::CreateManager</a>  (NameValuePairList &amp;Params)</dt>
<dd>Add something to log a warning that the manager exists and was requested to be constructed when we have a logging manager set up.  </dd>
<dt><a class="anchor" id="_todo000099"></a>Member <a class="el" href="classMezzanine_1_1UI_1_1ListBox.xhtml#a61be46079aca37b5592d046699a6e8cb">Mezzanine::UI::ListBox::ListBox</a>  (ConstString &amp;name, const RenderableRect &amp;Rect, const UI::ScrollbarStyle &amp;ScrollStyle, Screen *PScreen)</dt>
<dd>Currently this class has little support for a border around the selections. Ideally when the UI system is more complete we'll be able to seemlessly move objects around different layers and thus have more control over z-order. When that happens we should add a rect to this class be be placed over the selections for use with a border or other kind of decoration.  </dd>
<dt><a class="anchor" id="_todo000100"></a>Member <a class="el" href="classMezzanine_1_1UI_1_1ListBox.xhtml#a81ddebed01b1503478c2fa7b75ce4b24">Mezzanine::UI::ListBox::SetSelected</a>  (Caption *ToBeSelected)</dt>
<dd>Maybe add a checker to verify the caption belongs to this widget?  </dd>
<dt><a class="anchor" id="_todo000102"></a>Member <a class="el" href="classMezzanine_1_1UI_1_1MarkupText.xhtml#a2cff9446978935a555fafdc0795de517">Mezzanine::UI::MarkupText::SetDefaultGlyphIndex</a>  (const Whole &amp;DefaultGlyphIndex, const String &amp;Atlas)</dt>
<dd>Throw an error?  </dd>
<dt><a class="anchor" id="_todo000101"></a>Member <a class="el" href="classMezzanine_1_1UI_1_1MarkupText.xhtml#a8455dbc85e8ed56f366c14f1cab24f49">Mezzanine::UI::MarkupText::SetDefaultGlyphIndex</a>  (const Whole &amp;DefaultGlyphIndex)</dt>
<dd>Throw an error?  </dd>
<dt><a class="anchor" id="_todo000103"></a>Member <a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#aa1a97d88e3c1fec1b1be7e613c122404">Mezzanine::UI::Screen::GetSceneManager</a>  ()</dt>
<dd>This function exists (as opposed to storing a pointer that doesn't change) so that if changes in the viewport configuration occur this will pick up on that. However the render queue listener that is added in this class' constructor never gets re-assigned. This needs to be fixed. Until then if a change does occur the UI will be rendered at a different time then it needs to be, potentially overwritten by the scene render.  </dd>
<dt><a class="anchor" id="_todo000105"></a>Member <a class="el" href="classMezzanine_1_1UI_1_1UIManager.xhtml#a2a508ad76fc347dd2245bfce78e2d7cc">Mezzanine::UI::UIManager::GetAtlas</a>  (const String &amp;AtlasName)</dt>
<dd>These NULL returns should probably be exceptions.  </dd>
<dt><a class="anchor" id="_todo000104"></a>Member <a class="el" href="classMezzanine_1_1UI_1_1UIManager.xhtml#a155c3b3a6b7fdefefde26cf781bd82ff">Mezzanine::UI::UIManager::UIManager</a>  (XML::Node &amp;XMLNode)</dt>
<dd>This class currently doesn't initialize anything from XML, if that changes this constructor needs to be expanded.  </dd>
<dt><a class="anchor" id="_todo000058"></a>Member <a class="el" href="classMezzanine_1_1WorldNode.xhtml#a417e459d58c4d612bcbbe98a328c7b50">Mezzanine::WorldNode::SetAutoTracking</a>  (AttachableBase *Target, const Vector3 &amp;LocalDirection=Vector3::Neg_Unit_Z(), const Vector3 &amp;Offset=Vector3())</dt>
<dd>TODO: The WorldNode Does not Correctly Serialize AutoTracking.  </dd>
<dt><a class="anchor" id="_todo000057"></a>Member <a class="el" href="classMezzanine_1_1WorldNode.xhtml#ab088981b0bea9d73e9bfaac5f237abc8">Mezzanine::WorldNode::SetDirection</a>  (const Vector3 &amp;Direction, const <a class="el" href="namespaceMezzanine.xhtml#ad81c74de3529f1e643bd145173924ed3" title="Used to define what frame of reference is to be used when positioning or rotating objects...">Mezzanine::TransformSpace</a> &amp;TS=<a class="el" href="namespaceMezzanine.xhtml#ad81c74de3529f1e643bd145173924ed3aeb8fde3835a59be182f10353d961882d" title="World space.">Mezzanine::TS_World</a>, const Vector3 &amp;LocalAxis=Vector3::Neg_Unit_Z())</dt>
<dd>May want to change this to an exception, maybe.  </dd>
<dt><a class="anchor" id="_todo000059"></a>Member <a class="el" href="classMezzanine_1_1WorldProxy.xhtml#a34d1af1b7d367a0bc1fa1609162db9f5">Mezzanine::WorldProxy::_Bind</a>  (WorldObject *NewParent)</dt>
<dd>Notify something? Perhaps use the new event system?  </dd>
<dt><a class="anchor" id="_todo000110"></a>Member <a class="el" href="classMezzanine_1_1XML_1_1Attribute.xhtml#a09bfced7ac57e4c80af524a31561447b">Mezzanine::XML::Attribute::AsDouble</a>  (double def=0) const </dt>
<dd>Update Attribute::AsDouble() to check errno and throw exceptions were appropriate, and throw a exception on failure instead of producing a valid return value.  </dd>
<dt><a class="anchor" id="_todo000111"></a>Member <a class="el" href="classMezzanine_1_1XML_1_1Attribute.xhtml#a73ae5a32a8f10d3de238758e13840850">Mezzanine::XML::Attribute::AsFloat</a>  (float def=0) const </dt>
<dd>Update Attribute::AsFloat() to check errno and throw exceptions were appropriate, and throw a exception on failure instead of producing a valid return value.  </dd>
<dt><a class="anchor" id="_todo000108"></a>Member <a class="el" href="classMezzanine_1_1XML_1_1Attribute.xhtml#a433fef4f74eaa825755b53b1baea539a">Mezzanine::XML::Attribute::AsInt</a>  (int def=0) const </dt>
<dd>Update Attribute::AsInt() to check errno and throw exceptions were appropriate, and throw a exception on failure instead of producing a valid return value.  </dd>
<dt><a class="anchor" id="_todo000109"></a>Member <a class="el" href="classMezzanine_1_1XML_1_1Attribute.xhtml#affc4e62ae891b85fea0d34f90c5b18c9">Mezzanine::XML::Attribute::AsUint</a>  (unsigned int def=0) const </dt>
<dd>Update Attribute::AsUint() to check errno and throw exceptions were appropriate, and throw a exception on failure instead of producing a valid return value.  </dd>
<dt><a class="anchor" id="_todo000113"></a>Member <a class="el" href="classMezzanine_1_1XML_1_1Attribute.xhtml#a59221d61ea9d7e45eaab2c6cc1bad519">Mezzanine::XML::Attribute::SetValue</a>  (int rhs)</dt>
<dd><p class="startdd">update this to make the error return code redundant and use an exception instead. </p>
<p class="enddd">Review for possiblity of buffer overflow.  </p>
</dd>
<dt><a class="anchor" id="_todo000115"></a>Member <a class="el" href="classMezzanine_1_1XML_1_1Attribute.xhtml#a69984ae38bd7e6f7b83b32f5e1309273">Mezzanine::XML::Attribute::SetValue</a>  (double rhs)</dt>
<dd><p class="startdd">update this to make the error return code redundant and use an exception instead. </p>
<p class="enddd">Review for possiblity of buffer overflow.  </p>
</dd>
<dt><a class="anchor" id="_todo000117"></a>Member <a class="el" href="classMezzanine_1_1XML_1_1Attribute.xhtml#a50ea0652d3e71c8d41d573f1cfc3a3bd">Mezzanine::XML::Attribute::SetValue</a>  (T rhs)</dt>
<dd>Strip "&gt;" automatically and provide a method to reconsitute it.  </dd>
<dt><a class="anchor" id="_todo000112"></a>Member <a class="el" href="classMezzanine_1_1XML_1_1Attribute.xhtml#afff322c3640040f0054c6d1e346891fc">Mezzanine::XML::Attribute::SetValue</a>  (const Char8 *rhs)</dt>
<dd><p class="startdd">update this to make the error return code redundant and use an exception instead. </p>
<p class="enddd">Review for possiblity of buffer overflow.  </p>
</dd>
<dt><a class="anchor" id="_todo000116"></a>Member <a class="el" href="classMezzanine_1_1XML_1_1Attribute.xhtml#a7deca5348aad40d7ffd40f4a74737332">Mezzanine::XML::Attribute::SetValue</a>  (bool rhs)</dt>
<dd><p class="startdd">update this to make the error return code redundant and use an exception instead. </p>
<p class="enddd">Review for possiblity of buffer overflow.  </p>
</dd>
<dt><a class="anchor" id="_todo000118"></a>Member <a class="el" href="classMezzanine_1_1XML_1_1Attribute.xhtml#a3df2a4fdea7db7fe57c7f7dd4f27ac8c">Mezzanine::XML::Attribute::SetValue</a>  (const String &amp;rhs)</dt>
<dd>update this to make the error return code redundant and use an exception instead.  </dd>
<dt><a class="anchor" id="_todo000114"></a>Member <a class="el" href="classMezzanine_1_1XML_1_1Attribute.xhtml#a331f9de766259d24a707ec552d7e5726">Mezzanine::XML::Attribute::SetValue</a>  (unsigned int rhs)</dt>
<dd><p class="startdd">update this to make the error return code redundant and use an exception instead. </p>
<p class="enddd">Review for possiblity of buffer overflow.  </p>
</dd>
<dt><a class="anchor" id="_todo000123"></a>Member <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml#a446781c040be454e12282ff91d28cb20">Mezzanine::XML::Node::FirstElementByPath</a>  (const Char8 *Path, Char8 delimiter= '/') const </dt>
<dd>Investigate this more deeply.  </dd>
<dt><a class="anchor" id="_todo000121"></a>Member <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml#a7963271c2ad283a37cbb750370daf4c9">Mezzanine::XML::Node::InsertChildAfter</a>  (NodeType Type, const Node &amp;node)</dt>
<dd>Not all nodes can be added to other nodes, we need to figure it out and put it here.  </dd>
<dt><a class="anchor" id="_todo000122"></a>Member <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml#a3d880d9761fa75e9582f22355693a1f6">Mezzanine::XML::Node::InsertChildBefore</a>  (NodeType Type, const Node &amp;node)</dt>
<dd>Not all nodes can be added to other nodes, we need to figure it out and put it here.  </dd>
<dt><a class="anchor" id="_todo000120"></a>Member <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml#a2c6b463b195439bcf3cbdd80e4f271c0">Mezzanine::XML::Node::PrependChild</a>  (NodeType Type=NodeElement)</dt>
<dd>Not all nodes can be added to other nodes, we need to figure it out and put it here.  </dd>
<dt><a class="anchor" id="_todo000119"></a>Member <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml#aa8bad1055873931e97cd12b044e838b4">Mezzanine::XML::Node::SetValue</a>  (const Char8 *rhs)</dt>
<dd><p class="startdd">update this to make the error return code redundant and use an exception instead. </p>
<p class="enddd">Review for possiblity of buffer overflow.  </p>
</dd>
<dt><a class="anchor" id="_todo000124"></a>Class <a class="el" href="classMezzanine_1_1XML_1_1XMLStreamWrapper.xhtml">Mezzanine::XML::XMLStreamWrapper</a>  </dt>
<dd>Ideally this class should not exist, and the XML system should be made to use the resource system instead of doing its own IO.  </dd>
<dt><a class="anchor" id="_todo000008"></a>Namespace <a class="el" href="namespaceOgre.xhtml">Ogre</a>  </dt>
<dd>Make main page in documentation with wiki link and listing of required steps (build target and OS define), and dependencies required to build this.  </dd>
<dt><a class="anchor" id="_todo000056"></a>Member <a class="el" href="worldnode_8h.xhtml#a12413f846d8c043bf4a21a96be2d2832">operator&gt;&gt;</a>  (const <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">Mezzanine::XML::Node</a> &amp;OneNode, <a class="el" href="classMezzanine_1_1WorldNode.xhtml" title="This is a helper class which non-physics objects, such as lights, cameras, ribbon trails...">Mezzanine::WorldNode</a> &amp;Ev)</dt>
<dd>This doesn't account for other objects aside from world nodes to be attached. Additional checks that fetch other types by name in the case of a null pointer should be implemented. </dd>
</dl>
</div></div><!-- contents -->
<hr class="footer"/><address class="footer"><small>
Generated on Sat Sep 14 2013 01:15:20 for MezzanineEngine by&#160;<a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1</small></address>
</body>
</html>
