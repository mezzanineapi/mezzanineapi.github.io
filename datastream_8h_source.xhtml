<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>/home/Code/Mezzanine/Mezzanine/src/Resource/datastream.h Source File</title>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="DoxyStyle.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script> 
</head>
<body onload='searchBox.OnSelectItem(0);'>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;" nowrap="nowrap">
   <div id="projectname"><a href="http://blacktoppstudios.com"><img src="logogreen100pxtall.png"/></a>MezzanineEngine&#160;<span id="projectnumber">September 2, 2013</span></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_df2e1c8414b6a086be441ff04537838a.xhtml">Mezzanine</a></li><li class="navelem"><a class="el" href="dir_2b71fc9949116feedacddb93a79d832d.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_612e0ce9d3e7acd2a9c9c8b6f7ecd0b6.xhtml">Resource</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">datastream.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="datastream_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//Â© Copyright 2010 - 2013 BlackTopp Studios Inc.</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">/* This file is part of The Mezzanine Engine.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">    The Mezzanine Engine is free software: you can redistribute it and/or modify</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">    it under the terms of the GNU General Public License as published by</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">    the Free Software Foundation, either version 3 of the License, or</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">    (at your option) any later version.</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">    The Mezzanine Engine is distributed in the hope that it will be useful,</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">    but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">    GNU General Public License for more details.</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">    You should have received a copy of the GNU General Public License</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">    along with The Mezzanine Engine.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">/* The original authors have included a copy of the license specified above in the</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">   &#39;Docs&#39; folder. See &#39;gpl.txt&#39;</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">/* We welcome the use of the Mezzanine engine to anyone, including companies who wish to</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">   Build professional software and charge for their product.</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">   However there are some practical restrictions, so if your project involves</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">   any of the following you should contact us and we will try to work something</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">   out:</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">    - DRM or Copy Protection of any kind(except Copyrights)</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">    - Software Patents You Do Not Wish to Freely License</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">    - Any Kind of Linking to Non-GPL licensed Works</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">    - Are Currently In Violation of Another Copyright Holder&#39;s GPL License</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">    - If You want to change our code and not add a few hundred MB of stuff to</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">        your distribution</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment">   These and other limitations could cause serious legal problems if you ignore</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">   them, so it is best to simply contact us or the Free Software Foundation, if</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">   you have any questions.</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">   Joseph Toppi - toppij@gmail.com</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">   John Blackwood - makoenergy02@gmail.com</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#ifndef _resourcedatastream_h</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define _resourcedatastream_h</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="datatypes_8h.xhtml" title="All the definitions for datatypes as well as some basic conversion functions are defined here...">datatypes.h</a>&quot;</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="smartptr_8h.xhtml" title="This file describes and implements any pointers or typedefs to pointers that the Mezzanine uses and e...">smartptr.h</a>&quot;</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">/// @file</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">/// @brief Declaration of DataStream</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">/// @todo Investigate how required these stream implementations are</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">//#define USENEWDATASTREAM</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="keyword">namespace </span>Mezzanine</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;{</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">namespace </span>Resource</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    {</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="preprocessor">#ifdef USENEWDATASTREAM</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="preprocessor"></span><span class="comment">        /// @typedef StreamPos</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment"></span><span class="comment">        /// @brief Convenience define for the stream position datatype.</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment"></span>        <span class="keyword">typedef</span> std::streampos <a class="code" href="namespaceMezzanine_1_1Resource.xhtml#a5696fd3c8e65153dc45d33729590af31" title="Convenience define for the stream position datatype.">StreamPos</a>;<span class="comment"></span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">        /// @typedef StreamOff</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">        /// @brief Convenience define for the stream offset datatype.</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment"></span>        <span class="keyword">typedef</span> std::streamoff <a class="code" href="namespaceMezzanine_1_1Resource.xhtml#a927f01aa6d9e7751748be3b042fd54f7" title="Convenience define for the stream offset datatype.">StreamOff</a>;<span class="comment"></span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">        /// @typedef StreamSize</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">        /// @brief Convenience define for the stream size datatype.</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment"></span>        <span class="keyword">typedef</span> std::streamsize <a class="code" href="namespaceMezzanine_1_1Resource.xhtml#a57c319fb1991c37cb3ee0473ba973235" title="Convenience define for the stream size datatype.">StreamSize</a>;<span class="comment"></span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">        ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">        /// @brief</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">        /// @details</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">        ///////////////////////////////////////</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment"></span>        <span class="keyword">class </span>StreamBase</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        {</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            <span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">                /// @enum StreamFlags</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">                /// @brief This enum describes the flags that control certain behaviors of a stream.</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">                /// @details It is important to note that not all of these flags are used by all streams.</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment"></span>                <span class="keyword">enum</span> StreamFlags</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                {</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                    SF_None         = 0,                     <span class="comment">///&lt; Error/no special initialization.</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment"></span>                    SF_Read         = std::ios_base::in,     <span class="comment">///&lt; Permit read operations on the stream.</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment"></span>                    SF_Write        = std::ios_base::out,    <span class="comment">///&lt; Permit write operations on the stream.</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment"></span>                    SF_Append       = std::ios_base::app,    <span class="comment">///&lt; All write operations on the stream are done at the end of the stream.</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment"></span>                    SF_AtEnd        = std::ios_base::ate,    <span class="comment">///&lt; Moves the starting position of the stream to the end upon initialization.</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment"></span>                    SF_Binary       = std::ios_base::binary, <span class="comment">///&lt; Tell the stream that the file in question is Binary.</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment"></span>                    SF_Truncate     = std::ios_base::trunc,  <span class="comment">///&lt; Clear the contents of the file when opening.  Note that this will also create the file if it&#39;s not found.</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment"></span>                };</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">                /// @enum SeekOrigin</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">                /// @brief An enum describing which position should be considered the origin for changing the current position in a stream.</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment"></span>                <span class="keyword">enum</span> SeekOrigin</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                {</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                    SO_Beginning = std::ios_base::beg,  <span class="comment">///&lt; The beginning of the stream.</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment"></span>                    SO_Current   = std::ios_base::cur,  <span class="comment">///&lt; The current position for read/write operations in the stream.</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment"></span>                    SO_End       = std::ios_base::end   <span class="comment">///&lt; The end of the stream.</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment"></span>                };</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">                /// @brief Class constructor.</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment"></span>                StreamBase() {  }<span class="comment"></span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">                /// @brief Class destructor.</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> ~StreamBase() {  }</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">                /// @brief Gets the size of the stream.</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">                /// @return Returns the size of this stream in bytes.</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment"></span>                <a class="code" href="namespaceMezzanine_1_1Resource.xhtml#a57c319fb1991c37cb3ee0473ba973235" title="Convenience define for the stream size datatype.">StreamSize</a> GetSize() <span class="keyword">const</span> = 0;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        };<span class="comment">//StreamBase</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">        ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">        /// @brief</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">        /// @details</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">        ///////////////////////////////////////</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment"></span>        <span class="keyword">class </span>IStream : <span class="keyword">virtual</span> <span class="keyword">public</span> StreamBase</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        {</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            <span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">                /// @brief Class constructor.</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment"></span>                IStream() {  }<span class="comment"></span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">                /// @brief Class destructor.</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> ~IStream() {  }</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment">                /// @brief Reads from the stream and copies that data to a buffer.</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">                /// @param Buffer The buffer to be populated with the read data.</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment">                /// @param Size The number of bytes to read from the stream.</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment">                /// @return Returns the number of bytes successfully read.</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">size_t</span> Read(<a class="code" href="namespaceMezzanine.xhtml#ab4f5efed51a1f6fc1799c821c3daf4b7" title="A datatype to represent one character.">Char8</a>* Buffer, <a class="code" href="namespaceMezzanine_1_1Resource.xhtml#a57c319fb1991c37cb3ee0473ba973235" title="Convenience define for the stream size datatype.">StreamSize</a> Size) = 0;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">                /// @brief Sets the position of the read cursor explicitly.</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment">                /// @param Position The position to be set.</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetReadPosition(<a class="code" href="namespaceMezzanine_1_1Resource.xhtml#a5696fd3c8e65153dc45d33729590af31" title="Convenience define for the stream position datatype.">StreamPos</a> Position) = 0;<span class="comment"></span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">                /// @brief Sets the position of the read cursor.</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment">                /// @param Offset The number of bytes to move the read cursor back(if negative) or forward(if positive).</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">                /// @param Origin The starting point to be considered for the offset.</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetReadPosition(<a class="code" href="namespaceMezzanine_1_1Resource.xhtml#a927f01aa6d9e7751748be3b042fd54f7" title="Convenience define for the stream offset datatype.">StreamOff</a> Offset, SeekOrigin Origin) = 0;<span class="comment"></span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">                /// @brief Gets the current read position in this stream.</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment">                /// @return Returns a StreamPos representing the current read position.</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <a class="code" href="namespaceMezzanine_1_1Resource.xhtml#a5696fd3c8e65153dc45d33729590af31" title="Convenience define for the stream position datatype.">StreamPos</a> GetReadPosition() = 0;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        };<span class="comment">//IStream</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">        ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment">        /// @brief</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">        /// @details</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">        ///////////////////////////////////////</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment"></span>        <span class="keyword">class </span>OStream : <span class="keyword">virtual</span> <span class="keyword">public</span> StreamBase</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        {</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            <span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment">                /// @brief Class constructor.</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment"></span>                OStream() {  }<span class="comment"></span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">                /// @brief Class destructor.</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> ~OStream() {  }</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment">                /// @brief Writes data to the stream.</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment">                /// @param Buffer The memory buffer to write to this stream.</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">                /// @param Size The size of the buffer being passed in.</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">                /// @return Returns the number of bytes successfully written.</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">size_t</span> Write(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#ab4f5efed51a1f6fc1799c821c3daf4b7" title="A datatype to represent one character.">Char8</a>* Buffer, <a class="code" href="namespaceMezzanine_1_1Resource.xhtml#a57c319fb1991c37cb3ee0473ba973235" title="Convenience define for the stream size datatype.">StreamSize</a> Size) = 0;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">                /// @brief Sets the position of the write cursor explicitly.</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">                /// @param Position The position to be set.</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetWritePosition(<a class="code" href="namespaceMezzanine_1_1Resource.xhtml#a5696fd3c8e65153dc45d33729590af31" title="Convenience define for the stream position datatype.">StreamPos</a> Position) = 0;<span class="comment"></span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">                /// @brief Sets the position of the write cursor.</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment">                /// @param Offset The number of bytes to move the write cursor back(if negative) or forward(if positive).</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment">                /// @param Origin The starting point to be considered for the offset.</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetWritePosition(<a class="code" href="namespaceMezzanine_1_1Resource.xhtml#a927f01aa6d9e7751748be3b042fd54f7" title="Convenience define for the stream offset datatype.">StreamOff</a> Offset, SeekOrigin Origin) = 0;<span class="comment"></span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment">                /// @brief Gets the current write position in this stream.</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment">                /// @return Returns a StreamPos representing the current write position.</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <a class="code" href="namespaceMezzanine_1_1Resource.xhtml#a5696fd3c8e65153dc45d33729590af31" title="Convenience define for the stream position datatype.">StreamPos</a> GetWritePosition() = 0;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        };<span class="comment">//OStream</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment">        ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">        /// @brief</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">        /// @details</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">        ///////////////////////////////////////</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment"></span>        <span class="keyword">class </span>IOStream : <span class="keyword">public</span> IStream, <span class="keyword">public</span> OStream</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        {</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            <span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment">                /// @brief Class constructor.</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment"></span>                IOStream() {  }<span class="comment"></span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment">                /// @brief Class destructor.</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> ~IOStream() {  }</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment">                /// @brief Advances the position in the stream.</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment">                /// @param Count The number of bytes to skip/advance in the stream from the current position.</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">void</span> Advance(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine_1_1Resource.xhtml#a927f01aa6d9e7751748be3b042fd54f7" title="Convenience define for the stream offset datatype.">StreamOff</a> Count);<span class="comment"></span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment">                /// @brief Sets the position of the read and write cursors explicitly.</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment">                /// @param Position The position to be set.</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetStreamPosition(<a class="code" href="namespaceMezzanine_1_1Resource.xhtml#a5696fd3c8e65153dc45d33729590af31" title="Convenience define for the stream position datatype.">StreamPos</a> Position);<span class="comment"></span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment">                /// @brief Sets the position of the read and write cursors.</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment">                /// @param Offset The number of bytes to move the cursors back(if negative) or forward(if positive).</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment">                /// @param Origin The starting point to be considered for the offset.</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetStreamPosition(<a class="code" href="namespaceMezzanine_1_1Resource.xhtml#a927f01aa6d9e7751748be3b042fd54f7" title="Convenience define for the stream offset datatype.">StreamOff</a> Offset, SeekOrigin Origin);<span class="comment"></span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment">                /// @brief Gets the current position in this stream.</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment">                /// @param Read Whether or not to get the Read position.  If false this will get the write position instead.</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment">                /// @return Returns a StreamPos representing the current position specified from the beginning of the stream.</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <a class="code" href="namespaceMezzanine_1_1Resource.xhtml#a5696fd3c8e65153dc45d33729590af31" title="Convenience define for the stream position datatype.">StreamPos</a> GetStreamPosition(<span class="keywordtype">bool</span> Read = <span class="keyword">true</span>);</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        };<span class="comment">//IOStream</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment">        /// @typedef DataStream</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment">        /// @brief Convenience define for compatibility.</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment"></span>        <span class="keyword">typedef</span> IOStream DataStream;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="preprocessor">#else //USENEWDATASTREAM</span></div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="preprocessor"></span><span class="comment">        /// @typedef StreamPos</span></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment"></span><span class="comment">        /// @brief Convenience define for the stream position datatype.</span></div>
<div class="line"><a name="l00201"></a><span class="lineno"><a class="code" href="namespaceMezzanine_1_1Resource.xhtml#a5696fd3c8e65153dc45d33729590af31">  201</a></span>&#160;<span class="comment"></span>        <span class="keyword">typedef</span> <a class="code" href="namespaceMezzanine.xhtml#ac3576e52af3c62d13dde94829e0c5465" title="A datatype used to represent any integer close to.">Integer</a> <a class="code" href="namespaceMezzanine_1_1Resource.xhtml#a5696fd3c8e65153dc45d33729590af31" title="Convenience define for the stream position datatype.">StreamPos</a>;<span class="comment"></span></div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="comment">        /// @typedef StreamOff</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="comment">        /// @brief Convenience define for the stream offset datatype.</span></div>
<div class="line"><a name="l00204"></a><span class="lineno"><a class="code" href="namespaceMezzanine_1_1Resource.xhtml#a927f01aa6d9e7751748be3b042fd54f7">  204</a></span>&#160;<span class="comment"></span>        <span class="keyword">typedef</span> <a class="code" href="namespaceMezzanine.xhtml#ac3576e52af3c62d13dde94829e0c5465" title="A datatype used to represent any integer close to.">Integer</a> <a class="code" href="namespaceMezzanine_1_1Resource.xhtml#a927f01aa6d9e7751748be3b042fd54f7" title="Convenience define for the stream offset datatype.">StreamOff</a>;<span class="comment"></span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="comment">        /// @typedef StreamSize</span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="comment">        /// @brief Convenience define for the stream size datatype.</span></div>
<div class="line"><a name="l00207"></a><span class="lineno"><a class="code" href="namespaceMezzanine_1_1Resource.xhtml#a57c319fb1991c37cb3ee0473ba973235">  207</a></span>&#160;<span class="comment"></span>        <span class="keyword">typedef</span> <a class="code" href="namespaceMezzanine.xhtml#ac3576e52af3c62d13dde94829e0c5465" title="A datatype used to represent any integer close to.">Integer</a> <a class="code" href="namespaceMezzanine_1_1Resource.xhtml#a57c319fb1991c37cb3ee0473ba973235" title="Convenience define for the stream size datatype.">StreamSize</a>;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="comment">        ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="comment">        /// @brief This represents a stream to a piece of data, usually a file.</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment">        /// @details This is a base class that can be overriden to read from a variey of sources including</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="comment">        /// data in memory, and archive files.</span></div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment">        ///////////////////////////////////////</span></div>
<div class="line"><a name="l00214"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml">  214</a></span>&#160;<span class="comment"></span>        <span class="keyword">class </span><a class="code" href="crossplatformexport_8h.xhtml#a455f91aab9e6a1cf4286f5cdfa74c7bc" title="Some platforms require special decorations to denote what is exported/imported in a share library...">MEZZ_LIB</a> <a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml" title="This represents a stream to a piece of data, usually a file.">DataStream</a></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        {</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            <span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment">                /// @enum StreamFlags</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment">                /// @brief This enum describes the flags that control certain behaviors of a stream.</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment">                /// @details It is important to note that not all of these flags are used by all streams.</span></div>
<div class="line"><a name="l00220"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#aac88ac21234a2b0b34e03ec4246d356c">  220</a></span>&#160;<span class="comment"></span>                <span class="keyword">enum</span> <a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#aac88ac21234a2b0b34e03ec4246d356c" title="This enum describes the flags that control certain behaviors of a stream.">StreamFlags</a></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                {</div>
<div class="line"><a name="l00222"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#aac88ac21234a2b0b34e03ec4246d356ca7ecbd29679849b186a2921a2612ff538">  222</a></span>&#160;                    SF_None         = 0,  <span class="comment">///&lt; Error/no special initialization.</span></div>
<div class="line"><a name="l00223"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#aac88ac21234a2b0b34e03ec4246d356ca4c51ec3119786d9312a4e3ad3eaa244a">  223</a></span>&#160;<span class="comment"></span>                    SF_Read         = 1,  <span class="comment">///&lt; Permit read operations on the stream.</span></div>
<div class="line"><a name="l00224"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#aac88ac21234a2b0b34e03ec4246d356cad57bdae4c8f86ab0a1cb1e9c948cb1fb">  224</a></span>&#160;<span class="comment"></span>                    SF_Write        = 2,  <span class="comment">///&lt; Permit write operations on the stream.</span></div>
<div class="line"><a name="l00225"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#aac88ac21234a2b0b34e03ec4246d356ca7ce0428440a8cb21d26fde001df3538a">  225</a></span>&#160;<span class="comment"></span>                    SF_Append       = 4,  <span class="comment">///&lt; All write operations on the stream are done at the end of the stream.</span></div>
<div class="line"><a name="l00226"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#aac88ac21234a2b0b34e03ec4246d356ca01eb88e3cc78af2412333f9140c6e017">  226</a></span>&#160;<span class="comment"></span>                    SF_AtEnd        = 8,  <span class="comment">///&lt; Moves the starting position of the stream to the end upon initialization.</span></div>
<div class="line"><a name="l00227"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#aac88ac21234a2b0b34e03ec4246d356caa8a0fd61e54eeb1fe009e28f61a791c7">  227</a></span>&#160;<span class="comment"></span>                    SF_Binary       = 16, <span class="comment">///&lt; Tell the stream that the file in question is Binary.</span></div>
<div class="line"><a name="l00228"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#aac88ac21234a2b0b34e03ec4246d356ca1a0a24a169dd2b57cbaaa7b908c9285c">  228</a></span>&#160;<span class="comment"></span>                    SF_Truncate     = 32  <span class="comment">///&lt; Clear the contents of the file when opening.  Note that this will also create the file if it&#39;s not found.</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment"></span>                };</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="comment">                /// @enum SeekOrigin</span></div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="comment">                /// @brief An enum describing which position should be considered the origin for changing the current position in a stream.</span></div>
<div class="line"><a name="l00233"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#a7a910c82448c8999065a1159a08a5a03">  233</a></span>&#160;<span class="comment"></span>                <span class="keyword">enum</span> <a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#a7a910c82448c8999065a1159a08a5a03" title="An enum describing which position should be considered the origin for changing the current position i...">SeekOrigin</a></div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                {</div>
<div class="line"><a name="l00235"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#a7a910c82448c8999065a1159a08a5a03a199b4cbe34d3c1fdafaef7e0b7cf83be">  235</a></span>&#160;                    SO_Beginning = std::ios_base::beg,  <span class="comment">///&lt; The beginning of the stream.</span></div>
<div class="line"><a name="l00236"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#a7a910c82448c8999065a1159a08a5a03ac5458c1228f7807ef002fcc892564114">  236</a></span>&#160;<span class="comment"></span>                    SO_Current   = std::ios_base::cur,  <span class="comment">///&lt; The current position for read/write operations in the stream.</span></div>
<div class="line"><a name="l00237"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#a7a910c82448c8999065a1159a08a5a03abb915dd0e79f2cd79917d46629052ad8">  237</a></span>&#160;<span class="comment"></span>                    SO_End       = std::ios_base::end   <span class="comment">///&lt; The end of the stream.</span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="comment"></span>                };</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;            <span class="keyword">protected</span>:<span class="comment"></span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="comment">                /// @brief The type of access this stream has to the resource.</span></div>
<div class="line"><a name="l00241"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#a0c9d42033c60b2d69e3e6d4f143f0588">  241</a></span>&#160;<span class="comment"></span>                <a class="code" href="namespaceMezzanine.xhtml#a1b6c09063432c7ddd87011c88306c767" title="An 16-bit unsigned integer.">UInt16</a> <a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#a0c9d42033c60b2d69e3e6d4f143f0588" title="The type of access this stream has to the resource.">SFlags</a>;<span class="comment"></span></div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="comment">                /// @brief The size of the stream.</span></div>
<div class="line"><a name="l00243"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#a9da6fdf47ede040fac9f69b5550e3c5b">  243</a></span>&#160;<span class="comment"></span>                <a class="code" href="namespaceMezzanine_1_1Resource.xhtml#a57c319fb1991c37cb3ee0473ba973235" title="Convenience define for the stream size datatype.">StreamSize</a> <a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#a9da6fdf47ede040fac9f69b5550e3c5b" title="The size of the stream.">Size</a>;</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;            <span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="comment">                /// @brief Class constructor.</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="comment">                /// @param Flags The flags to use when initializing the stream.</span></div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="comment"></span>                <a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml" title="This represents a stream to a piece of data, usually a file.">DataStream</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#a1b6c09063432c7ddd87011c88306c767" title="An 16-bit unsigned integer.">UInt16</a> Flags = SF_Read);<span class="comment"></span></div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="comment">                /// @brief Class destructor.</span></div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> ~<a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml" title="This represents a stream to a piece of data, usually a file.">DataStream</a>();</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="comment">                ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="comment"></span>                <span class="comment">// Utility</span></div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="comment">                /// @brief Gets the size of the stream.</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="comment">                /// @return Returns the size of this stream in bytes.</span></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <a class="code" href="namespaceMezzanine_1_1Resource.xhtml#a57c319fb1991c37cb3ee0473ba973235" title="Convenience define for the stream size datatype.">StreamSize</a> GetSize() <span class="keyword">const</span>;<span class="comment"></span></div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="comment">                /// @brief Gets whether this stream can be read.</span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="comment">                /// @return Returns true if this stream is in reading mode, false otherwise.</span></div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">bool</span> IsReadable() <span class="keyword">const</span>;<span class="comment"></span></div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="comment">                /// @brief Gets whether this stream can be written to.</span></div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="comment">                /// @return Returns true if this stream is in writing mode, false otherwise.</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">bool</span> IsWriteable() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="comment">                ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="comment"></span>                <span class="comment">// Stream Access and Manipulation</span></div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="comment">                /// @brief Reads data from the stream, copying to a buffer.</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="comment">                /// @param Buffer The buffer to place data from the stream.</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="comment">                /// @param Count The number of bytes to read from the stream.</span></div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="comment">                /// @return Returns the number of bytes read.</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">size_t</span> Read(<span class="keywordtype">void</span>* Buffer, <span class="keyword">const</span> <span class="keywordtype">size_t</span>&amp; Count) = 0;<span class="comment"></span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="comment">                /// @brief Writes data from the stream, copying from the provided buffer.</span></div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="comment">                /// @param Buffer The buffer of data to be written.</span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="comment">                /// @param Count The number of bytes to write from the buffer to the stream.</span></div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="comment">                /// @return Returns the number of bytes written.</span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">size_t</span> Write(<span class="keyword">const</span> <span class="keywordtype">void</span>* Buffer, <span class="keyword">const</span> <span class="keywordtype">size_t</span>&amp; Count) = 0;</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="comment">                /// @brief Advances the position in the stream.</span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="comment">                /// @param Count The number of bytes to skip/advance in the stream from the current position.</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">void</span> Advance(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine_1_1Resource.xhtml#a927f01aa6d9e7751748be3b042fd54f7" title="Convenience define for the stream offset datatype.">StreamOff</a> Count) = 0;<span class="comment"></span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="comment">                /// @brief Sets the position of the read and write cursors explicitly.</span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="comment">                /// @param Position The position to be set.</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetStreamPosition(<a class="code" href="namespaceMezzanine_1_1Resource.xhtml#a5696fd3c8e65153dc45d33729590af31" title="Convenience define for the stream position datatype.">StreamPos</a> Position) = 0;<span class="comment"></span></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="comment">                /// @brief Sets the position of the read and write cursors.</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="comment">                /// @param Offset The number of bytes to move the cursors back(if negative) or forward(if positive).</span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="comment">                /// @param Origin The starting point to be considered for the offset.</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetStreamPosition(<a class="code" href="namespaceMezzanine_1_1Resource.xhtml#a927f01aa6d9e7751748be3b042fd54f7" title="Convenience define for the stream offset datatype.">StreamOff</a> Offset, <a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#a7a910c82448c8999065a1159a08a5a03" title="An enum describing which position should be considered the origin for changing the current position i...">SeekOrigin</a> Origin) = 0;<span class="comment"></span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="comment">                /// @brief Gets the current position in this stream.</span></div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="comment">                /// @param Read Whether or not to get the Read position.  If false this will get the write position instead.</span></div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="comment">                /// @return Returns a StreamPos representing the current position specified from the beginning of the stream.</span></div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <a class="code" href="namespaceMezzanine_1_1Resource.xhtml#a5696fd3c8e65153dc45d33729590af31" title="Convenience define for the stream position datatype.">StreamPos</a> GetStreamPosition(<span class="keywordtype">bool</span> Read = <span class="keyword">true</span>) = 0;<span class="comment"></span></div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="comment">                /// @brief Gets whether or not the current position is at the end of the file/stream.</span></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="comment">                /// @return Returns true if the current position has reached the end of the stream, false otherwise.</span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">bool</span> EoF() <span class="keyword">const</span> = 0;<span class="comment"></span></div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="comment">                /// @brief Closes the stream to the resource.</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">void</span> Close() = 0;</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="comment">                ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="comment"></span>                <span class="comment">// Formatting Methods</span></div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="comment">                /// @brief Gets the contents of the stream as a string.</span></div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="comment">                /// @return Returns a string with the contents of the stream.</span></div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a> GetAsString();<span class="comment"></span></div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="comment">                /// @brief Reads a single line from a string.</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="comment">                /// @param Buffer Pointer to the buffer to copy to.</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="comment">                /// @param MaxCount The maximum number of bytes to read.  Usually you want this to be your buffer size.</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="comment">                /// @param Delim The character that marks the end of a line.</span></div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="comment">                /// @return Returns the number of bytes actually read, not including the Delimiter.</span></div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">size_t</span> ReadLine(<a class="code" href="namespaceMezzanine.xhtml#ab4f5efed51a1f6fc1799c821c3daf4b7" title="A datatype to represent one character.">Char8</a>* Buffer, <span class="keywordtype">size_t</span> MaxCount, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; Delim = <span class="stringliteral">&quot;\n&quot;</span>);<span class="comment"></span></div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="comment">                /// @brief Gets the contents of the current line in the stream.</span></div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="comment">                /// @param Trim Whether or not to trim whitespaces on both sides of the string.</span></div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="comment">                /// @return Returns a string containing characters from the current position in the stream to the end of the line.</span></div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a> GetLine(<span class="keywordtype">bool</span> Trim = <span class="keyword">true</span>);<span class="comment"></span></div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="comment">                /// @brief Moves the current position to the start of the next line.</span></div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="comment">                /// @param Delim The character that marks the end of a line.</span></div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="comment">                /// @return Returns the number of bytes skipped.</span></div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">size_t</span> SkipLine(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; Delim = <span class="stringliteral">&quot;\n&quot;</span>);</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        };<span class="comment">//DataStream</span></div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="preprocessor">#endif //USENEWDATASTREAM</span></div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="preprocessor"></span><span class="comment">        /// @typedef DataStreamPtr</span></div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="comment"></span><span class="comment">        /// @brief This is a convenience type for a data stream in a counted pointer.</span></div>
<div class="line"><a name="l00322"></a><span class="lineno"><a class="code" href="namespaceMezzanine_1_1Resource.xhtml#a62a315666b8e56a64640c813ac400b52">  322</a></span>&#160;<span class="comment"></span>        <span class="keyword">typedef</span> <a class="code" href="classMezzanine_1_1CountedPtr.xhtml" title="A simple reference counting pointer.">CountedPtr&lt;DataStream&gt;</a> <a class="code" href="namespaceMezzanine_1_1Resource.xhtml#a62a315666b8e56a64640c813ac400b52" title="This is a convenience type for a data stream in a counted pointer.">DataStreamPtr</a>;</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    }<span class="comment">//Resource</span></div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;}<span class="comment">//Mezzanine</span></div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="preprocessor">#endif</span></div>
</div><!-- fragment --></div><!-- contents -->
<hr class="footer"/><address class="footer"><small>
Generated on Fri Sep 13 2013 01:59:13 for MezzanineEngine by&#160;<a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1</small></address>
</body>
</html>
