<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>/home/Code/Mezzanine/Mezzanine/src/Physics/collisionshapemanager.cpp Source File</title>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="DoxyStyle.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script> 
</head>
<body onload='searchBox.OnSelectItem(0);'>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;" nowrap="nowrap">
   <div id="projectname"><a href="http://blacktoppstudios.com"><img src="logogreen100pxtall.png"/></a>MezzanineEngine&#160;<span id="projectnumber">September14,2013</span></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_df2e1c8414b6a086be441ff04537838a.xhtml">Mezzanine</a></li><li class="navelem"><a class="el" href="dir_2b71fc9949116feedacddb93a79d832d.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_61c0ec937c468b49b332752e9f643e74.xhtml">Physics</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">collisionshapemanager.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//Â© Copyright 2010 - 2013 BlackTopp Studios Inc.</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">/* This file is part of The Mezzanine Engine.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">    The Mezzanine Engine is free software: you can redistribute it and/or modify</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">    it under the terms of the GNU General Public License as published by</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">    the Free Software Foundation, either version 3 of the License, or</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">    (at your option) any later version.</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">    The Mezzanine Engine is distributed in the hope that it will be useful,</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">    but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">    GNU General Public License for more details.</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">    You should have received a copy of the GNU General Public License</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">    along with The Mezzanine Engine.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">/* The original authors have included a copy of the license specified above in the</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">   &#39;Docs&#39; folder. See &#39;gpl.txt&#39;</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">/* We welcome the use of the Mezzanine engine to anyone, including companies who wish to</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">   Build professional software and charge for their product.</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">   However there are some practical restrictions, so if your project involves</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">   any of the following you should contact us and we will try to work something</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">   out:</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">    - DRM or Copy Protection of any kind(except Copyrights)</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">    - Software Patents You Do Not Wish to Freely License</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">    - Any Kind of Linking to Non-GPL licensed Works</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">    - Are Currently In Violation of Another Copyright Holder&#39;s GPL License</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">    - If You want to change our code and not add a few hundred MB of stuff to</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">        your distribution</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment">   These and other limitations could cause serious legal problems if you ignore</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">   them, so it is best to simply contact us or the Free Software Foundation, if</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">   you have any questions.</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">   Joseph Toppi - toppij@gmail.com</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">   John Blackwood - makoenergy02@gmail.com</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#ifndef _collisionshapemanager_cpp</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define _collisionshapemanager_cpp</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">#include &quot;Physics/collisionshapemanager.h&quot;</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor">#include &quot;Graphics/mesh.h&quot;</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#include &quot;meshmanager.h&quot;</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="resourcemanager_8h.xhtml" title="The defintion of the Resource Manager.">resourcemanager.h</a>&quot;</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="preprocessor">#include &quot;Physics/collisionshape.h&quot;</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="preprocessor">#include &quot;Physics/boxcollisionshape.h&quot;</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="preprocessor">#include &quot;Physics/capsulecollisionshape.h&quot;</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="preprocessor">#include &quot;Physics/conecollisionshape.h&quot;</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="preprocessor">#include &quot;Physics/convexhullcollisionshape.h&quot;</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="preprocessor">#include &quot;Physics/cylindercollisionshape.h&quot;</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="preprocessor">#include &quot;Physics/multispherecollisionshape.h&quot;</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="preprocessor">#include &quot;Physics/spherecollisionshape.h&quot;</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="preprocessor">#include &quot;Physics/dynamicmeshcollisionshape.h&quot;</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="preprocessor">#include &quot;Physics/heightfieldcollisionshape.h&quot;</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="preprocessor">#include &quot;Physics/planecollisionshape.h&quot;</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="preprocessor">#include &quot;Physics/actorsoftcollisionshape.h&quot;</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="preprocessor">#include &quot;Physics/staticmeshcollisionshape.h&quot;</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="preprocessor">#include &quot;Physics/compoundcollisionshape.h&quot;</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">// For logging</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="preprocessor">#include &quot;stringtool.h&quot;</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="preprocessor">#include &quot;entresol.h&quot;</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="preprocessor">#include &lt;Ogre.h&gt;</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="preprocessor">#include &quot;btBulletDynamicsCommon.h&quot;</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="preprocessor">#include &quot;BulletSoftBody/btSoftRigidDynamicsWorld.h&quot;</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="preprocessor">#include &quot;BulletCollision/CollisionShapes/btShapeHull.h&quot;</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="preprocessor">#include &quot;BulletCollision/Gimpact/btGImpactShape.h&quot;</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="preprocessor">#include &quot;ConvexBuilder.h&quot;</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="preprocessor">#include &quot;Internal/decompinterface.h.cpp&quot;</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="preprocessor">#include &lt;btBulletWorldImporter.h&gt;</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="preprocessor">#include &lt;fstream&gt;</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="keyword">namespace </span>Mezzanine</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;{</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keyword">namespace </span>Physics</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    {</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="keyword">template</span>&lt;&gt; CollisionShapeManager* Singleton&lt;CollisionShapeManager&gt;::SingletonPtr = NULL;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div>
<div class="line"><a name="l00084"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a18c5816b173e213e85c4753b2c967906">   84</a></span>&#160;        <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a18c5816b173e213e85c4753b2c967906" title="Class constructor.">CollisionShapeManager::CollisionShapeManager</a>()</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        {</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        }</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div>
<div class="line"><a name="l00088"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a57cdf6ed99dd3a976973abded18990e6">   88</a></span>&#160;        <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a18c5816b173e213e85c4753b2c967906" title="Class constructor.">CollisionShapeManager::CollisionShapeManager</a>(<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">XML::Node</a>&amp; XMLNode)</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        {<span class="comment"></span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">            /// @todo This class currently doesn&#39;t initialize anything from XML, if that changes this constructor needs to be expanded.</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment"></span>        }</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div>
<div class="line"><a name="l00093"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a6485a4bd9277e7f8f2bf60c2db1c4e22">   93</a></span>&#160;        <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a6485a4bd9277e7f8f2bf60c2db1c4e22" title="Class destructor.">CollisionShapeManager::~CollisionShapeManager</a>()</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        {</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#af76b39c1fa354ad0aa8eb750eab2ea89" title="Removes this manager from any necessary configuration so it can be safely disposed of...">Deinitialize</a>();</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a87e180fab5a4be77dd6413cf3e4bd463" title="Removes all shapes from the manager and then deletes them.">DestroyAllShapes</a>();</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        }</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div>
<div class="line"><a name="l00099"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#aeb6fa2724b3272a21632123ffd88c43d">   99</a></span>&#160;        btTriangleMesh* <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#aeb6fa2724b3272a21632123ffd88c43d" title="Creates a TriMesh to be used in TriMesh based collision shapes.">CollisionShapeManager::CreateBulletTrimesh</a>(<a class="code" href="classMezzanine_1_1Graphics_1_1Mesh.xhtml" title="This class is used to check and modify the properties of a graphics mesh.">Graphics::Mesh</a>* ObjectMesh, <span class="keywordtype">bool</span> UseAllSubmeshes)</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        {</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            Ogre::MeshPtr myMesh = ObjectMesh-&gt;<a class="code" href="classMezzanine_1_1Graphics_1_1Mesh.xhtml#a68f0b5132e8b47c5aa8e8b7599c797f7" title="Gets the internal Mesh pointer.">_GetInternalMesh</a>();</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            Ogre::SubMesh* subMesh = NULL;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            Ogre::IndexData*  IndexData = NULL;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            Ogre::VertexData* VertexData = NULL;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <span class="keywordtype">bool</span> use32bitindexes = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> triCount = 0;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> vCount = 0;</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> iCount = 0;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="Whole is an unsigned integer, it will be at least 32bits in size.">Whole</a> VertPrevSize = 0;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="Whole is an unsigned integer, it will be at least 32bits in size.">Whole</a> IndiPrevSize = 0;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            Ogre::Vector3* vertices = NULL;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>* indices = NULL;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            <span class="keywordtype">bool</span> SharedVerts = myMesh-&gt;getSubMesh(0)-&gt;useSharedVertices;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            <span class="keywordflow">if</span>(UseAllSubmeshes)</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            {</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                <span class="keywordflow">for</span>( <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="Whole is an unsigned integer, it will be at least 32bits in size.">Whole</a> X = 0 ; X &lt; myMesh-&gt;getNumSubMeshes() ; X++ )</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                {</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                    vCount += SharedVerts ? myMesh-&gt;sharedVertexData-&gt;vertexCount : myMesh-&gt;getSubMesh(X)-&gt;vertexData-&gt;vertexCount;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                    iCount += myMesh-&gt;getSubMesh(X)-&gt;indexData-&gt;indexCount;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                }</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                vCount += SharedVerts ? myMesh-&gt;sharedVertexData-&gt;vertexCount : myMesh-&gt;getSubMesh(0)-&gt;vertexData-&gt;vertexCount;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                iCount += myMesh-&gt;getSubMesh(0)-&gt;indexData-&gt;indexCount;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            }</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            vertices = <span class="keyword">new</span> Ogre::Vector3[vCount];</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            indices  = <span class="keyword">new</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>[iCount];</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            <span class="comment">// Get the submesh and associated data</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            <span class="keywordflow">for</span>( <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <span class="keywordtype">int</span> SubMeshIndex = 0 ; SubMeshIndex &lt; myMesh-&gt;getNumSubMeshes() ; SubMeshIndex++ )</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            {</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                <span class="keywordflow">if</span>( !UseAllSubmeshes &amp;&amp; ( SubMeshIndex &gt; 0 ) )</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                <span class="keywordflow">if</span>( SharedVerts &amp;&amp; (SubMeshIndex &gt; 0) )</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                subMesh = myMesh-&gt;getSubMesh(SubMeshIndex);</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                IndexData = subMesh-&gt;indexData;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                VertexData = SharedVerts ? myMesh-&gt;sharedVertexData : myMesh-&gt;getSubMesh(SubMeshIndex)-&gt;vertexData;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                <span class="comment">// Get the position element</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                <span class="keyword">const</span> Ogre::VertexElement* posElem = VertexData-&gt;vertexDeclaration-&gt;findElementBySemantic(Ogre::VES_POSITION);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                <span class="comment">// Get a pointer to the vertex buffer</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                Ogre::HardwareVertexBufferSharedPtr vBuffer = VertexData-&gt;vertexBufferBinding-&gt;getBuffer(posElem-&gt;getSource());</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                <span class="comment">// Get a pointer to the index buffer</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                Ogre::HardwareIndexBufferSharedPtr iBuffer = IndexData-&gt;indexBuffer;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                <span class="comment">// Get the number of triangles</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                triCount += ( IndexData-&gt;indexCount / 3 );</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                <span class="comment">// Lock the vertex buffer (READ ONLY)</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* vertex = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(vBuffer-&gt;lock(Ogre::HardwareBuffer::HBL_READ_ONLY));</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                <span class="keywordtype">float</span>* pReal = NULL;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 0; j &lt; VertexData-&gt;vertexCount; ++j, vertex += vBuffer-&gt;getVertexSize() )</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                {</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                    posElem-&gt;baseVertexPointerToElement(vertex, &amp;pReal);</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                    Ogre::Vector3 pt(pReal[0], pReal[1], pReal[2]);</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                    vertices[j + VertPrevSize] = pt;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                }</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                vBuffer-&gt;unlock();</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                <span class="keywordtype">size_t</span> index_offset = 0;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                use32bitindexes = (iBuffer-&gt;getType() == Ogre::HardwareIndexBuffer::IT_32BIT);</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                <span class="comment">// Lock the index buffer (READ ONLY)</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>* pLong = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>*<span class="keyword">&gt;</span>(iBuffer-&gt;lock(Ogre::HardwareBuffer::HBL_READ_ONLY));</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span>* pShort = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">short</span>*<span class="keyword">&gt;</span>(pLong);</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                <span class="keywordflow">if</span>( use32bitindexes )</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                {</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> k = 0; k &lt; triCount*3; ++k)</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                    {</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                        indices[index_offset+IndiPrevSize] = pLong[k];</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                        index_offset++;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                    }</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> k = 0; k &lt; triCount*3; ++k)</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                    {</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                        indices[index_offset+IndiPrevSize] = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">long</span><span class="keyword">&gt;</span>(pShort[k]);</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                        index_offset++;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                    }</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                }</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                iBuffer-&gt;unlock();</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                VertPrevSize+=VertexData-&gt;vertexCount;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                IndiPrevSize+=IndexData-&gt;indexCount;</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            }</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            <span class="comment">// We now have vertices and indices ready to go</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            <span class="comment">// The Bullet triangle mesh</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            btTriangleMesh* trimesh = <span class="keyword">new</span> btTriangleMesh(use32bitindexes);</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            <span class="comment">// Setup the tri mesh</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            btVector3 vert0, vert1, vert2;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            <span class="keywordtype">int</span> i=0;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            <span class="comment">// For every triangle</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y=0; y&lt;triCount; y++)</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            {</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                <span class="comment">// Set each vertex</span></div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                vert0.setValue(vertices[indices[i]].x, vertices[indices[i]].y, vertices[indices[i]].z);</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                vert1.setValue(vertices[indices[i+1]].x, vertices[indices[i+1]].y, vertices[indices[i+1]].z);</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                vert2.setValue(vertices[indices[i+2]].x, vertices[indices[i+2]].y, vertices[indices[i+2]].z);</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                <span class="comment">// Add it into the trimesh</span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                trimesh-&gt;addTriangle(vert0, vert1, vert2);</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                <span class="comment">// Increase index count</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                i+=3;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            }</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            <span class="keyword">delete</span>[] vertices;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            <span class="keyword">delete</span>[] indices;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            <span class="keywordflow">return</span> trimesh;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        }</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div>
<div class="line"><a name="l00217"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#af6db1dfa92bf93bd610ee4a4942a0d8f">  217</a></span>&#160;        <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml" title="This is the base class for all collision shapes.">CollisionShape</a>* <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#af6db1dfa92bf93bd610ee4a4942a0d8f" title="Creates a wrapper for an internal bullet shape.">CollisionShapeManager::WrapShape</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; Name, btCollisionShape* InternalShape)</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        {</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            <span class="keywordflow">switch</span>(InternalShape-&gt;getShapeType())</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            {</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                <span class="keywordflow">case</span> BOX_SHAPE_PROXYTYPE:</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                {</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                    <a class="code" href="classMezzanine_1_1Physics_1_1BoxCollisionShape.xhtml" title="A box physics shape.">BoxCollisionShape</a>* BoxShape = <span class="keyword">new</span> <a class="code" href="classMezzanine_1_1Physics_1_1BoxCollisionShape.xhtml" title="A box physics shape.">BoxCollisionShape</a>(Name,(btBoxShape*)InternalShape);</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                    <span class="keywordflow">return</span> BoxShape;</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                }</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                <span class="keywordflow">case</span> CAPSULE_SHAPE_PROXYTYPE:</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                {</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                    <a class="code" href="classMezzanine_1_1Physics_1_1CapsuleCollisionShape.xhtml" title="A capsule physics shape.">CapsuleCollisionShape</a>* CapsuleShape = <span class="keyword">new</span> <a class="code" href="classMezzanine_1_1Physics_1_1CapsuleCollisionShape.xhtml" title="A capsule physics shape.">CapsuleCollisionShape</a>(Name,(btCapsuleShape*)InternalShape);</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                    <span class="keywordflow">return</span> CapsuleShape;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                }</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                <span class="keywordflow">case</span> CONE_SHAPE_PROXYTYPE:</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                {</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                    <a class="code" href="classMezzanine_1_1Physics_1_1ConeCollisionShape.xhtml" title="A cone physics shape.">ConeCollisionShape</a>* ConeShape = <span class="keyword">new</span> <a class="code" href="classMezzanine_1_1Physics_1_1ConeCollisionShape.xhtml" title="A cone physics shape.">ConeCollisionShape</a>(Name,(btConeShape*)InternalShape);</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                    <span class="keywordflow">return</span> ConeShape;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                }</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                <span class="keywordflow">case</span> CONVEX_HULL_SHAPE_PROXYTYPE:</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                {</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                    <a class="code" href="classMezzanine_1_1Physics_1_1ConvexHullCollisionShape.xhtml" title="A simple convex shape built from a low number of points in local space.">ConvexHullCollisionShape</a>* ConvexHullShape = <span class="keyword">new</span> <a class="code" href="classMezzanine_1_1Physics_1_1ConvexHullCollisionShape.xhtml" title="A simple convex shape built from a low number of points in local space.">ConvexHullCollisionShape</a>(Name,(btConvexHullShape*)InternalShape);</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                    <span class="keywordflow">return</span> ConvexHullShape;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                }</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                <span class="keywordflow">case</span> CYLINDER_SHAPE_PROXYTYPE:</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                {</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                    <a class="code" href="classMezzanine_1_1Physics_1_1CylinderCollisionShape.xhtml" title="A cylinder physics shape.">CylinderCollisionShape</a>* CylinderShape = <span class="keyword">new</span> <a class="code" href="classMezzanine_1_1Physics_1_1CylinderCollisionShape.xhtml" title="A cylinder physics shape.">CylinderCollisionShape</a>(Name,(btCylinderShape*)InternalShape);</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                    <span class="keywordflow">return</span> CylinderShape;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                }</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                <span class="keywordflow">case</span> MULTI_SPHERE_SHAPE_PROXYTYPE:</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                {</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                    <a class="code" href="classMezzanine_1_1Physics_1_1MultiSphereCollisionShape.xhtml" title="A physics shape comprised of multiple sphere&#39;s placed in local space.">MultiSphereCollisionShape</a>* MultiSphereShape = <span class="keyword">new</span> <a class="code" href="classMezzanine_1_1Physics_1_1MultiSphereCollisionShape.xhtml" title="A physics shape comprised of multiple sphere&#39;s placed in local space.">MultiSphereCollisionShape</a>(Name,(btMultiSphereShape*)InternalShape);</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                    <span class="keywordflow">return</span> MultiSphereShape;</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                }</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                <span class="keywordflow">case</span> SPHERE_SHAPE_PROXYTYPE:</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                {</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                    <a class="code" href="classMezzanine_1_1Physics_1_1SphereCollisionShape.xhtml" title="A sphere physics shape.">SphereCollisionShape</a>* SphereShape = <span class="keyword">new</span> <a class="code" href="classMezzanine_1_1Physics_1_1SphereCollisionShape.xhtml" title="A sphere physics shape.">SphereCollisionShape</a>(Name,(btSphereShape*)InternalShape);</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                    <span class="keywordflow">return</span> SphereShape;</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                }</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                <span class="keywordflow">case</span> GIMPACT_SHAPE_PROXYTYPE:</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                {</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                    <a class="code" href="classMezzanine_1_1Physics_1_1DynamicMeshCollisionShape.xhtml" title="A triangle mesh collsion shape based on a graphics mesh.">DynamicMeshCollisionShape</a>* GImpactShape = <span class="keyword">new</span> <a class="code" href="classMezzanine_1_1Physics_1_1DynamicMeshCollisionShape.xhtml" title="A triangle mesh collsion shape based on a graphics mesh.">DynamicMeshCollisionShape</a>(Name,(btGImpactMeshShape*)InternalShape);</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                    <span class="keywordflow">return</span> GImpactShape;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                }</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                <span class="keywordflow">case</span> TERRAIN_SHAPE_PROXYTYPE:</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                {</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                    <a class="code" href="classMezzanine_1_1Physics_1_1HeightfieldCollisionShape.xhtml" title="A series of values that store hieght in a grid like fashion.">HeightfieldCollisionShape</a>* HeightFieldShape = <span class="keyword">new</span> <a class="code" href="classMezzanine_1_1Physics_1_1HeightfieldCollisionShape.xhtml" title="A series of values that store hieght in a grid like fashion.">HeightfieldCollisionShape</a>(Name,(btHeightfieldTerrainShape*)InternalShape);</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                    <span class="keywordflow">return</span> HeightFieldShape;</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                }</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                <span class="keywordflow">case</span> STATIC_PLANE_PROXYTYPE:</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                {</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                    <a class="code" href="classMezzanine_1_1Physics_1_1PlaneCollisionShape.xhtml" title="A Flat wall/floor of limitless size.">PlaneCollisionShape</a>* PlaneShape = <span class="keyword">new</span> <a class="code" href="classMezzanine_1_1Physics_1_1PlaneCollisionShape.xhtml" title="A Flat wall/floor of limitless size.">PlaneCollisionShape</a>(Name,(btStaticPlaneShape*)InternalShape);</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                    <span class="keywordflow">return</span> PlaneShape;</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                }</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                <span class="keywordflow">case</span> SOFTBODY_SHAPE_PROXYTYPE:</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                {</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                    <a class="code" href="classMezzanine_1_1Physics_1_1ActorSoftCollisionShape.xhtml" title="A collision shape for soft actors.">ActorSoftCollisionShape</a>* SoftBodyShape = <span class="keyword">new</span> <a class="code" href="classMezzanine_1_1Physics_1_1ActorSoftCollisionShape.xhtml" title="A collision shape for soft actors.">ActorSoftCollisionShape</a>(Name,(btSoftBodyCollisionShape*)InternalShape);</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                    <span class="keywordflow">return</span> SoftBodyShape;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                }</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                <span class="keywordflow">case</span> TRIANGLE_MESH_SHAPE_PROXYTYPE:</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                {</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                    <a class="code" href="classMezzanine_1_1Physics_1_1StaticMeshCollisionShape.xhtml" title="A triangle mesh collsion shape based on a graphics mesh.">StaticMeshCollisionShape</a>* BvhShape = <span class="keyword">new</span> <a class="code" href="classMezzanine_1_1Physics_1_1StaticMeshCollisionShape.xhtml" title="A triangle mesh collsion shape based on a graphics mesh.">StaticMeshCollisionShape</a>(Name,(btBvhTriangleMeshShape*)InternalShape);</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                    <span class="keywordflow">return</span> BvhShape;</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                }</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                <span class="keywordflow">case</span> COMPOUND_SHAPE_PROXYTYPE:</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                {</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                    <a class="code" href="classMezzanine_1_1Physics_1_1CompoundCollisionShape.xhtml" title="A collision shape composed of many other collision shapes placed and oriented in local space...">CompoundCollisionShape</a>* Compound = <span class="keyword">new</span> <a class="code" href="classMezzanine_1_1Physics_1_1CompoundCollisionShape.xhtml" title="A collision shape composed of many other collision shapes placed and oriented in local space...">CompoundCollisionShape</a>(Name,(btCompoundShape*)InternalShape);</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                    <span class="keywordflow">return</span> Compound;</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                }</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                {</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                    MEZZ_EXCEPTION(<a class="code" href="classMezzanine_1_1Exception.xhtml#a4ee7e60ac53783c4975240c57071d420a6cfae51393b501912c32ea0e9b6374c8" title="When used a instance of NotImplementedException is thrown. Thrown when we just have not coded a thing...">Exception::NOT_IMPLEMENTED_EXCEPTION</a>,<span class="stringliteral">&quot;Attempting to load an unsupported/unwrapped Collision Shape in CompoundShapeManager::LoadAllShapesFromFile.&quot;</span>);</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                }<span class="comment">//default</span></div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;            }</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        }</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="comment">        ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="comment"></span>        <span class="comment">// Generic Shape Management</span></div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div>
<div class="line"><a name="l00309"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a1ce4f783425d15e198244eef37706578">  309</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a1ce4f783425d15e198244eef37706578" title="Stores a pre-made shape in this manager.">CollisionShapeManager::StoreShape</a>(<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml" title="This is the base class for all collision shapes.">CollisionShape</a>* Shape)</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        {</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;            <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ad2a58df4435c918620d5b8482e222412" title="Map Iterator type for CollisionShape instances stored by this class.">ShapeMapIterator</a> CS = this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ac143534055caa5d8e244a76cfadb4b86" title="This stores the names and collision Shapes.">CollisionShapes</a>.find(Shape-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a1a4a30c6523dc87fee9f8c33f9a7dbfa" title="Gets the name of this shape.">GetName</a>());</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;            <span class="keywordflow">if</span>(CS != this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ac143534055caa5d8e244a76cfadb4b86" title="This stores the names and collision Shapes.">CollisionShapes</a>.end())</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;            {</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                <span class="keywordflow">if</span>((*CS).second != Shape)</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                {</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                    MEZZ_EXCEPTION(<a class="code" href="classMezzanine_1_1Exception.xhtml#a4ee7e60ac53783c4975240c57071d420ac117a06575fdad0414793ee3ca118d9f" title="When used a instance of InstanceIdentityDuplicateException is thrown. Thrown when duplicates of teh s...">Exception::II_DUPLICATE_IDENTITY_EXCEPTION</a>,<span class="stringliteral">&quot;Name of Collision Shape already exists on another object.  Names should be Unique.&quot;</span>);</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                }</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;            }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ac143534055caa5d8e244a76cfadb4b86" title="This stores the names and collision Shapes.">CollisionShapes</a>[Shape-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a1a4a30c6523dc87fee9f8c33f9a7dbfa" title="Gets the name of this shape.">GetName</a>()] = Shape;</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;            }</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        }</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;</div>
<div class="line"><a name="l00323"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a03b8b73b813f4e8db989650a7c48a830">  323</a></span>&#160;        <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml" title="This is the base class for all collision shapes.">CollisionShape</a>* <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a03b8b73b813f4e8db989650a7c48a830" title="Gets a shape already stored in this manager.">CollisionShapeManager::GetShape</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; Name)</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        {</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;            <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ad2a58df4435c918620d5b8482e222412" title="Map Iterator type for CollisionShape instances stored by this class.">ShapeMapIterator</a> CS = this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ac143534055caa5d8e244a76cfadb4b86" title="This stores the names and collision Shapes.">CollisionShapes</a>.find(Name);</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;            <span class="keywordflow">if</span>(CS == this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ac143534055caa5d8e244a76cfadb4b86" title="This stores the names and collision Shapes.">CollisionShapes</a>.end()) <span class="keywordflow">return</span> NULL;</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;            <span class="keywordflow">else</span> <span class="keywordflow">return</span> (*CS).second;</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        }</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;</div>
<div class="line"><a name="l00330"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ac1b3c733fc5cc3a552c3bb804d4bed65">  330</a></span>&#160;        <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="Whole is an unsigned integer, it will be at least 32bits in size.">Whole</a> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ac1b3c733fc5cc3a552c3bb804d4bed65" title="Gets the number of stored shapes in this manager.">CollisionShapeManager::GetNumStoredShapes</a>()</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        {</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;            <span class="keywordflow">return</span> this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ac143534055caa5d8e244a76cfadb4b86" title="This stores the names and collision Shapes.">CollisionShapes</a>.size();</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        }</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;</div>
<div class="line"><a name="l00335"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a34cd8d468ce120cd59fbf93d1335057d">  335</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a34cd8d468ce120cd59fbf93d1335057d" title="Removes a shape from this manager without deleting it.">CollisionShapeManager::RemoveShape</a>(<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml" title="This is the base class for all collision shapes.">CollisionShape</a>* Shape)</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        {</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a34cd8d468ce120cd59fbf93d1335057d" title="Removes a shape from this manager without deleting it.">RemoveShape</a>( Shape-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a1a4a30c6523dc87fee9f8c33f9a7dbfa" title="Gets the name of this shape.">GetName</a>() );</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        }</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;</div>
<div class="line"><a name="l00340"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a2db447dbfca5ec2eaacc858df5f08949">  340</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a34cd8d468ce120cd59fbf93d1335057d" title="Removes a shape from this manager without deleting it.">CollisionShapeManager::RemoveShape</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; Name)</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        {</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;            <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ad2a58df4435c918620d5b8482e222412" title="Map Iterator type for CollisionShape instances stored by this class.">ShapeMapIterator</a> CS = this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ac143534055caa5d8e244a76cfadb4b86" title="This stores the names and collision Shapes.">CollisionShapes</a>.find(Name);</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;            <span class="keywordflow">if</span>(CS == this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ac143534055caa5d8e244a76cfadb4b86" title="This stores the names and collision Shapes.">CollisionShapes</a>.end())</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ac143534055caa5d8e244a76cfadb4b86" title="This stores the names and collision Shapes.">CollisionShapes</a>.erase(CS);</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        }</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;</div>
<div class="line"><a name="l00348"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a1da8dc714c80cdac0f15aae0573bcb75">  348</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a1da8dc714c80cdac0f15aae0573bcb75" title="Removes all shapes from the manager without deleting them.">CollisionShapeManager::RemoveAllShapes</a>()</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        {</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ac143534055caa5d8e244a76cfadb4b86" title="This stores the names and collision Shapes.">CollisionShapes</a>.clear();</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        }</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;</div>
<div class="line"><a name="l00353"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a89a5503548a9ed789f68e6fa9d167080">  353</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a89a5503548a9ed789f68e6fa9d167080" title="Removes a shape from this manager and deletes it.">CollisionShapeManager::DestroyShape</a>(<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml" title="This is the base class for all collision shapes.">CollisionShape</a>* Shape)</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        {</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a89a5503548a9ed789f68e6fa9d167080" title="Removes a shape from this manager and deletes it.">DestroyShape</a>(Shape-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a1a4a30c6523dc87fee9f8c33f9a7dbfa" title="Gets the name of this shape.">GetName</a>());</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        }</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;</div>
<div class="line"><a name="l00358"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ad3d275323ca55b669c5ef74b51fe6549">  358</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a89a5503548a9ed789f68e6fa9d167080" title="Removes a shape from this manager and deletes it.">CollisionShapeManager::DestroyShape</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; Name)</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        {</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;            <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ad2a58df4435c918620d5b8482e222412" title="Map Iterator type for CollisionShape instances stored by this class.">ShapeMapIterator</a> CS = this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ac143534055caa5d8e244a76cfadb4b86" title="This stores the names and collision Shapes.">CollisionShapes</a>.find(Name);</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;            <span class="keywordflow">if</span>(CS == this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ac143534055caa5d8e244a76cfadb4b86" title="This stores the names and collision Shapes.">CollisionShapes</a>.end())</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;            <span class="keyword">delete</span> (*CS).second;</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ac143534055caa5d8e244a76cfadb4b86" title="This stores the names and collision Shapes.">CollisionShapes</a>.erase(CS);</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        }</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;</div>
<div class="line"><a name="l00367"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a87e180fab5a4be77dd6413cf3e4bd463">  367</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a87e180fab5a4be77dd6413cf3e4bd463" title="Removes all shapes from the manager and then deletes them.">CollisionShapeManager::DestroyAllShapes</a>()</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        {</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;            <span class="keywordflow">for</span>( <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ad2a58df4435c918620d5b8482e222412" title="Map Iterator type for CollisionShape instances stored by this class.">ShapeMapIterator</a> CS = this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ac143534055caa5d8e244a76cfadb4b86" title="This stores the names and collision Shapes.">CollisionShapes</a>.begin() ; CS != this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ac143534055caa5d8e244a76cfadb4b86" title="This stores the names and collision Shapes.">CollisionShapes</a>.end() ; CS++ )</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;            {</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml" title="This is the base class for all collision shapes.">CollisionShape</a>* CurrShape = (*CS).second;</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                <span class="keyword">delete</span> CurrShape;</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;            }</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ac143534055caa5d8e244a76cfadb4b86" title="This stores the names and collision Shapes.">CollisionShapes</a>.clear();</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        }</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;</div>
<div class="line"><a name="l00377"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a1d14d48a4e1e191033707bb874347c9b">  377</a></span>&#160;        <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ad2a58df4435c918620d5b8482e222412" title="Map Iterator type for CollisionShape instances stored by this class.">CollisionShapeManager::ShapeMapIterator</a> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a1d14d48a4e1e191033707bb874347c9b" title="Gets an Iterator to the first CollisionShape in this manager.">CollisionShapeManager::BeginCollisionShape</a>()</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;            { <span class="keywordflow">return</span> this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ac143534055caa5d8e244a76cfadb4b86" title="This stores the names and collision Shapes.">CollisionShapes</a>.begin(); }</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;</div>
<div class="line"><a name="l00380"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#af6a93c66defb2bd8effa38927d880236">  380</a></span>&#160;        <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ad2a58df4435c918620d5b8482e222412" title="Map Iterator type for CollisionShape instances stored by this class.">CollisionShapeManager::ShapeMapIterator</a> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#af6a93c66defb2bd8effa38927d880236" title="Gets an Iterator to one passed the last CollisionShape in this manager.">CollisionShapeManager::EndCollisionShape</a>()</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;            { <span class="keywordflow">return</span> this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ac143534055caa5d8e244a76cfadb4b86" title="This stores the names and collision Shapes.">CollisionShapes</a>.end(); }</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;</div>
<div class="line"><a name="l00383"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a4f54c638de06cdc05367840e222ebc75">  383</a></span>&#160;        <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ab55c4ba4592a9dcdad5e553eb3efafd8" title="Const Map Iterator type for CollisionShape instances stored by this class.">CollisionShapeManager::ConstShapeMapIterator</a> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a1d14d48a4e1e191033707bb874347c9b" title="Gets an Iterator to the first CollisionShape in this manager.">CollisionShapeManager::BeginCollisionShape</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;<span class="keyword">            </span>{ <span class="keywordflow">return</span> this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ac143534055caa5d8e244a76cfadb4b86" title="This stores the names and collision Shapes.">CollisionShapes</a>.begin(); }</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;</div>
<div class="line"><a name="l00386"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a219b2e969fe5ef8c6b39c6da115d0bb7">  386</a></span>&#160;        <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ab55c4ba4592a9dcdad5e553eb3efafd8" title="Const Map Iterator type for CollisionShape instances stored by this class.">CollisionShapeManager::ConstShapeMapIterator</a> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#af6a93c66defb2bd8effa38927d880236" title="Gets an Iterator to one passed the last CollisionShape in this manager.">CollisionShapeManager::EndCollisionShape</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;<span class="keyword">            </span>{ <span class="keywordflow">return</span> this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ac143534055caa5d8e244a76cfadb4b86" title="This stores the names and collision Shapes.">CollisionShapes</a>.end(); }</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;<span class="comment">        ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;<span class="comment"></span>        <span class="comment">// Shape Creation Utilities</span></div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;</div>
<div class="line"><a name="l00392"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#aa6c041b8a66210b1c3fb83f19d9ed3c7">  392</a></span>&#160;        <a class="code" href="classMezzanine_1_1Physics_1_1ConvexHullCollisionShape.xhtml" title="A simple convex shape built from a low number of points in local space.">ConvexHullCollisionShape</a>* <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#aa6c041b8a66210b1c3fb83f19d9ed3c7" title="Generates a Convex Hull from a provided mesh.">CollisionShapeManager::GenerateConvexHull</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; Name, <a class="code" href="classMezzanine_1_1Graphics_1_1Mesh.xhtml" title="This class is used to check and modify the properties of a graphics mesh.">Graphics::Mesh</a>* ObjectMesh, <span class="keywordtype">bool</span> UseAllSubmeshes)</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        {</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;            btConvexShape *tmpshape = <span class="keyword">new</span> btConvexTriangleMeshShape(this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#aeb6fa2724b3272a21632123ffd88c43d" title="Creates a TriMesh to be used in TriMesh based collision shapes.">CreateBulletTrimesh</a>(ObjectMesh,UseAllSubmeshes));</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;            btShapeHull *hull = <span class="keyword">new</span> btShapeHull(tmpshape);</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;            btScalar margin = tmpshape-&gt;getMargin();</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;            hull-&gt;buildHull(margin);</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;            <span class="comment">//tmpshape-&gt;setUserPointer(hull);</span></div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;            btConvexHullShape* convexShape = <span class="keyword">new</span> btConvexHullShape();</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> b=0;b&lt;hull-&gt;numVertices();b++)</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;            {</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                convexShape-&gt;addPoint(hull-&gt;getVertexPointer()[b]);</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;            }</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;            <span class="keyword">delete</span> tmpshape;</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;            <span class="keyword">delete</span> hull;</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classMezzanine_1_1Physics_1_1ConvexHullCollisionShape.xhtml" title="A simple convex shape built from a low number of points in local space.">ConvexHullCollisionShape</a>(Name,convexShape);</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;        }</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;</div>
<div class="line"><a name="l00409"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#af6baed1c850a5c00e7694037362d36ab">  409</a></span>&#160;        <a class="code" href="classMezzanine_1_1Physics_1_1ConvexHullCollisionShape.xhtml" title="A simple convex shape built from a low number of points in local space.">ConvexHullCollisionShape</a>* <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#aa6c041b8a66210b1c3fb83f19d9ed3c7" title="Generates a Convex Hull from a provided mesh.">CollisionShapeManager::GenerateConvexHull</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; Name, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; MeshName, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; Group, <span class="keywordtype">bool</span> UseAllSubmeshes)</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        {</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;            <a class="code" href="classMezzanine_1_1Graphics_1_1Mesh.xhtml" title="This class is used to check and modify the properties of a graphics mesh.">Graphics::Mesh</a>* ObjectMesh = <a class="code" href="classMezzanine_1_1Singleton.xhtml#a78fc425584913f0b2c615ec440871a67" title="Fetches a pointer to the singleton.">MeshManager::GetSingletonPtr</a>()-&gt;<a class="code" href="classMezzanine_1_1MeshManager.xhtml#a1165cfd040bce804af9644dcdfc8deab" title="Loads a mesh file from disk and prepares it for use.">LoadMesh</a>(MeshName,Group);</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;            <span class="keywordflow">return</span> this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#aa6c041b8a66210b1c3fb83f19d9ed3c7" title="Generates a Convex Hull from a provided mesh.">GenerateConvexHull</a>(Name,ObjectMesh,UseAllSubmeshes);</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        }</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;</div>
<div class="line"><a name="l00415"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a2a3734a226250374c87413c2e4728eb9">  415</a></span>&#160;        <a class="code" href="classMezzanine_1_1Physics_1_1DynamicMeshCollisionShape.xhtml" title="A triangle mesh collsion shape based on a graphics mesh.">DynamicMeshCollisionShape</a>* <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a2a3734a226250374c87413c2e4728eb9" title="Generates a mesh shape for dynamic objects.">CollisionShapeManager::GenerateDynamicTriMesh</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; Name, <a class="code" href="classMezzanine_1_1Graphics_1_1Mesh.xhtml" title="This class is used to check and modify the properties of a graphics mesh.">Graphics::Mesh</a>* ObjectMesh, <span class="keywordtype">bool</span> UseAllSubmeshes)</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;        {</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;            btGImpactMeshShape* gimpact = <span class="keyword">new</span> btGImpactMeshShape(this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#aeb6fa2724b3272a21632123ffd88c43d" title="Creates a TriMesh to be used in TriMesh based collision shapes.">CreateBulletTrimesh</a>(ObjectMesh,UseAllSubmeshes));</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classMezzanine_1_1Physics_1_1DynamicMeshCollisionShape.xhtml" title="A triangle mesh collsion shape based on a graphics mesh.">DynamicMeshCollisionShape</a>(Name,gimpact);</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;        }</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;</div>
<div class="line"><a name="l00421"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a65decee845d8b730cfe1c00b3715dc9c">  421</a></span>&#160;        <a class="code" href="classMezzanine_1_1Physics_1_1DynamicMeshCollisionShape.xhtml" title="A triangle mesh collsion shape based on a graphics mesh.">DynamicMeshCollisionShape</a>* <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a2a3734a226250374c87413c2e4728eb9" title="Generates a mesh shape for dynamic objects.">CollisionShapeManager::GenerateDynamicTriMesh</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; Name, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; MeshName, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; Group, <span class="keywordtype">bool</span> UseAllSubmeshes)</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;        {</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;            <a class="code" href="classMezzanine_1_1Graphics_1_1Mesh.xhtml" title="This class is used to check and modify the properties of a graphics mesh.">Graphics::Mesh</a>* ObjectMesh = <a class="code" href="classMezzanine_1_1Singleton.xhtml#a78fc425584913f0b2c615ec440871a67" title="Fetches a pointer to the singleton.">MeshManager::GetSingletonPtr</a>()-&gt;<a class="code" href="classMezzanine_1_1MeshManager.xhtml#a1165cfd040bce804af9644dcdfc8deab" title="Loads a mesh file from disk and prepares it for use.">LoadMesh</a>(MeshName,Group);</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;            <span class="keywordflow">return</span> this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a2a3734a226250374c87413c2e4728eb9" title="Generates a mesh shape for dynamic objects.">GenerateDynamicTriMesh</a>(Name,ObjectMesh,UseAllSubmeshes);</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;        }</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;</div>
<div class="line"><a name="l00427"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a2c62e801a45fea7cab64de1cb256f9a1">  427</a></span>&#160;        <a class="code" href="classMezzanine_1_1Physics_1_1StaticMeshCollisionShape.xhtml" title="A triangle mesh collsion shape based on a graphics mesh.">StaticMeshCollisionShape</a>* <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a2c62e801a45fea7cab64de1cb256f9a1" title="Generates a mesh shape for static objects.">CollisionShapeManager::GenerateStaticTriMesh</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; Name, <a class="code" href="classMezzanine_1_1Graphics_1_1Mesh.xhtml" title="This class is used to check and modify the properties of a graphics mesh.">Graphics::Mesh</a>* ObjectMesh, <span class="keywordtype">bool</span> UseAllSubmeshes)</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;        {</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;            btBvhTriangleMeshShape* tmpshape = <span class="keyword">new</span> btBvhTriangleMeshShape(this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#aeb6fa2724b3272a21632123ffd88c43d" title="Creates a TriMesh to be used in TriMesh based collision shapes.">CreateBulletTrimesh</a>(ObjectMesh,UseAllSubmeshes),<span class="keyword">true</span>);</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classMezzanine_1_1Physics_1_1StaticMeshCollisionShape.xhtml" title="A triangle mesh collsion shape based on a graphics mesh.">StaticMeshCollisionShape</a>(Name,tmpshape);</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;        }</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;</div>
<div class="line"><a name="l00433"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ac28892ed480e0bedee0aaa5abb7728fd">  433</a></span>&#160;        <a class="code" href="classMezzanine_1_1Physics_1_1StaticMeshCollisionShape.xhtml" title="A triangle mesh collsion shape based on a graphics mesh.">StaticMeshCollisionShape</a>* <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a2c62e801a45fea7cab64de1cb256f9a1" title="Generates a mesh shape for static objects.">CollisionShapeManager::GenerateStaticTriMesh</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; Name, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; MeshName, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; Group, <span class="keywordtype">bool</span> UseAllSubmeshes)</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;        {</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;            <a class="code" href="classMezzanine_1_1Graphics_1_1Mesh.xhtml" title="This class is used to check and modify the properties of a graphics mesh.">Graphics::Mesh</a>* ObjectMesh = <a class="code" href="classMezzanine_1_1Singleton.xhtml#a78fc425584913f0b2c615ec440871a67" title="Fetches a pointer to the singleton.">MeshManager::GetSingletonPtr</a>()-&gt;<a class="code" href="classMezzanine_1_1MeshManager.xhtml#a1165cfd040bce804af9644dcdfc8deab" title="Loads a mesh file from disk and prepares it for use.">LoadMesh</a>(MeshName,Group);</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;            <span class="keywordflow">return</span> this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a2c62e801a45fea7cab64de1cb256f9a1" title="Generates a mesh shape for static objects.">GenerateStaticTriMesh</a>(Name,ObjectMesh,UseAllSubmeshes);</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;        }</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;</div>
<div class="line"><a name="l00439"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a321fa0626c84f543bcf7a0295aebdd74">  439</a></span>&#160;        <a class="code" href="classMezzanine_1_1Physics_1_1CompoundCollisionShape.xhtml" title="A collision shape composed of many other collision shapes placed and oriented in local space...">CompoundCollisionShape</a>* <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a321fa0626c84f543bcf7a0295aebdd74" title="Generates a compound shape of Convex Hulls from a provided mesh.">CollisionShapeManager::PerformConvexDecomposition</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; Name, <a class="code" href="classMezzanine_1_1Graphics_1_1Mesh.xhtml" title="This class is used to check and modify the properties of a graphics mesh.">Graphics::Mesh</a>* ObjectMesh, <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="Whole is an unsigned integer, it will be at least 32bits in size.">Whole</a> Depth, <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> CPercent, <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> PPercent, <span class="keywordtype">bool</span> UseAllSubmeshes)</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;        {</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;            <span class="comment">//new submesh friendly code</span></div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;            Ogre::MeshPtr myMesh = ObjectMesh-&gt;<a class="code" href="classMezzanine_1_1Graphics_1_1Mesh.xhtml#a68f0b5132e8b47c5aa8e8b7599c797f7" title="Gets the internal Mesh pointer.">_GetInternalMesh</a>();</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;            Ogre::SubMesh* subMesh = NULL;</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;            Ogre::IndexData*  indexData = NULL;</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;            Ogre::VertexData* vertexData = NULL;</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;            <span class="keywordtype">bool</span> use32bitindexes = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> currtriCount = 0;</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> triCount = 0;</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> vCount = 0;</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> iCount = 0;</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;            <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="Whole is an unsigned integer, it will be at least 32bits in size.">Whole</a> VertPrevSize = 0;</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;            <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="Whole is an unsigned integer, it will be at least 32bits in size.">Whole</a> IndiPrevSize = 0;</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;            <span class="keywordtype">bool</span> SharedVerts = myMesh-&gt;getSubMesh(0)-&gt;useSharedVertices;</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;            <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="Whole is an unsigned integer, it will be at least 32bits in size.">Whole</a>* VertPerSubMesh = NULL;</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;            <span class="keywordflow">if</span>(UseAllSubmeshes)</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;            {</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;                VertPerSubMesh = <span class="keyword">new</span> <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="Whole is an unsigned integer, it will be at least 32bits in size.">Whole</a>[myMesh-&gt;getNumSubMeshes()];</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;                <span class="keywordflow">for</span>( <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="Whole is an unsigned integer, it will be at least 32bits in size.">Whole</a> X = 0 ; X &lt; myMesh-&gt;getNumSubMeshes() ; X++ )</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;                {</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                    vCount += SharedVerts ? myMesh-&gt;sharedVertexData-&gt;vertexCount : myMesh-&gt;getSubMesh(X)-&gt;vertexData-&gt;vertexCount;</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                    iCount += myMesh-&gt;getSubMesh(X)-&gt;indexData-&gt;indexCount;</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                    VertPerSubMesh[X] = SharedVerts ? myMesh-&gt;sharedVertexData-&gt;vertexCount : myMesh-&gt;getSubMesh(X)-&gt;vertexData-&gt;vertexCount;</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;                }</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;            }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                vCount += SharedVerts ? myMesh-&gt;sharedVertexData-&gt;vertexCount : myMesh-&gt;getSubMesh(0)-&gt;vertexData-&gt;vertexCount;</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;                iCount += myMesh-&gt;getSubMesh(0)-&gt;indexData-&gt;indexCount;</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;            }</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;            Ogre::Vector3* vertices = <span class="keyword">new</span> Ogre::Vector3[vCount];</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>* indices  = <span class="keyword">new</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>[iCount];</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;            <span class="keywordflow">for</span>( <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <span class="keywordtype">int</span> SubMeshIndex = 0 ; SubMeshIndex &lt; myMesh-&gt;getNumSubMeshes() ; SubMeshIndex++ )</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;            {</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;                <span class="keywordflow">if</span>( !UseAllSubmeshes &amp;&amp; (SubMeshIndex &gt; 0) )</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;                <span class="keywordflow">if</span>( SharedVerts &amp;&amp; (SubMeshIndex &gt; 0) )</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;                subMesh = myMesh-&gt;getSubMesh(SubMeshIndex);</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                indexData = subMesh-&gt;indexData;</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                vertexData = SharedVerts ? myMesh-&gt;sharedVertexData : myMesh-&gt;getSubMesh(SubMeshIndex)-&gt;vertexData;</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;                <span class="keyword">const</span> Ogre::VertexElement* posElem = vertexData-&gt;vertexDeclaration-&gt;findElementBySemantic(Ogre::VES_POSITION);</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;                Ogre::HardwareVertexBufferSharedPtr vBuffer = vertexData-&gt;vertexBufferBinding-&gt;getBuffer(posElem-&gt;getSource());</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;                Ogre::HardwareIndexBufferSharedPtr iBuffer = indexData-&gt;indexBuffer;</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                currtriCount=indexData-&gt;indexCount/3;</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;                triCount+=(indexData-&gt;indexCount/3);</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;                <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* vertex = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(vBuffer-&gt;lock(Ogre::HardwareBuffer::HBL_READ_ONLY));</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;                <span class="keywordtype">float</span>* pReal = NULL;</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;                <span class="keywordflow">for</span>( <span class="keywordtype">size_t</span> j = 0 ; j &lt; vertexData-&gt;vertexCount ; j++, vertex += vBuffer-&gt;getVertexSize() )</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;                {</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;                    posElem-&gt;baseVertexPointerToElement(vertex, &amp;pReal);</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;                    vertices[j + VertPrevSize].x = *pReal++;</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;                    vertices[j + VertPrevSize].y = *pReal++;</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;                    vertices[j + VertPrevSize].z = *pReal++;</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;                }</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;                vBuffer-&gt;unlock();</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;                <span class="keywordtype">size_t</span> index_offset = 0;</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;                use32bitindexes = (iBuffer-&gt;getType() == Ogre::HardwareIndexBuffer::IT_32BIT);</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;                <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>* pLong = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>*<span class="keyword">&gt;</span>(iBuffer-&gt;lock(Ogre::HardwareBuffer::HBL_READ_ONLY));</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;                <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span>* pShort = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">short</span>*<span class="keyword">&gt;</span>(pLong);</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;                <span class="keywordflow">if</span>( use32bitindexes )</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;                {</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;                    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> k = 0; k &lt; currtriCount*3; ++k)</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;                    {</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;                        <span class="keywordflow">if</span>(SubMeshIndex &gt; 0 &amp;&amp; VertPerSubMesh) {</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;                            indices[index_offset+IndiPrevSize] = pLong[k] + VertPerSubMesh[SubMeshIndex];</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;                        }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;                            indices[index_offset+IndiPrevSize] = pLong[k];</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;                        }</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;                        index_offset++;</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;                    }</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;                }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;                    <span class="keywordflow">for</span>( <span class="keywordtype">size_t</span> k = 0 ; k &lt; currtriCount * 3 ; ++k )</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;                    {</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                        <span class="keywordflow">if</span>(SubMeshIndex &gt; 0 &amp;&amp; VertPerSubMesh) {</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;                            indices[index_offset+IndiPrevSize] = (<span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">long</span><span class="keyword">&gt;</span>(pShort[k])) + VertPerSubMesh[SubMeshIndex];</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;                        }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                            indices[index_offset+IndiPrevSize] = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">long</span><span class="keyword">&gt;</span>(pShort[k]);</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;                        }</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;                        index_offset++;</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;                    }</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;                }</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;                iBuffer-&gt;unlock();</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;                VertPrevSize += vertexData-&gt;vertexCount;</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;                IndiPrevSize += indexData-&gt;indexCount;</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;            }</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;            ConvexDecomposition::DecompDesc desc;</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;            desc.mVcount = vertexData-&gt;vertexCount;</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;            desc.mTcount = triCount;</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;            desc.mVertices = &amp;vertices[0].x;</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;            desc.mIndices = &amp;indices[0];</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> maxv  = 16;</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;            <span class="keywordtype">float</span> skinWidth    = 0.0;</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;            desc.mDepth        = Depth;</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;            desc.mCpercent     = CPercent;</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;            desc.mPpercent     = PPercent;</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;            desc.mMaxVertices  = maxv;</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;            desc.mSkinWidth    = skinWidth;</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;            Internal::MezzConvexDecomposition decomp;</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;            desc.mCallback = &amp;decomp;</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;            ConvexBuilder cb(desc.mCallback);</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;            cb.process(desc);</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;            <a class="code" href="classMezzanine_1_1Physics_1_1CompoundCollisionShape.xhtml" title="A collision shape composed of many other collision shapes placed and oriented in local space...">CompoundCollisionShape</a>* compound = <span class="keyword">new</span> <a class="code" href="classMezzanine_1_1Physics_1_1CompoundCollisionShape.xhtml" title="A collision shape composed of many other collision shapes placed and oriented in local space...">CompoundCollisionShape</a>(Name);</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;            btTransform trans;</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;            trans.setIdentity();</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i=0;i&lt;decomp.m_convexShapes.size();i++)</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;            {</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;                std::stringstream namestream;</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;                namestream &lt;&lt; Name &lt;&lt; <span class="stringliteral">&quot;Child&quot;</span> &lt;&lt; i;</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;                <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> centroid(decomp.m_convexCentroids[i]);</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;                <a class="code" href="classMezzanine_1_1Physics_1_1ConvexHullCollisionShape.xhtml" title="A simple convex shape built from a low number of points in local space.">ConvexHullCollisionShape</a>* convexShape = <span class="keyword">new</span> <a class="code" href="classMezzanine_1_1Physics_1_1ConvexHullCollisionShape.xhtml" title="A simple convex shape built from a low number of points in local space.">ConvexHullCollisionShape</a>(namestream.str(),decomp.m_convexShapes[i]);</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;                compound-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CompoundCollisionShape.xhtml#ac8eb9de84614193aa8261000ef24c48f" title="Adds a shape to this compound shape.">AddChildShape</a>(convexShape,centroid);</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;            }</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;            <span class="keyword">delete</span>[] vertices;</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;            <span class="keyword">delete</span>[] indices;</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;            <span class="keyword">delete</span>[] VertPerSubMesh;</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;            <span class="keywordflow">return</span> compound;</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;        }</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;</div>
<div class="line"><a name="l00571"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a78eeb8c6712ba6bc0832356ef4ea12fd">  571</a></span>&#160;        <a class="code" href="classMezzanine_1_1Physics_1_1CompoundCollisionShape.xhtml" title="A collision shape composed of many other collision shapes placed and oriented in local space...">CompoundCollisionShape</a>* <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a321fa0626c84f543bcf7a0295aebdd74" title="Generates a compound shape of Convex Hulls from a provided mesh.">CollisionShapeManager::PerformConvexDecomposition</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; Name, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; MeshName, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; Group, <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="Whole is an unsigned integer, it will be at least 32bits in size.">Whole</a> Depth, <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> CPercent, <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> PPercent, <span class="keywordtype">bool</span> UseAllSubmeshes)</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;        {</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;            <a class="code" href="classMezzanine_1_1Graphics_1_1Mesh.xhtml" title="This class is used to check and modify the properties of a graphics mesh.">Graphics::Mesh</a>* ObjectMesh = <a class="code" href="classMezzanine_1_1Singleton.xhtml#a78fc425584913f0b2c615ec440871a67" title="Fetches a pointer to the singleton.">MeshManager::GetSingletonPtr</a>()-&gt;<a class="code" href="classMezzanine_1_1MeshManager.xhtml#a1165cfd040bce804af9644dcdfc8deab" title="Loads a mesh file from disk and prepares it for use.">LoadMesh</a>(MeshName,Group);</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;            <span class="keywordflow">return</span> this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a321fa0626c84f543bcf7a0295aebdd74" title="Generates a compound shape of Convex Hulls from a provided mesh.">PerformConvexDecomposition</a>(Name,ObjectMesh,Depth,CPercent,PPercent,UseAllSubmeshes);</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;        }</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;<span class="comment">        ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;<span class="comment"></span>        <span class="comment">// Shape Saving/Loading Utilities</span></div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;</div>
<div class="line"><a name="l00580"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a98f31067c4d9733b4c4a8ab2ece1ebc8">  580</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a98f31067c4d9733b4c4a8ab2ece1ebc8" title="Loads all shapes saved in an existing XML file, and stores them in this manager.">CollisionShapeManager::LoadAllShapesFromXMLFile</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; FileName, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; Group)</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;        {<span class="comment"></span></div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;<span class="comment">            /// @todo Replace this stack allocated stream for one initialized from the Resource Manager, after the system is ready.</span></div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;<span class="comment"></span>            <a class="code" href="classMezzanine_1_1Resource_1_1FileStream.xhtml" title="This represents a stream to a file on disk using the C++ file stream API.">Resource::FileStream</a> ShapesStream( FileName, <a class="code" href="classMezzanine_1_1Singleton.xhtml#a78fc425584913f0b2c615ec440871a67" title="Fetches a pointer to the singleton.">ResourceManager::GetSingletonPtr</a>()-&gt;GetAssetPath(FileName,Group) );</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;            <a class="code" href="classMezzanine_1_1XML_1_1Document.xhtml" title="The root node of any xml hierarchy is a Document.">XML::Document</a> ShapesDoc;</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;            <a class="code" href="structMezzanine_1_1XML_1_1ParseResult.xhtml" title="Troubleshooting data intended to help troublshoot XML parsing errors.">XML::ParseResult</a> DocResult = ShapesDoc.<a class="code" href="classMezzanine_1_1XML_1_1Document.xhtml#afb9abd5b77651735b1380f6bd5934837" title="Load a document from a data stream.">Load</a>(ShapesStream);</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;            <span class="keywordflow">if</span>( DocResult.<a class="code" href="structMezzanine_1_1XML_1_1ParseResult.xhtml#a9965cb99f91bc1f799deb5ffbb067133" title="Parsing status ( see ParseStatus )">Status</a> != <a class="code" href="namespaceMezzanine_1_1XML.xhtml#a25d44cacbf75a9d031eae1baa9481442a87afd3113f6eb1d3e4e0b38e7bc84200" title="This is returned to indicated there where no issues parsing the XML document.">XML::StatusOk</a> ) {</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;                MEZZ_EXCEPTION(<a class="code" href="classMezzanine_1_1Exception.xhtml#a4ee7e60ac53783c4975240c57071d420a5dab01f1478d2cef474f77f9824faaa7" title="When used a instance of SyntaxErrorXMLException is thrown. Thrown when and XML document is being pars...">Exception::SYNTAX_ERROR_EXCEPTION_XML</a>,<span class="stringliteral">&quot;Failed to parse XML file \&quot;&quot;</span> + FileName + <span class="stringliteral">&quot;\&quot;.&quot;</span>);</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;            }</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;            <a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">XML::Node</a> ShapesRoot = ShapesDoc.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a9c5b7b5376c9444d3d1d0bfeb47e4dc4" title="Attempt to get a child Node with a given name.">GetChild</a>(<span class="stringliteral">&quot;InitializerRoot&quot;</span>);</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;            <span class="keywordflow">if</span>( ShapesRoot.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a8c770f21644c937e1e5ca1fd9966651b" title="Is this storing anything at all?">Empty</a>() ) {</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;                MEZZ_EXCEPTION(<a class="code" href="classMezzanine_1_1Exception.xhtml#a4ee7e60ac53783c4975240c57071d420a5dab01f1478d2cef474f77f9824faaa7" title="When used a instance of SyntaxErrorXMLException is thrown. Thrown when and XML document is being pars...">Exception::SYNTAX_ERROR_EXCEPTION_XML</a>,<span class="stringliteral">&quot;Failed to find expected Root node in \&quot;&quot;</span> + FileName + <span class="stringliteral">&quot;\&quot;.&quot;</span>);</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;            }</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;            <span class="keywordflow">for</span>( <a class="code" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml" title="Child node iterator (a bidirectional iterator over a collection of Node)">XML::NodeIterator</a> ShapeIt = ShapesRoot.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#ac0ec690c89564f34967b5563fc335ffa" title="Get a Child node iterator that references the first child Node.">begin</a>() ; ShapeIt != ShapesRoot.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#aabffeb501cfdd732dc2ce6b1bda6c56f" title="Get a Child node iterator that references one past the last child Node.">end</a>() ; ++ShapeIt )</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;            {</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;                <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml" title="This is the base class for all collision shapes.">CollisionShape</a>* DeSerializedShape = <a class="code" href="namespaceMezzanine_1_1Physics.xhtml#a58012efb6a76c109d2bcc80b142c04bf" title="Create A shape of a type and optionally model it after an example.">Physics::CreateShape</a>( (*ShapeIt) );</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;                this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ac143534055caa5d8e244a76cfadb4b86" title="This stores the names and collision Shapes.">CollisionShapes</a>.insert( std::pair&lt;String,CollisionShape*&gt;(DeSerializedShape-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a1a4a30c6523dc87fee9f8c33f9a7dbfa" title="Gets the name of this shape.">GetName</a>(),DeSerializedShape) );</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;            }</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;        }</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;</div>
<div class="line"><a name="l00601"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#acc8ab5cadd841828a484e32a2ee0db67">  601</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#acc8ab5cadd841828a484e32a2ee0db67" title="Takes all the shapes currently stored this manager and saves them to a XML file.">CollisionShapeManager::SaveAllStoredShapesToXMLFile</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; FileName)</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;        {</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;            <a class="code" href="classMezzanine_1_1XML_1_1Document.xhtml" title="The root node of any xml hierarchy is a Document.">XML::Document</a> ShapesDoc;</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;            <a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">XML::Node</a> DeclNode = ShapesDoc.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a65772e1f13ac21655e3ffbe8ffe4aaa1" title="Creates a Node and makes it a child of this one.">AppendChild</a>(<a class="code" href="namespaceMezzanine_1_1XML.xhtml#a79dc84831ed2506631fb4adeb899564aa7074acbee9f2436f766e6cdf2190a886" title="Document declaration, i.e. &#39;&lt;?xml version=&quot;1.0&quot;?&gt;&#39;.">XML::NodeDeclaration</a>);</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;            <a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml" title="A light-weight handle for manipulating attributes in DOM tree.">XML::Attribute</a> VerAttrib = DeclNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a20ea63a61ca1a7df2e00e074178bd9a4" title="Creates an Attribute and puts it at the end of this Nodes attributes.">AppendAttribute</a>(<span class="stringliteral">&quot;version&quot;</span>);</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;            <span class="keywordflow">if</span>( DeclNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#ae8a54e421843e865e7171d48f78be969" title="Set the name of .">SetName</a>(<span class="stringliteral">&quot;xml&quot;</span>) &amp;&amp; VerAttrib.<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#afff322c3640040f0054c6d1e346891fc" title="Set the value of this.">SetValue</a>(<span class="stringliteral">&quot;1.0&quot;</span>) ) {</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;                <a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">XML::Node</a> ShapesRoot = ShapesDoc.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a65772e1f13ac21655e3ffbe8ffe4aaa1" title="Creates a Node and makes it a child of this one.">AppendChild</a>( <span class="stringliteral">&quot;ShapesRoot&quot;</span> );</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;                <span class="keywordflow">for</span>( <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ad2a58df4435c918620d5b8482e222412" title="Map Iterator type for CollisionShape instances stored by this class.">ShapeMapIterator</a> ShapeIt = this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ac143534055caa5d8e244a76cfadb4b86" title="This stores the names and collision Shapes.">CollisionShapes</a>.begin() ; ShapeIt != this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ac143534055caa5d8e244a76cfadb4b86" title="This stores the names and collision Shapes.">CollisionShapes</a>.end() ; ++ShapeIt )</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;                {</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;                    (*ShapeIt).second-&gt;ProtoSerialize( ShapesRoot );</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;                }</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;<span class="comment">                /// @todo Replace this stack allocated stream for one initialized from the Resource Manager, after the system is ready.</span></div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;<span class="comment"></span>                <a class="code" href="classMezzanine_1_1Resource_1_1FileStream.xhtml" title="This represents a stream to a file on disk using the C++ file stream API.">Resource::FileStream</a> SettingsStream(FileName,<span class="stringliteral">&quot;.&quot;</span>,<a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#aac88ac21234a2b0b34e03ec4246d356ca1a0a24a169dd2b57cbaaa7b908c9285c" title="Clear the contents of the file when opening. Note that this will also create the file if it&#39;s not fou...">Resource::DataStream::SF_Truncate</a> | <a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#aac88ac21234a2b0b34e03ec4246d356cad57bdae4c8f86ab0a1cb1e9c948cb1fb" title="Permit write operations on the stream.">Resource::DataStream::SF_Write</a>);</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;                ShapesDoc.<a class="code" href="classMezzanine_1_1XML_1_1Document.xhtml#a877e44869d67a6ea736c82bb8adbc0ad" title="Save XML document to a stream.">Save</a>(SettingsStream,<span class="stringliteral">&quot;\t&quot;</span>,<a class="code" href="namespaceMezzanine_1_1XML.xhtml#a8c0eb20115e575906a663bc7fe5ba356" title="Indent the nodes that are written to output stream with as many indentation strings as deep the node ...">XML::FormatIndent</a>);</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;            }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;                MEZZ_EXCEPTION(<a class="code" href="classMezzanine_1_1Exception.xhtml#a4ee7e60ac53783c4975240c57071d420a954af2fb48bf0d15a27069a890ef8dad" title="When used a instance of InvalidStateException is thrown. Thrown when the available information should...">Exception::INVALID_STATE_EXCEPTION</a>,<span class="stringliteral">&quot;Failed to create XML document declaration for file \&quot;&quot;</span> + FileName + <span class="stringliteral">&quot;\&quot;.&quot;</span>);</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;            }</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;        }</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;</div>
<div class="line"><a name="l00622"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ab6c6d8f552ab0b914966b460daed29eb">  622</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ab6c6d8f552ab0b914966b460daed29eb" title="Saves all shapes contained in a vector and saves them to a XML file.">CollisionShapeManager::SaveShapesToXMLFile</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; FileName, <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#af52efcaa719bde8f1ffa1c592b941858" title="Vector container type for CollisionShape storage by this class.">ShapeVector</a>&amp; ShapesToSave)</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;        {</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;            <a class="code" href="classMezzanine_1_1XML_1_1Document.xhtml" title="The root node of any xml hierarchy is a Document.">XML::Document</a> ShapesDoc;</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;            <a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">XML::Node</a> DeclNode = ShapesDoc.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a65772e1f13ac21655e3ffbe8ffe4aaa1" title="Creates a Node and makes it a child of this one.">AppendChild</a>(<a class="code" href="namespaceMezzanine_1_1XML.xhtml#a79dc84831ed2506631fb4adeb899564aa7074acbee9f2436f766e6cdf2190a886" title="Document declaration, i.e. &#39;&lt;?xml version=&quot;1.0&quot;?&gt;&#39;.">XML::NodeDeclaration</a>);</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;            <a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml" title="A light-weight handle for manipulating attributes in DOM tree.">XML::Attribute</a> VerAttrib = DeclNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a20ea63a61ca1a7df2e00e074178bd9a4" title="Creates an Attribute and puts it at the end of this Nodes attributes.">AppendAttribute</a>(<span class="stringliteral">&quot;version&quot;</span>);</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;            <span class="keywordflow">if</span>( DeclNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#ae8a54e421843e865e7171d48f78be969" title="Set the name of .">SetName</a>(<span class="stringliteral">&quot;xml&quot;</span>) &amp;&amp; VerAttrib.<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#afff322c3640040f0054c6d1e346891fc" title="Set the value of this.">SetValue</a>(<span class="stringliteral">&quot;1.0&quot;</span>) ) {</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;                <a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">XML::Node</a> ShapesRoot = ShapesDoc.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a65772e1f13ac21655e3ffbe8ffe4aaa1" title="Creates a Node and makes it a child of this one.">AppendChild</a>( <span class="stringliteral">&quot;ShapesRoot&quot;</span> );</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;                <span class="keywordflow">for</span>( <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a12a99af5665c9f5c82457c5f78d3da3e" title="Vector Iterator type for CollisionShape instances stored by this class.">ShapeVectorIterator</a> ShapeIt = ShapesToSave.begin() ; ShapeIt != ShapesToSave.end() ; ++ShapeIt )</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;                {</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;                    (*ShapeIt)-&gt;ProtoSerialize( ShapesRoot );</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;                }</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;<span class="comment">                /// @todo Replace this stack allocated stream for one initialized from the Resource Manager, after the system is ready.</span></div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;<span class="comment"></span>                <a class="code" href="classMezzanine_1_1Resource_1_1FileStream.xhtml" title="This represents a stream to a file on disk using the C++ file stream API.">Resource::FileStream</a> SettingsStream(FileName,<span class="stringliteral">&quot;.&quot;</span>,<a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#aac88ac21234a2b0b34e03ec4246d356ca1a0a24a169dd2b57cbaaa7b908c9285c" title="Clear the contents of the file when opening. Note that this will also create the file if it&#39;s not fou...">Resource::DataStream::SF_Truncate</a> | <a class="code" href="classMezzanine_1_1Resource_1_1DataStream.xhtml#aac88ac21234a2b0b34e03ec4246d356cad57bdae4c8f86ab0a1cb1e9c948cb1fb" title="Permit write operations on the stream.">Resource::DataStream::SF_Write</a>);</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;                ShapesDoc.<a class="code" href="classMezzanine_1_1XML_1_1Document.xhtml#a877e44869d67a6ea736c82bb8adbc0ad" title="Save XML document to a stream.">Save</a>(SettingsStream,<span class="stringliteral">&quot;\t&quot;</span>,<a class="code" href="namespaceMezzanine_1_1XML.xhtml#a8c0eb20115e575906a663bc7fe5ba356" title="Indent the nodes that are written to output stream with as many indentation strings as deep the node ...">XML::FormatIndent</a>);</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;            }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;                MEZZ_EXCEPTION(<a class="code" href="classMezzanine_1_1Exception.xhtml#a4ee7e60ac53783c4975240c57071d420a954af2fb48bf0d15a27069a890ef8dad" title="When used a instance of InvalidStateException is thrown. Thrown when the available information should...">Exception::INVALID_STATE_EXCEPTION</a>,<span class="stringliteral">&quot;Failed to create XML document declaration for file \&quot;&quot;</span> + FileName + <span class="stringliteral">&quot;\&quot;.&quot;</span>);</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;            }</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;        }</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;</div>
<div class="line"><a name="l00643"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a9693f49417a7970343c15fdcd91eefe6">  643</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a9693f49417a7970343c15fdcd91eefe6" title="Loads all shapes saved in an existing binary file, and stores them in this manager.">CollisionShapeManager::LoadAllShapesFromBinaryFile</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; FileName, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; Group)</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;        {</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;            btBulletWorldImporter Importer;</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;            <a class="code" href="namespaceMezzanine_1_1Resource.xhtml#a62a315666b8e56a64640c813ac400b52" title="This is a convenience type for a data stream in a counted pointer.">Ogre::DataStreamPtr</a> Stream = Ogre::ResourceGroupManager::getSingleton().openResource(FileName,Group);</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;            <span class="keywordtype">char</span>* buffer = <span class="keyword">new</span> <span class="keywordtype">char</span>[Stream-&gt;size()];</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;            Stream-&gt;read((<span class="keywordtype">void</span>*)buffer, Stream-&gt;size());</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;            <span class="keywordflow">if</span>(!Importer.loadFileFromMemory(buffer, Stream-&gt;size()))</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;            {</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;                MEZZ_EXCEPTION(<a class="code" href="classMezzanine_1_1Exception.xhtml#a4ee7e60ac53783c4975240c57071d420a5ae27192a02cadc51ca2ecb61d0997f1" title="When used a instance of FileException is thrown. Thrown when there is an unknown issue with a file...">Exception::IO_FILE_EXCEPTION</a>,<span class="stringliteral">&quot;Failed to load file: &quot;</span> + FileName + <span class="stringliteral">&quot;.&quot;</span>)</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;            }</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;            <span class="keyword">delete</span>[] buffer;</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;            <span class="keywordflow">for</span>( <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="Whole is an unsigned integer, it will be at least 32bits in size.">Whole</a> X = 0 ; X &lt; Importer.getNumCollisionShapes() ; ++X )</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;            {</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;                btCollisionShape* Shape = Importer.getCollisionShapeByIndex(X);</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">char</span>* MaybeAName = Importer.getNameForPointer((<span class="keywordtype">void</span>*)Shape);</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;                <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a> Name;</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;                <span class="keywordflow">if</span>(MaybeAName)</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;                {</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;                    Name = <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>(MaybeAName);</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;                    <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ad2a58df4435c918620d5b8482e222412" title="Map Iterator type for CollisionShape instances stored by this class.">ShapeMapIterator</a> it = this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ac143534055caa5d8e244a76cfadb4b86" title="This stores the names and collision Shapes.">CollisionShapes</a>.find(Name);</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;                    <span class="keywordflow">if</span>(it == this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ac143534055caa5d8e244a76cfadb4b86" title="This stores the names and collision Shapes.">CollisionShapes</a>.end())</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;                    {</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;                        <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml" title="This is the base class for all collision shapes.">CollisionShape</a>* NewShape = this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#af6db1dfa92bf93bd610ee4a4942a0d8f" title="Creates a wrapper for an internal bullet shape.">WrapShape</a>(Name,Shape);</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;                        this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ac143534055caa5d8e244a76cfadb4b86" title="This stores the names and collision Shapes.">CollisionShapes</a>.insert( std::pair&lt;String,CollisionShape*&gt;(Name,NewShape) );</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;                    }</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;                }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;                    <span class="keyword">static</span> <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="Whole is an unsigned integer, it will be at least 32bits in size.">Whole</a> NameCount = 0;</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;                    Name = <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>(<span class="stringliteral">&quot;Unnamed&quot;</span>) += StringTools::ConvertToString(NameCount++);</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;                    <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml" title="This is the base class for all collision shapes.">CollisionShape</a>* NewShape = this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#af6db1dfa92bf93bd610ee4a4942a0d8f" title="Creates a wrapper for an internal bullet shape.">WrapShape</a>(Name,Shape);</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;                    this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a378cc83a745590a4a0b9ef0d49c13933" title="Stores shapes that have not been given a name.">UnnamedShapes</a>.push_back(NewShape);</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;                }</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;            }</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;        }</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;</div>
<div class="line"><a name="l00677"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ab1b4f73e50f63fb14d82144bc379bfe3">  677</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ab1b4f73e50f63fb14d82144bc379bfe3" title="Takes all the shapes currently stored this manager and saves them to a binary file.">CollisionShapeManager::SaveAllStoredShapesToBinaryFile</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; FileName)</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;        {</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;            btDefaultSerializer* BulletSerializer = <span class="keyword">new</span> btDefaultSerializer(1024*1024*5);</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;            BulletSerializer-&gt;startSerialization();</div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;            <span class="keywordflow">for</span>( <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ad2a58df4435c918620d5b8482e222412" title="Map Iterator type for CollisionShape instances stored by this class.">ShapeMapIterator</a> it = this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ac143534055caa5d8e244a76cfadb4b86" title="This stores the names and collision Shapes.">CollisionShapes</a>.begin() ; it != this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ac143534055caa5d8e244a76cfadb4b86" title="This stores the names and collision Shapes.">CollisionShapes</a>.end() ; it++ )</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;            {</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;                <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml" title="This is the base class for all collision shapes.">CollisionShape</a>* Shape = (*it).second;</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;                BulletSerializer-&gt;registerNameForPointer((<span class="keywordtype">void</span>*)Shape-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#afedd1b778a3111778a5b17e9ce30d661" title="Gets the internal shape pointer this collision shape is based on.">_GetInternalShape</a>(),(*it).first.c_str());</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;                <span class="keywordtype">int</span> len = Shape-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#afedd1b778a3111778a5b17e9ce30d661" title="Gets the internal shape pointer this collision shape is based on.">_GetInternalShape</a>()-&gt;calculateSerializeBufferSize();</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;                btChunk* chunk = BulletSerializer-&gt;allocate(len,1);</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">char</span>* structType = Shape-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#afedd1b778a3111778a5b17e9ce30d661" title="Gets the internal shape pointer this collision shape is based on.">_GetInternalShape</a>()-&gt;serialize(chunk-&gt;m_oldPtr, BulletSerializer);</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;                BulletSerializer-&gt;finalizeChunk(chunk,structType,BT_SHAPE_CODE,Shape-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#afedd1b778a3111778a5b17e9ce30d661" title="Gets the internal shape pointer this collision shape is based on.">_GetInternalShape</a>());</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;            }</div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;            BulletSerializer-&gt;finishSerialization();</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;            FILE* f2 = fopen(FileName.c_str(),<span class="stringliteral">&quot;wb&quot;</span>);</div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;            fwrite(BulletSerializer-&gt;getBufferPointer(),BulletSerializer-&gt;getCurrentBufferSize(),1,f2);</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;            fclose(f2);</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;        }</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;</div>
<div class="line"><a name="l00696"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#aeedeb57e1a32f9f2f6bd171990e5c963">  696</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#aeedeb57e1a32f9f2f6bd171990e5c963" title="Saves all shapes contained in a vector and saves them to a binary file.">CollisionShapeManager::SaveShapesToBinaryFile</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; FileName, <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#af52efcaa719bde8f1ffa1c592b941858" title="Vector container type for CollisionShape storage by this class.">ShapeVector</a>&amp; ShapesToSave)</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;        {</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;            btDefaultSerializer* BulletSerializer = <span class="keyword">new</span> btDefaultSerializer(1024*1024*5);</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;            BulletSerializer-&gt;startSerialization();</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;            <span class="keywordflow">for</span>( <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a12a99af5665c9f5c82457c5f78d3da3e" title="Vector Iterator type for CollisionShape instances stored by this class.">ShapeVectorIterator</a> it = ShapesToSave.begin() ; it != ShapesToSave.end() ; it++ )</div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;            {</div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;                <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml" title="This is the base class for all collision shapes.">Physics::CollisionShape</a>* Shape = (*it);</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;                BulletSerializer-&gt;registerNameForPointer((<span class="keywordtype">void</span>*)Shape-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#afedd1b778a3111778a5b17e9ce30d661" title="Gets the internal shape pointer this collision shape is based on.">_GetInternalShape</a>(),(*it)-&gt;GetName().c_str());</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;                <span class="keywordtype">int</span> len = Shape-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#afedd1b778a3111778a5b17e9ce30d661" title="Gets the internal shape pointer this collision shape is based on.">_GetInternalShape</a>()-&gt;calculateSerializeBufferSize();</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;                btChunk* chunk = BulletSerializer-&gt;allocate(len,1);</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">char</span>* structType = Shape-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#afedd1b778a3111778a5b17e9ce30d661" title="Gets the internal shape pointer this collision shape is based on.">_GetInternalShape</a>()-&gt;serialize(chunk-&gt;m_oldPtr, BulletSerializer);</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;                BulletSerializer-&gt;finalizeChunk(chunk,structType,BT_SHAPE_CODE,Shape-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#afedd1b778a3111778a5b17e9ce30d661" title="Gets the internal shape pointer this collision shape is based on.">_GetInternalShape</a>());</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;            }</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;            BulletSerializer-&gt;finishSerialization();</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;            FILE* f2 = fopen(FileName.c_str(),<span class="stringliteral">&quot;wb&quot;</span>);</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;            fwrite(BulletSerializer-&gt;getBufferPointer(),BulletSerializer-&gt;getCurrentBufferSize(),1,f2);</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;            fclose(f2);</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;        }</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;<span class="comment">        ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;<span class="comment"></span>        <span class="comment">// Unnamed Shape Management</span></div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;</div>
<div class="line"><a name="l00718"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a863256cbd5e4e4418b741b68f05076e6">  718</a></span>&#160;        <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#af52efcaa719bde8f1ffa1c592b941858" title="Vector container type for CollisionShape storage by this class.">CollisionShapeManager::ShapeVector</a>&amp; <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a863256cbd5e4e4418b741b68f05076e6" title="Returns a vector of unnamed shapes stored in this manager.">CollisionShapeManager::GetUnnamedShapes</a>()</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;        {</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;            <span class="keywordflow">return</span> this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a378cc83a745590a4a0b9ef0d49c13933" title="Stores shapes that have not been given a name.">UnnamedShapes</a>;</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;        }</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;</div>
<div class="line"><a name="l00723"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ae78b05e00de274df7cb0cf71437b4fb4">  723</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ae78b05e00de274df7cb0cf71437b4fb4" title="Assigns a name to an unnamed shape.">CollisionShapeManager::SetNameForUnnamedShape</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a>&amp; NewName, <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml" title="This is the base class for all collision shapes.">CollisionShape</a>* Shape)</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;        {</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;            <span class="keywordflow">for</span>( <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a12a99af5665c9f5c82457c5f78d3da3e" title="Vector Iterator type for CollisionShape instances stored by this class.">ShapeVectorIterator</a> ShapeIt = this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a378cc83a745590a4a0b9ef0d49c13933" title="Stores shapes that have not been given a name.">UnnamedShapes</a>.begin() ; ShapeIt != this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a378cc83a745590a4a0b9ef0d49c13933" title="Stores shapes that have not been given a name.">UnnamedShapes</a>.end() ; ++ShapeIt )</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;            {</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;                <span class="keywordflow">if</span>( (*ShapeIt) == Shape ) {</div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;                    this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a378cc83a745590a4a0b9ef0d49c13933" title="Stores shapes that have not been given a name.">UnnamedShapes</a>.erase( ShapeIt );</div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;                }</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;            }</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;</div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;            <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ad2a58df4435c918620d5b8482e222412" title="Map Iterator type for CollisionShape instances stored by this class.">ShapeMapIterator</a> NaIt = this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ac143534055caa5d8e244a76cfadb4b86" title="This stores the names and collision Shapes.">CollisionShapes</a>.find(NewName);</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;            <span class="keywordflow">if</span>(NaIt != this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ac143534055caa5d8e244a76cfadb4b86" title="This stores the names and collision Shapes.">CollisionShapes</a>.end()) {</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;                MEZZ_EXCEPTION(<a class="code" href="classMezzanine_1_1Exception.xhtml#a4ee7e60ac53783c4975240c57071d420ac117a06575fdad0414793ee3ca118d9f" title="When used a instance of InstanceIdentityDuplicateException is thrown. Thrown when duplicates of teh s...">Exception::II_DUPLICATE_IDENTITY_EXCEPTION</a>,<span class="stringliteral">&quot;Attempting to assign non-unique name to an unnamed Collision Shape.&quot;</span>);</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;            }</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;</div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;            Shape-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a350cf7befc1b849fe276b238a6772cfa" title="Sets the name of this collision shape.">_SetShapeName</a>(NewName);</div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#ac143534055caa5d8e244a76cfadb4b86" title="This stores the names and collision Shapes.">CollisionShapes</a>.insert( std::pair&lt;String,CollisionShape*&gt;(NewName,Shape) );</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;        }</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;<span class="comment">        ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;<span class="comment"></span>        <span class="comment">// Utility</span></div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;</div>
<div class="line"><a name="l00745"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a3977fad0b9bd9d55fc46d020c5330e37">  745</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a3977fad0b9bd9d55fc46d020c5330e37" title="Configures this manager for use prior to entering the main loop. ">CollisionShapeManager::Initialize</a>()</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;            { <a class="code" href="classMezzanine_1_1ManagerBase.xhtml#ada3bad0fe77ff2fa7404eea7a5c16264" title="Simple bool indicating whether or not this manager has been initialized.">Initialized</a> = <span class="keyword">true</span>; }</div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;</div>
<div class="line"><a name="l00748"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#af76b39c1fa354ad0aa8eb750eab2ea89">  748</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#af76b39c1fa354ad0aa8eb750eab2ea89" title="Removes this manager from any necessary configuration so it can be safely disposed of...">CollisionShapeManager::Deinitialize</a>()</div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;            { <a class="code" href="classMezzanine_1_1ManagerBase.xhtml#ada3bad0fe77ff2fa7404eea7a5c16264" title="Simple bool indicating whether or not this manager has been initialized.">Initialized</a> = <span class="keyword">false</span>; }</div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;<span class="comment">        ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;<span class="comment"></span>        <span class="comment">// Type Identifier Methods</span></div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;</div>
<div class="line"><a name="l00754"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a9d5eb236a7ad71853a9ec4b25ca988db">  754</a></span>&#160;        <a class="code" href="classMezzanine_1_1ManagerBase.xhtml#a9a6f3e238f66cbc68dfec11e4160aa6c">ManagerBase::ManagerType</a> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a9d5eb236a7ad71853a9ec4b25ca988db" title="This returns the type of this manager. ">CollisionShapeManager::GetInterfaceType</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;<span class="keyword">            </span>{ <span class="keywordflow">return</span> ManagerBase::MT_CollisionShapeManager; }</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;</div>
<div class="line"><a name="l00757"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a949b38690069eb56f753f911521415ea">  757</a></span>&#160;        <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml#a949b38690069eb56f753f911521415ea" title="This Allows any manager name to be sent to a stream. Primarily used for logging. ">CollisionShapeManager::GetImplementationTypeName</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;<span class="keyword">            </span>{ <span class="keywordflow">return</span> <span class="stringliteral">&quot;DefaultCollisionShapeManager&quot;</span>; }</div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;<span class="comment">        ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;<span class="comment"></span>        <span class="comment">// DefaultCollisionShapeManagerFactory Methods</span></div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;</div>
<div class="line"><a name="l00763"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1DefaultCollisionShapeManagerFactory.xhtml#a44167f73d06aa14ece1906d2ae1969e3">  763</a></span>&#160;        <a class="code" href="classMezzanine_1_1Physics_1_1DefaultCollisionShapeManagerFactory.xhtml#a44167f73d06aa14ece1906d2ae1969e3" title="Class constructor.">DefaultCollisionShapeManagerFactory::DefaultCollisionShapeManagerFactory</a>()</div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;        {</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;        }</div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;</div>
<div class="line"><a name="l00767"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1DefaultCollisionShapeManagerFactory.xhtml#a9c30075a6f4d9815479f882aaab30f5d">  767</a></span>&#160;        <a class="code" href="classMezzanine_1_1Physics_1_1DefaultCollisionShapeManagerFactory.xhtml#a9c30075a6f4d9815479f882aaab30f5d" title="Class destructor.">DefaultCollisionShapeManagerFactory::~DefaultCollisionShapeManagerFactory</a>()</div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;        {</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;        }</div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;</div>
<div class="line"><a name="l00771"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1DefaultCollisionShapeManagerFactory.xhtml#ae96246d4d04ecc0d884675a9514a4e46">  771</a></span>&#160;        <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A datatype used to a series of characters.">String</a> <a class="code" href="classMezzanine_1_1Physics_1_1DefaultCollisionShapeManagerFactory.xhtml#ae96246d4d04ecc0d884675a9514a4e46" title="Gets the name of the Manager that is created by this factory. ">DefaultCollisionShapeManagerFactory::GetManagerTypeName</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&quot;DefaultCollisionShapeManager&quot;</span>;</div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;        }</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;</div>
<div class="line"><a name="l00776"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1DefaultCollisionShapeManagerFactory.xhtml#a0b8df91fed21132b3c37bf771855c5ad">  776</a></span>&#160;        <a class="code" href="classMezzanine_1_1ManagerBase.xhtml" title="This is the base class from which all the Entresol and World Managers inherit.">ManagerBase</a>* <a class="code" href="classMezzanine_1_1Physics_1_1DefaultCollisionShapeManagerFactory.xhtml#a0b8df91fed21132b3c37bf771855c5ad" title="Creates a manager of the type represented by this factory. ">DefaultCollisionShapeManagerFactory::CreateManager</a>(<a class="code" href="namespaceMezzanine.xhtml#ac9f30d4ba179aab9013e0c8fbf55bd28" title="This is a datatype mostly used for describing settings or parameters that can&#39;t be declared in advanc...">NameValuePairList</a>&amp; Params)</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;        {</div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;            <span class="keywordflow">if</span>(<a class="code" href="classMezzanine_1_1Singleton.xhtml#a554165fe3e4b594b678d64215fd7a6f9" title="Checks to see if the singleton pointer is valid.">CollisionShapeManager::SingletonValid</a>())</div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;            {<span class="comment"></span></div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;<span class="comment">                /// @todo Add something to log a warning that the manager exists and was requested to be constructed when we have a logging manager set up.</span></div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;<span class="comment"></span>                <span class="keywordflow">return</span> <a class="code" href="classMezzanine_1_1Singleton.xhtml#a78fc425584913f0b2c615ec440871a67" title="Fetches a pointer to the singleton.">CollisionShapeManager::GetSingletonPtr</a>();</div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;            }<span class="keywordflow">else</span> <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml" title="This manager is for the storage of all shapes and creation of mesh shapes.">CollisionShapeManager</a>();</div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;        }</div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;</div>
<div class="line"><a name="l00785"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1DefaultCollisionShapeManagerFactory.xhtml#a95f072ff72214db0db15dac212829be4">  785</a></span>&#160;        <a class="code" href="classMezzanine_1_1ManagerBase.xhtml" title="This is the base class from which all the Entresol and World Managers inherit.">ManagerBase</a>* <a class="code" href="classMezzanine_1_1Physics_1_1DefaultCollisionShapeManagerFactory.xhtml#a0b8df91fed21132b3c37bf771855c5ad" title="Creates a manager of the type represented by this factory. ">DefaultCollisionShapeManagerFactory::CreateManager</a>(<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">XML::Node</a>&amp; XMLNode)</div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;        {</div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;            <span class="keywordflow">if</span>(<a class="code" href="classMezzanine_1_1Singleton.xhtml#a554165fe3e4b594b678d64215fd7a6f9" title="Checks to see if the singleton pointer is valid.">CollisionShapeManager::SingletonValid</a>())</div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;            {<span class="comment"></span></div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;<span class="comment">                /// @todo Add something to log a warning that the manager exists and was requested to be constructed when we have a logging manager set up.</span></div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;<span class="comment"></span>                <span class="keywordflow">return</span> <a class="code" href="classMezzanine_1_1Singleton.xhtml#a78fc425584913f0b2c615ec440871a67" title="Fetches a pointer to the singleton.">CollisionShapeManager::GetSingletonPtr</a>();</div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;            }<span class="keywordflow">else</span> <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classMezzanine_1_1Physics_1_1CollisionShapeManager.xhtml" title="This manager is for the storage of all shapes and creation of mesh shapes.">CollisionShapeManager</a>(XMLNode);</div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;        }</div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;</div>
<div class="line"><a name="l00794"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1DefaultCollisionShapeManagerFactory.xhtml#aac1f65e001663f4de420cd8c31df6dd5">  794</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1DefaultCollisionShapeManagerFactory.xhtml#aac1f65e001663f4de420cd8c31df6dd5" title="Destroys a Manager created by this factory. ">DefaultCollisionShapeManagerFactory::DestroyManager</a>(<a class="code" href="classMezzanine_1_1ManagerBase.xhtml" title="This is the base class from which all the Entresol and World Managers inherit.">ManagerBase</a>* ToBeDestroyed)</div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;        {</div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;            <span class="keyword">delete</span> ToBeDestroyed;</div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;        }</div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;    }<span class="comment">//Physics</span></div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;}<span class="comment">//Mezzanine</span></div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;</div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;<span class="preprocessor">#endif</span></div>
</div><!-- fragment --></div><!-- contents -->
<hr class="footer"/><address class="footer"><small>
Generated on Sat Sep 14 2013 01:15:17 for MezzanineEngine by&#160;<a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1</small></address>
</body>
</html>
