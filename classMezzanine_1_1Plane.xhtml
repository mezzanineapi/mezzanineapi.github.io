<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Mezzanine::Plane Class Reference</title>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="DoxyStyle.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script> 
</head>
<body onload='searchBox.OnSelectItem(0);'>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;" nowrap="nowrap">
   <div id="projectname"><a href="http://blacktoppstudios.com"><img src="logogreen100pxtall.png"/></a>MezzanineEngine&#160;<span id="projectnumber">September&nbsp;15,&nbsp;2013</span></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceMezzanine.xhtml">Mezzanine</a></li><li class="navelem"><a class="el" href="classMezzanine_1_1Plane.xhtml">Plane</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-attribs">Public Attributes</a> &#124;
<a href="classMezzanine_1_1Plane-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">Mezzanine::Plane Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>This is used to represent a flat infinite slice of the game world.  
 <a href="classMezzanine_1_1Plane.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="plane_8h_source.xhtml">plane.h</a>&gt;</code></p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Collaboration diagram for Mezzanine::Plane:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classMezzanine_1_1Plane__coll__graph.svg" width="158" height="136"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a5d8a918982fe5424be3e9a11b1a849c2"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a5d8a918982fe5424be3e9a11b1a849c2"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Plane.xhtml#a5d8a918982fe5424be3e9a11b1a849c2">Plane</a> ()</td></tr>
<tr class="memdesc:a5d8a918982fe5424be3e9a11b1a849c2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor. <br/></td></tr>
<tr class="separator:a5d8a918982fe5424be3e9a11b1a849c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63124b4b2f35de01dcab4a877c405f20"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Plane.xhtml#a63124b4b2f35de01dcab4a877c405f20">Plane</a> (const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;Norm, const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Dist)</td></tr>
<tr class="memdesc:a63124b4b2f35de01dcab4a877c405f20"><td class="mdescLeft">&#160;</td><td class="mdescRight">Descriptive constructor.  <a href="#a63124b4b2f35de01dcab4a877c405f20">More...</a><br/></td></tr>
<tr class="separator:a63124b4b2f35de01dcab4a877c405f20"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a731e73f224d06d84a64cf461e0b09f3c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Plane.xhtml#a731e73f224d06d84a64cf461e0b09f3c">Plane</a> (const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;First, const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;Second, const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;Third)</td></tr>
<tr class="memdesc:a731e73f224d06d84a64cf461e0b09f3c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Triangle constructor.  <a href="#a731e73f224d06d84a64cf461e0b09f3c">More...</a><br/></td></tr>
<tr class="separator:a731e73f224d06d84a64cf461e0b09f3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae90cf25d88fefa17e21ea4e41265e1a2"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Plane.xhtml#ae90cf25d88fefa17e21ea4e41265e1a2">Plane</a> (const Ogre::Plane &amp;InternalPlane)</td></tr>
<tr class="memdesc:ae90cf25d88fefa17e21ea4e41265e1a2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compatibility constructor.  <a href="#ae90cf25d88fefa17e21ea4e41265e1a2">More...</a><br/></td></tr>
<tr class="separator:ae90cf25d88fefa17e21ea4e41265e1a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa22cfb96be3b60e88ebfd93aafb28ed2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Plane.xhtml#aa22cfb96be3b60e88ebfd93aafb28ed2">ExtractOgrePlane</a> (const Ogre::Plane &amp;InternalPlane)</td></tr>
<tr class="memdesc:aa22cfb96be3b60e88ebfd93aafb28ed2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Changes this <a class="el" href="classMezzanine_1_1Plane.xhtml" title="This is used to represent a flat infinite slice of the game world.">Plane</a> to match the <a class="el" href="namespaceOgre.xhtml">Ogre</a> <a class="el" href="classMezzanine_1_1Plane.xhtml" title="This is used to represent a flat infinite slice of the game world.">Plane</a>.  <a href="#aa22cfb96be3b60e88ebfd93aafb28ed2">More...</a><br/></td></tr>
<tr class="separator:aa22cfb96be3b60e88ebfd93aafb28ed2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad1bc798271d903d1045498f0eb5691a0"><td class="memItemLeft" align="right" valign="top">Ogre::Plane&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Plane.xhtml#ad1bc798271d903d1045498f0eb5691a0">GetOgrePlane</a> () const </td></tr>
<tr class="memdesc:ad1bc798271d903d1045498f0eb5691a0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets an Ogre::Plane that contains this <a class="el" href="classMezzanine_1_1Plane.xhtml" title="This is used to represent a flat infinite slice of the game world.">Plane</a>'s information.  <a href="#ad1bc798271d903d1045498f0eb5691a0">More...</a><br/></td></tr>
<tr class="separator:ad1bc798271d903d1045498f0eb5691a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87b4a3f4b61d927eb37be8bf977ede35"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceMezzanine.xhtml#a942580f9d14a57c4a192270eb78f7d57">Bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Plane.xhtml#a87b4a3f4b61d927eb37be8bf977ede35">Intersects</a> (const <a class="el" href="classMezzanine_1_1Ray.xhtml">Ray</a> &amp;ToCheck) const </td></tr>
<tr class="memdesc:a87b4a3f4b61d927eb37be8bf977ede35"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks to see if a ray intersects this <a class="el" href="classMezzanine_1_1Plane.xhtml" title="This is used to represent a flat infinite slice of the game world.">Plane</a>.  <a href="#a87b4a3f4b61d927eb37be8bf977ede35">More...</a><br/></td></tr>
<tr class="separator:a87b4a3f4b61d927eb37be8bf977ede35"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6130c45467e24dda66dca2a100909e06"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceMezzanine.xhtml#a942580f9d14a57c4a192270eb78f7d57">Bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Plane.xhtml#a6130c45467e24dda66dca2a100909e06">IsOverlapping</a> (const <a class="el" href="classMezzanine_1_1Sphere.xhtml">Sphere</a> &amp;ToCheck) const </td></tr>
<tr class="memdesc:a6130c45467e24dda66dca2a100909e06"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks to see if a sphere overlaps with this <a class="el" href="classMezzanine_1_1Plane.xhtml" title="This is used to represent a flat infinite slice of the game world.">Plane</a>.  <a href="#a6130c45467e24dda66dca2a100909e06">More...</a><br/></td></tr>
<tr class="separator:a6130c45467e24dda66dca2a100909e06"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea40504c62ae5dcb21c7c96373bb0264"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceMezzanine.xhtml#a942580f9d14a57c4a192270eb78f7d57">Bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Plane.xhtml#aea40504c62ae5dcb21c7c96373bb0264">IsOverlapping</a> (const <a class="el" href="classMezzanine_1_1AxisAlignedBox.xhtml">AxisAlignedBox</a> &amp;ToCheck) const </td></tr>
<tr class="memdesc:aea40504c62ae5dcb21c7c96373bb0264"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks to see if an AABB overlaps with this <a class="el" href="classMezzanine_1_1Plane.xhtml" title="This is used to represent a flat infinite slice of the game world.">Plane</a>.  <a href="#aea40504c62ae5dcb21c7c96373bb0264">More...</a><br/></td></tr>
<tr class="separator:aea40504c62ae5dcb21c7c96373bb0264"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa4d1bed66b7c912cc04e11efc4c30170"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceMezzanine.xhtml#a942580f9d14a57c4a192270eb78f7d57">Bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Plane.xhtml#aa4d1bed66b7c912cc04e11efc4c30170">IsOverlapping</a> (const <a class="el" href="classMezzanine_1_1Plane.xhtml">Plane</a> &amp;ToCheck) const </td></tr>
<tr class="memdesc:aa4d1bed66b7c912cc04e11efc4c30170"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks to see if another <a class="el" href="classMezzanine_1_1Plane.xhtml" title="This is used to represent a flat infinite slice of the game world.">Plane</a> intersects this one.  <a href="#aa4d1bed66b7c912cc04e11efc4c30170">More...</a><br/></td></tr>
<tr class="separator:aa4d1bed66b7c912cc04e11efc4c30170"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17d5d71568b0ae18ee38c67f72e06e58"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceMezzanine.xhtml#a942580f9d14a57c4a192270eb78f7d57">Bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Plane.xhtml#a17d5d71568b0ae18ee38c67f72e06e58">operator!=</a> (const <a class="el" href="classMezzanine_1_1Plane.xhtml">Plane</a> &amp;Other) const </td></tr>
<tr class="memdesc:a17d5d71568b0ae18ee38c67f72e06e58"><td class="mdescLeft">&#160;</td><td class="mdescRight">Inequality operator.  <a href="#a17d5d71568b0ae18ee38c67f72e06e58">More...</a><br/></td></tr>
<tr class="separator:a17d5d71568b0ae18ee38c67f72e06e58"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a678a758aa82101d2e93d4747efe7a9de"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Plane.xhtml#a678a758aa82101d2e93d4747efe7a9de">operator=</a> (const <a class="el" href="classMezzanine_1_1Plane.xhtml">Plane</a> &amp;Other)</td></tr>
<tr class="memdesc:a678a758aa82101d2e93d4747efe7a9de"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assignment operator.  <a href="#a678a758aa82101d2e93d4747efe7a9de">More...</a><br/></td></tr>
<tr class="separator:a678a758aa82101d2e93d4747efe7a9de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a32a099384e4de9ed68a7e4d3791284df"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Plane.xhtml#a32a099384e4de9ed68a7e4d3791284df">operator=</a> (const Ogre::Plane &amp;InternalPlane)</td></tr>
<tr class="memdesc:a32a099384e4de9ed68a7e4d3791284df"><td class="mdescLeft">&#160;</td><td class="mdescRight">The assignment operator from Ogre::Plane to <a class="el" href="classMezzanine_1_1Plane.xhtml" title="This is used to represent a flat infinite slice of the game world.">Mezzanine::Plane</a>.  <a href="#a32a099384e4de9ed68a7e4d3791284df">More...</a><br/></td></tr>
<tr class="separator:a32a099384e4de9ed68a7e4d3791284df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1779a7de9f9c8620bb7973d284a64650"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceMezzanine.xhtml#a942580f9d14a57c4a192270eb78f7d57">Bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Plane.xhtml#a1779a7de9f9c8620bb7973d284a64650">operator==</a> (const <a class="el" href="classMezzanine_1_1Plane.xhtml">Plane</a> &amp;Other) const </td></tr>
<tr class="memdesc:a1779a7de9f9c8620bb7973d284a64650"><td class="mdescLeft">&#160;</td><td class="mdescRight">Equality operator.  <a href="#a1779a7de9f9c8620bb7973d284a64650">More...</a><br/></td></tr>
<tr class="separator:a1779a7de9f9c8620bb7973d284a64650"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Public Attributes</h2></td></tr>
<tr class="memitem:a434b3f31159b9c4ee75bb1f855e340a9"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a434b3f31159b9c4ee75bb1f855e340a9"></a>
<a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Plane.xhtml#a434b3f31159b9c4ee75bb1f855e340a9">Distance</a></td></tr>
<tr class="memdesc:a434b3f31159b9c4ee75bb1f855e340a9"><td class="mdescLeft">&#160;</td><td class="mdescRight">How from from the origin the plane is. <br/></td></tr>
<tr class="separator:a434b3f31159b9c4ee75bb1f855e340a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a53739e48e75ba8fc6c6bfc55f96cf201"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a53739e48e75ba8fc6c6bfc55f96cf201"></a>
<a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Plane.xhtml#a53739e48e75ba8fc6c6bfc55f96cf201">Normal</a></td></tr>
<tr class="memdesc:a53739e48e75ba8fc6c6bfc55f96cf201"><td class="mdescLeft">&#160;</td><td class="mdescRight">The rotation of the plane. <br/></td></tr>
<tr class="separator:a53739e48e75ba8fc6c6bfc55f96cf201"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>This is used to represent a flat infinite slice of the game world. </p>
<p>The Normal value represents how rotated the plane will be, and The Distance with represent how far you need to move down a line perpendicular to the plane, (ie the normal, which is defined by the Normal value) from the Origin. </p>

<p>Definition at line <a class="el" href="plane_8h_source.xhtml#l00062">62</a> of file <a class="el" href="plane_8h_source.xhtml">plane.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a63124b4b2f35de01dcab4a877c405f20"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Mezzanine::Plane::Plane </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>Norm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>Dist</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Descriptive constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Norm</td><td>The rotation of the plane </td></tr>
    <tr><td class="paramname">Dist</td><td>Distance from origin to the plane </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="plane_8cpp_source.xhtml#l00067">67</a> of file <a class="el" href="plane_8cpp_source.xhtml">plane.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a731e73f224d06d84a64cf461e0b09f3c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Mezzanine::Plane::Plane </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>First</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>Second</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>Third</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Triangle constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">First</td><td>This is one point in the triangle </td></tr>
    <tr><td class="paramname">Second</td><td>This is another point in the triangle </td></tr>
    <tr><td class="paramname">Third</td><td>This is one point in the triangle </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="plane_8cpp_source.xhtml#l00072">72</a> of file <a class="el" href="plane_8cpp_source.xhtml">plane.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ae90cf25d88fefa17e21ea4e41265e1a2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Mezzanine::Plane::Plane </td>
          <td>(</td>
          <td class="paramtype">const Ogre::Plane &amp;&#160;</td>
          <td class="paramname"><em>InternalPlane</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">explicit</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Compatibility constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">InternalPlane</td><td>This is the Ogre::Plane to copy from. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="plane_8cpp_source.xhtml#l00081">81</a> of file <a class="el" href="plane_8cpp_source.xhtml">plane.cpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="aa22cfb96be3b60e88ebfd93aafb28ed2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::Plane::ExtractOgrePlane </td>
          <td>(</td>
          <td class="paramtype">const Ogre::Plane &amp;&#160;</td>
          <td class="paramname"><em>InternalPlane</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Changes this <a class="el" href="classMezzanine_1_1Plane.xhtml" title="This is used to represent a flat infinite slice of the game world.">Plane</a> to match the <a class="el" href="namespaceOgre.xhtml">Ogre</a> <a class="el" href="classMezzanine_1_1Plane.xhtml" title="This is used to represent a flat infinite slice of the game world.">Plane</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">InternalPlane</td><td>The Ogre::Plane to copy. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="plane_8cpp_source.xhtml#l00105">105</a> of file <a class="el" href="plane_8cpp_source.xhtml">plane.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ad1bc798271d903d1045498f0eb5691a0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Ogre::Plane Mezzanine::Plane::GetOgrePlane </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets an Ogre::Plane that contains this <a class="el" href="classMezzanine_1_1Plane.xhtml" title="This is used to represent a flat infinite slice of the game world.">Plane</a>'s information. </p>
<dl class="section return"><dt>Returns</dt><dd>This returns an Ogre::Plnae that contains the same information as this <a class="el" href="classMezzanine_1_1Plane.xhtml" title="This is used to represent a flat infinite slice of the game world.">Plane</a>'s information. </dd></dl>

<p>Definition at line <a class="el" href="plane_8cpp_source.xhtml#l00102">102</a> of file <a class="el" href="plane_8cpp_source.xhtml">plane.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a87b4a3f4b61d927eb37be8bf977ede35"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine.xhtml#a942580f9d14a57c4a192270eb78f7d57">Bool</a> Mezzanine::Plane::Intersects </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1Ray.xhtml">Ray</a> &amp;&#160;</td>
          <td class="paramname"><em>ToCheck</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Checks to see if a ray intersects this <a class="el" href="classMezzanine_1_1Plane.xhtml" title="This is used to represent a flat infinite slice of the game world.">Plane</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ToCheck</td><td>The ray to check for a hit. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns true if the ray intersects this <a class="el" href="classMezzanine_1_1Plane.xhtml" title="This is used to represent a flat infinite slice of the game world.">Plane</a>, false otherwise. </dd></dl>

<p>Definition at line <a class="el" href="plane_8cpp_source.xhtml#l00096">96</a> of file <a class="el" href="plane_8cpp_source.xhtml">plane.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a6130c45467e24dda66dca2a100909e06"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine.xhtml#a942580f9d14a57c4a192270eb78f7d57">Bool</a> Mezzanine::Plane::IsOverlapping </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1Sphere.xhtml">Sphere</a> &amp;&#160;</td>
          <td class="paramname"><em>ToCheck</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Checks to see if a sphere overlaps with this <a class="el" href="classMezzanine_1_1Plane.xhtml" title="This is used to represent a flat infinite slice of the game world.">Plane</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ToCheck</td><td>The sphere to check for overlap. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns true if the provided sphere overlaps with this <a class="el" href="classMezzanine_1_1Plane.xhtml" title="This is used to represent a flat infinite slice of the game world.">Plane</a>, false otherwise. </dd></dl>

<p>Definition at line <a class="el" href="plane_8cpp_source.xhtml#l00087">87</a> of file <a class="el" href="plane_8cpp_source.xhtml">plane.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="aea40504c62ae5dcb21c7c96373bb0264"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine.xhtml#a942580f9d14a57c4a192270eb78f7d57">Bool</a> Mezzanine::Plane::IsOverlapping </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1AxisAlignedBox.xhtml">AxisAlignedBox</a> &amp;&#160;</td>
          <td class="paramname"><em>ToCheck</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Checks to see if an AABB overlaps with this <a class="el" href="classMezzanine_1_1Plane.xhtml" title="This is used to represent a flat infinite slice of the game world.">Plane</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ToCheck</td><td>The AABB to check for overlap. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns true if the AABB overlaps with this <a class="el" href="classMezzanine_1_1Plane.xhtml" title="This is used to represent a flat infinite slice of the game world.">Plane</a>, false otherwise. </dd></dl>

<p>Definition at line <a class="el" href="plane_8cpp_source.xhtml#l00090">90</a> of file <a class="el" href="plane_8cpp_source.xhtml">plane.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="aa4d1bed66b7c912cc04e11efc4c30170"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine.xhtml#a942580f9d14a57c4a192270eb78f7d57">Bool</a> Mezzanine::Plane::IsOverlapping </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1Plane.xhtml">Plane</a> &amp;&#160;</td>
          <td class="paramname"><em>ToCheck</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Checks to see if another <a class="el" href="classMezzanine_1_1Plane.xhtml" title="This is used to represent a flat infinite slice of the game world.">Plane</a> intersects this one. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ToCheck</td><td>The other <a class="el" href="classMezzanine_1_1Plane.xhtml" title="This is used to represent a flat infinite slice of the game world.">Plane</a> to check for intersection. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns true if the provided <a class="el" href="classMezzanine_1_1Plane.xhtml" title="This is used to represent a flat infinite slice of the game world.">Plane</a> intersects with this <a class="el" href="classMezzanine_1_1Plane.xhtml" title="This is used to represent a flat infinite slice of the game world.">Plane</a>, false otherwise. </dd></dl>

<p>Definition at line <a class="el" href="plane_8cpp_source.xhtml#l00093">93</a> of file <a class="el" href="plane_8cpp_source.xhtml">plane.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a17d5d71568b0ae18ee38c67f72e06e58"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine.xhtml#a942580f9d14a57c4a192270eb78f7d57">Bool</a> Mezzanine::Plane::operator!= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1Plane.xhtml">Plane</a> &amp;&#160;</td>
          <td class="paramname"><em>Other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Inequality operator. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Other</td><td>The other <a class="el" href="classMezzanine_1_1Plane.xhtml" title="This is used to represent a flat infinite slice of the game world.">Plane</a> to compare with. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns true if this <a class="el" href="classMezzanine_1_1Plane.xhtml" title="This is used to represent a flat infinite slice of the game world.">Plane</a> is not the same as the other provided <a class="el" href="classMezzanine_1_1Plane.xhtml" title="This is used to represent a flat infinite slice of the game world.">Plane</a>, false otherwise. </dd></dl>

<p>Definition at line <a class="el" href="plane_8cpp_source.xhtml#l00120">120</a> of file <a class="el" href="plane_8cpp_source.xhtml">plane.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a678a758aa82101d2e93d4747efe7a9de"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::Plane::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1Plane.xhtml">Plane</a> &amp;&#160;</td>
          <td class="paramname"><em>Other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Assignment operator. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Other</td><td>The other <a class="el" href="classMezzanine_1_1Plane.xhtml" title="This is used to represent a flat infinite slice of the game world.">Plane</a> to copy from. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="plane_8cpp_source.xhtml#l00111">111</a> of file <a class="el" href="plane_8cpp_source.xhtml">plane.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a32a099384e4de9ed68a7e4d3791284df"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::Plane::operator= </td>
          <td>(</td>
          <td class="paramtype">const Ogre::Plane &amp;&#160;</td>
          <td class="paramname"><em>InternalPlane</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The assignment operator from Ogre::Plane to <a class="el" href="classMezzanine_1_1Plane.xhtml" title="This is used to represent a flat infinite slice of the game world.">Mezzanine::Plane</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">InternalPlane</td><td>The Ogre::Plane to take data from. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="plane_8cpp_source.xhtml#l00114">114</a> of file <a class="el" href="plane_8cpp_source.xhtml">plane.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a1779a7de9f9c8620bb7973d284a64650"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine.xhtml#a942580f9d14a57c4a192270eb78f7d57">Bool</a> Mezzanine::Plane::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1Plane.xhtml">Plane</a> &amp;&#160;</td>
          <td class="paramname"><em>Other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Equality operator. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Other</td><td>The other <a class="el" href="classMezzanine_1_1Plane.xhtml" title="This is used to represent a flat infinite slice of the game world.">Plane</a> to compare with. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns true if this <a class="el" href="classMezzanine_1_1Plane.xhtml" title="This is used to represent a flat infinite slice of the game world.">Plane</a> is the same as the other provided <a class="el" href="classMezzanine_1_1Plane.xhtml" title="This is used to represent a flat infinite slice of the game world.">Plane</a>, false otherwise. </dd></dl>

<p>Definition at line <a class="el" href="plane_8cpp_source.xhtml#l00117">117</a> of file <a class="el" href="plane_8cpp_source.xhtml">plane.cpp</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/Code/Mezzanine/Mezzanine/src/<a class="el" href="plane_8h_source.xhtml">plane.h</a></li>
<li>/home/Code/Mezzanine/Mezzanine/src/<a class="el" href="plane_8cpp_source.xhtml">plane.cpp</a></li>
</ul>
</div><!-- contents -->
<hr class="footer"/><address class="footer"><small>
Generated on Sun Sep 15 2013 02:46:41 for MezzanineEngine by&#160;<a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1</small></address>
</body>
</html>
